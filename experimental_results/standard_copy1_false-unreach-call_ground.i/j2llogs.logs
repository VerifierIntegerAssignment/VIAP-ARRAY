
***********************
2017-05-14 08:31:26
***********************

Command--Translate 

Parameters--
 File Name--standard_copy1_false-unreach-call_ground.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i2(_n1 + 1)=i2(_n1) + 1,i2(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=x

Closed form solution return by sympy 
n + x

Original Axoims 
x4(_n2 + 1)=x4(_n2) + 1,x4(0)=x
 Closed Form Solution
_n2 + x

***********************
2017-05-14 08:31:27
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0)

System try to prove 
d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(Not(d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                               d1array2(a1_var, _n1, _n1)))),
                 Or(Not(0 >= 0),
                    d1array2(a1_var, 0, 1 + 0) ==
                    d1array2(a1_var, 0, 0)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array2(a1_var,
                                        0,
                                        1 + 0) ==
                                        d1array2(a1_var,
                                        0,
                                        1)),
                                        (d1array2(a1_var,
                                        0,
                                        1 + 0) ==
                                        d1array2(a1_var,
                                        0,
                                        0)) ==
                                        (d1array2(a1_var,
                                        0,
                                        1) ==
                                        d1array2(a1_var,
                                        0,
                                        0))),
                                        Or(Not(0 >= 0),
                                        d1array2(a1_var,
                                        0,
                                        1 + 0) ==
                                        d1array2(a1_var,
                                        0,
                                        0)) ==
                                        Or(False,
                                        d1array2(a1_var,
                                        0,
                                        1) ==
                                        d1array2(a1_var,
                                        0,
                                        0))),
                            rewrite(Or(False,
                                       d1array2(a1_var,
                                        0,
                                        1) ==
                                       d1array2(a1_var,
                                        0,
                                        0)) ==
                                    (d1array2(a1_var, 0, 1) ==
                                     d1array2(a1_var, 0, 0))),
                            Or(Not(0 >= 0),
                               d1array2(a1_var, 0, 1 + 0) ==
                               d1array2(a1_var, 0, 0)) ==
                            (d1array2(a1_var, 0, 1) ==
                             d1array2(a1_var, 0, 0))),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a1_var,
                                        _n1,
                                        _n1)))),
                         Or(Not(0 >= 0),
                            d1array2(a1_var, 0, 1 + 0) ==
                            d1array2(a1_var, 0, 0))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a1_var,
                                        _n1,
                                        _n1)))),
                         d1array2(a1_var, 0, 1) ==
                         d1array2(a1_var, 0, 0))),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                  d1array2(a1_var, _n1, _n1)))),
                    d1array2(a1_var, 0, 1) ==
                    d1array2(a1_var, 0, 0)) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                  d1array2(a1_var, _n1, _n1)))),
                    d1array2(a1_var, 0, 1) ==
                    d1array2(a1_var, 0, 0))),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))),
            Or(Not(0 >= 0),
               d1array2(a1_var, 0, 1 + 0) ==
               d1array2(a1_var, 0, 0))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))),
            d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0))),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
      d1array2(a1_var, 0, 1) == d1array2(a1_var, 0, 0))), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                  d1array2(a1_var, _n1, _n1)))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        (d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                       d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            Implies(Var(0) >= 0,
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                               d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                      d1array2(a1_var,
                                        _n1,
                                        _n1)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                 d1array2(a1_var, _n1, _n1))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))),
                      Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a1_var, _n1, 1 + _n1) ==
                 d1array2(a1_var, _n1, _n1)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0))) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0)))),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1))))),
   ForAll(_n1,
          Or(Not(_n1 >= 0),
             d1array2(a1_var, _n1, 1 + _n1) ==
             d1array2(a1_var, _n1, _n1)))), asserted(Not(d1array2(a1_var, 0, 1) ==
             d1array2(a1_var, 0, 0))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 08:31:28
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array2(a1_var, _k1, _k1 + 1)==d1array2(a1_var, _k1, _k1)),(d1array2(a1_var, _k1 + 1, _k1 + 2)==d1array2(a1_var, _k1 + 1, _k1 + 1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(a1_var, _k1, _k1 + 1)==d1array2(a1_var, _k1, _k1)),(d1array2(a1_var, _k1 + 1, _k1 + 2)==d1array2(a1_var, _k1 + 1, _k1 + 1)))

System try to prove 
Implies((d1array2(a1_var, _k1, _k1 + 1)==d1array2(a1_var, _k1, _k1)),(d1array2(a1_var, _k1 + 1, _k1 + 2)==d1array2(a1_var, _k1 + 1, _k1 + 1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array2(a1_var, _k1, _k1 + 1)==d1array2(a1_var, _k1, _k1)),(d1array2(a1_var, _k1 + 1, _k1 + 2)==d1array2(a1_var, _k1 + 1, _k1 + 1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                               d1array2(a1_var, _n1, _n1)))),
                 Or(Not(1 + _k1 >= 0),
                    d1array2(a1_var, 1 + _k1, 1 + 1 + _k1) ==
                    d1array2(a1_var, 1 + _k1, 1 + _k1)))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1)),
                                        (d1array2(a1_var,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1)) ==
                                        (d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                                   Or(Not(1 + _k1 >= 0),
                                      d1array2(a1_var,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                      d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1)) ==
                                   Or(Not(_k1 >= -1),
                                      d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                      d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a1_var,
                                        _n1,
                                        _n1)))),
                         Or(Not(1 + _k1 >= 0),
                            d1array2(a1_var,
                                     1 + _k1,
                                     1 + 1 + _k1) ==
                            d1array2(a1_var,
                                     1 + _k1,
                                     1 + _k1))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                       d1array2(a1_var,
                                        _n1,
                                        _n1)))),
                         Or(Not(_k1 >= -1),
                            d1array2(a1_var,
                                     1 + _k1,
                                     2 + _k1) ==
                            d1array2(a1_var,
                                     1 + _k1,
                                     1 + _k1)))),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                  d1array2(a1_var, _n1, _n1)))),
                    Or(Not(_k1 >= -1),
                       d1array2(a1_var, 1 + _k1, 2 + _k1) ==
                       d1array2(a1_var, 1 + _k1, 1 + _k1))) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                  d1array2(a1_var, _n1, _n1)))),
                    Not(_k1 >= -1),
                    d1array2(a1_var, 1 + _k1, 2 + _k1) ==
                    d1array2(a1_var, 1 + _k1, 1 + _k1))),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))),
            Or(Not(1 + _k1 >= 0),
               d1array2(a1_var, 1 + _k1, 1 + 1 + _k1) ==
               d1array2(a1_var, 1 + _k1, 1 + _k1))) ==
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))),
            Not(_k1 >= -1),
            d1array2(a1_var, 1 + _k1, 2 + _k1) ==
            d1array2(a1_var, 1 + _k1, 1 + _k1))),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
      Not(_k1 >= -1),
      d1array2(a1_var, 1 + _k1, 2 + _k1) ==
      d1array2(a1_var, 1 + _k1, 1 + _k1))), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                  d1array2(a1_var, _n1, _n1)))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        (d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                       d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            Implies(Var(0) >= 0,
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                               d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                      d1array2(a1_var,
                                        _n1,
                                        _n1)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                 d1array2(a1_var, _n1, _n1))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))),
                      Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a1_var, _n1, 1 + _n1) ==
                 d1array2(a1_var, _n1, _n1)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0))) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0)))),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1))))),
   ForAll(_n1,
          Or(Not(_n1 >= 0),
             d1array2(a1_var, _n1, 1 + _n1) ==
             d1array2(a1_var, _n1, _n1)))), not-or-elim(mp(asserted(Not(Implies(d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                    d1array2(a1_var,
                                        _k1,
                                        _k1),
                                    d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                    d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1)))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        1 + _k1)),
                                        (d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1)) ==
                                        (d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1)),
                                        (d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1)) ==
                                        (d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                                        Implies(d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1),
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1)) ==
                                        Implies(d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1),
                                        d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                                  rewrite(Implies(d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1),
                                        d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1)) ==
                                        Or(Not(d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1)),
                                        d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                        d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                                  Implies(d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1),
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1)) ==
                                  Or(Not(d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1)),
                                     d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                     d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1))),
                            Not(Implies(d1array2(a1_var,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array2(a1_var,
                                        _k1,
                                        _k1),
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array2(a1_var,
                                        _k1 + 1,
                                        _k1 + 1))) ==
                            Not(Or(Not(d1array2(a1_var,
                                        _k1,
                                        1 + _k1) ==
                                       d1array2(a1_var,
                                        _k1,
                                        _k1)),
                                   d1array2(a1_var,
                                        1 + _k1,
                                        2 + _k1) ==
                                   d1array2(a1_var,
                                        1 + _k1,
                                        1 + _k1)))),
               Not(Or(Not(d1array2(a1_var, _k1, 1 + _k1) ==
                          d1array2(a1_var, _k1, _k1)),
                      d1array2(a1_var, 1 + _k1, 2 + _k1) ==
                      d1array2(a1_var, 1 + _k1, 1 + _k1)))),
            Not(d1array2(a1_var, 1 + _k1, 2 + _k1) ==
                d1array2(a1_var, 1 + _k1, 1 + _k1))), unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 08:31:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array2(a1_var, _k1, _k1 + 1)==d1array2(a1_var, _k1, _k1)),(d1array2(a1_var, _k1 + 1, _k1 + 2)==d1array2(a1_var, _k1 + 1, _k1 + 1)))

System try to prove 
Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(i1 == _N1)
_s.add(x1 == _N2)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a2_var, _x2) == d1array4(a2_var, _x2, _N2))))
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a1_var, _x2) == d1array4(a1_var, _x2, _N2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(Not(Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                               d1array2(a1_var, _n1, _n1)))),
                 Or(Not(_n1!2 >= 0),
                    d1array2(a1_var, _n1!2, 1 + _n1!2) ==
                    d1array2(a1_var, _n1!2, _n1!2)))),
   rewrite(Or(Not(ForAll(_n1,
                         Or(Not(_n1 >= 0),
                            d1array2(a1_var, _n1, 1 + _n1) ==
                            d1array2(a1_var, _n1, _n1)))),
              Or(Not(_n1!2 >= 0),
                 d1array2(a1_var, _n1!2, 1 + _n1!2) ==
                 d1array2(a1_var, _n1!2, _n1!2))) ==
           Or(Not(ForAll(_n1,
                         Or(Not(_n1 >= 0),
                            d1array2(a1_var, _n1, 1 + _n1) ==
                            d1array2(a1_var, _n1, _n1)))),
              Not(_n1!2 >= 0),
              d1array2(a1_var, _n1!2, 1 + _n1!2) ==
              d1array2(a1_var, _n1!2, _n1!2))),
   Or(Not(ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
      Not(_n1!2 >= 0),
      d1array2(a1_var, _n1!2, 1 + _n1!2) ==
      d1array2(a1_var, _n1!2, _n1!2))), mp(mp~(mp(asserted(ForAll(_n1,
                          Implies(_n1 >= 0,
                                  d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                  d1array2(a1_var, _n1, _n1)))),
          quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        (d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            rewrite(Implies(Var(0) >= 0,
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                       d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                            Implies(Var(0) >= 0,
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                    d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                            Or(Not(Var(0) >= 0),
                               d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                               d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                      (ForAll(_n1,
                              Implies(_n1 >= 0,
                                      d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                      d1array2(a1_var,
                                        _n1,
                                        _n1)))) ==
                      (ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                 d1array2(a1_var, _n1, _n1))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array2(a1_var, _n1, 1 + _n1) ==
                    d1array2(a1_var, _n1, _n1)))),
       nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))),
                      Or(Not(Var(0) >= 0),
                         d1array2(a1_var,
                                  Var(0),
                                  1 + Var(0)) ==
                         d1array2(a1_var, Var(0), Var(0))))),
               ~(ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))),
                 ForAll(_n1,
                        Or(Not(_n1 >= 0),
                           d1array2(a1_var, _n1, 1 + _n1) ==
                           d1array2(a1_var, _n1, _n1))))),
       ForAll(_n1,
              Or(Not(_n1 >= 0),
                 d1array2(a1_var, _n1, 1 + _n1) ==
                 d1array2(a1_var, _n1, _n1)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0))) ==
                    Or(Not(Var(0) >= 0),
                       d1array2(a1_var, Var(0), 1 + Var(0)) ==
                       d1array2(a1_var, Var(0), Var(0)))),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1)))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          d1array2(a1_var, _n1, 1 + _n1) ==
                          d1array2(a1_var, _n1, _n1))))),
   ForAll(_n1,
          Or(Not(_n1 >= 0),
             d1array2(a1_var, _n1, 1 + _n1) ==
             d1array2(a1_var, _n1, _n1)))), and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        (d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((...) ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite((... > ...) ==
                                        Not(...)),
                                        And(And(..., ...),
                                        ... > ...) ==
                                        And(And(..., ...),
                                        Not(...))),
                                        rewrite(And(And(...,
                                        ...),
                                        Not(...)) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...))),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        trans(trans(monotonicity(rewrite(... ==
                                        ...),
                                        (... < ...) ==
                                        (... < ...)),
                                        rewrite((... < ...) ==
                                        Not(...)),
                                        (Var(0) < ... + ...) ==
                                        Not(... <= ...)),
                                        monotonicity(rewrite((... <=
                                        ...) ==
                                        (... <= ...)),
                                        Not(... <= ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(_L1 <= ... + ...)),
                                        And(And(And(... >=
                                        ...,
                                        ... < ...),
                                        _L1 > 0),
                                        Var(0) < _L1 + 1) ==
                                        And(And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...)),
                                        Not(_L1 <= ... + ...))),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        (d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0))) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        Var(0),
                                        1 + Var(0)) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        Var(0)))),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array2(a1_var,
                                        _n1,
                                        _n1 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1)))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array2(a1_var,
                                        _n1,
                                        1 + _n1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _n1))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L1 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L1 <= ... + ...)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1)))

***********************
2017-05-14 08:31:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array2(a2_var, _x2, 0) ==
                           d1array(a2_var, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array2(a2_var, Var(0), 0) ==
                               d1array(a2_var, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array2(a2_var, Var(0), 0) ==
                          d1array(a2_var, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array2(a2_var, _x2, 0) ==
                               d1array(a2_var, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array2(a2_var, _x2, 0) ==
                          d1array(a2_var, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array2(a2_var, _x2, 0) ==
             d1array(a2_var, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array2(a2_var, _x2, 0) ==
                               d1array(a2_var, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array2(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array2(a2_var,
                                        Var(0),
                                        0) ==
                                       d1array(a2_var,
                                        Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array2(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array2(a2_var,
                                        _x2,
                                        0) ==
                                       d1array(a2_var, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array2(a2_var, _x2, 0) ==
                                   d1array(a2_var, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array2(a2_var, _x2, 0) ==
                              d1array(a2_var, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array2(a2_var, _x2, 0) ==
                 d1array(a2_var, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 08:31:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a2_var, _x2, _k1 + 1)==d1array(a2_var, _x2)),(d1array2(a2_var, _x2, _k1 + 2)==d1array(a2_var, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a2_var, _x2, _k1 + 1)==d1array(a2_var, _x2)),(d1array2(a2_var, _x2, _k1 + 2)==d1array(a2_var, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a2_var, _x2, _k1 + 1)==d1array(a2_var, _x2)),(d1array2(a2_var, _x2, _k1 + 2)==d1array(a2_var, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array2(a2_var, _x2, _k1 + 1)==d1array(a2_var, _x2)),(d1array2(a2_var, _x2, _k1 + 2)==d1array(a2_var, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array2(a2_var,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(a2_var, _x2),
                                        d1array2(a2_var,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(a2_var, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        (d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        (d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Implies(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        rewrite(Implies(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array2(a2_var,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array2(a2_var,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array2(a2_var,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array2(a2_var,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array2(a2_var,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(a2_var, _x2),
                                        d1array2(a2_var,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(a2_var, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array2(a2_var,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(a2_var, _x2)),
                                        d1array2(a2_var,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(a2_var, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array2(a2_var,
                                        _x2,
                                        _k1 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array2(a2_var,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array2(a2_var,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array2(a2_var,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        1 + _n1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array2(a2_var, _x2!2, 2 + _k1) ==
                            d1array2(a2_var, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array2(a2_var,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array2(a2_var,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array2(a2_var,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array2(a2_var,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2)))

***********************
2017-05-14 08:31:33
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, 0) == d1array2(a1_var, _n1, _N1)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, 0) == d1array2(a1_var, _n1, _N1)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, 0) == d1array2(a1_var, _n1, _N1)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a1_var, _x2, _n2 + 1) == d1array4(a1_var, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a2_var, _x2, _n2 + 1) == d1array4(a2_var, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a1_var, _x2, 0) == d1array2(a1_var, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array2(a2_var, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, 0) == d1array2(a1_var, _n1, _N1)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(a1_var, _x2, 0) ==
                           d1array2(a1_var, _x2, _N1)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(a1_var, Var(0), 0) ==
                               d1array2(a1_var, Var(0), _N1)) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(a1_var, Var(0), 0) ==
                          d1array2(a1_var, Var(0), _N1))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(a1_var, _x2, 0) ==
                               d1array2(a1_var, _x2, _N1)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(a1_var, _x2, 0) ==
                          d1array2(a1_var, _x2, _N1))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(a1_var, _x2, 0) ==
             d1array2(a1_var, _x2, _N1)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(a1_var, _x2, 0) ==
                               d1array2(a1_var, _x2, _N1))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(a1_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(a1_var,
                                        Var(0),
                                        0) ==
                                       d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(a1_var,
                                        _x2,
                                        0) ==
                                        d1array2(a1_var,
                                        _x2,
                                        _N1)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(a1_var,
                                        _x2,
                                        0) ==
                                       d1array2(a1_var,
                                        _x2,
                                        _N1))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(a1_var, _x2, 0) ==
                                   d1array2(a1_var,
                                        _x2,
                                        _N1)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(a1_var, _x2, 0) ==
                              d1array2(a1_var, _x2, _N1))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(a1_var, _x2, 0) ==
                 d1array2(a1_var, _x2, _N1))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 08:31:34
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d1array4(a1_var, _n1, _k2 + 1)==d1array2(a1_var, _n1, _N1)),(d1array4(a1_var, _n1, _k2 + 2)==d1array2(a1_var, _n1, _N1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d1array4(a1_var, _n1, _k2 + 1)==d1array2(a1_var, _n1, _N1)),(d1array4(a1_var, _n1, _k2 + 2)==d1array2(a1_var, _n1, _N1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d1array4(a1_var, _n1, _k2 + 1)==d1array2(a1_var, _n1, _N1)),(d1array4(a1_var, _n1, _k2 + 2)==d1array2(a1_var, _n1, _N1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a1_var, _x2, _n2 + 1) == d1array4(a1_var, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a2_var, _x2, _n2 + 1) == d1array4(a2_var, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a1_var, _x2, 0) == d1array2(a1_var, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array2(a2_var, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d1array4(a1_var, _n1, _k2 + 1)==d1array2(a1_var, _n1, _N1)),(d1array4(a1_var, _n1, _k2 + 2)==d1array2(a1_var, _n1, _N1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d1array4(a1_var,
                                        _n1,
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _N1),
                                        d1array4(a1_var,
                                        _n1,
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        _n1,
                                        _N1)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array4(a1_var,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                        (d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                        (d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        Implies(d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                        Implies(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        rewrite(Implies(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        Implies(d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1)),
                                        d1array4(a1_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a1_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1),
                                        d1array4(a1_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array2(a1_var,
                                        Var(0),
                                        _N1))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a1_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array2(a1_var,
                                        Var(0),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_n1!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2)),
                                        (d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2)) ==
                                        (d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2)) ==
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                        d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_n1!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array4(a1_var,
                                        _n1!2,
                                        1 + 1 + _k2) ==
                                     d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                  Not(_n1!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array4(a1_var,
                                        _n1!2,
                                        2 + _k2) ==
                                  d1array4(a1_var,
                                        _n1!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                            Not(_n1!2 >= 0),
                            Not(_k2 >= -1),
                            d1array4(a1_var, _n1!2, 2 + _k2) ==
                            d1array4(a1_var, _n1!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array4(a1_var,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array4(a1_var,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a1_var,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(a1_var,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(a1_var,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, _N2) == d1array2(a1_var, _n1, _N1)))

***********************
2017-05-14 08:31:35
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array(a2_var, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array(a2_var, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array(a2_var, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a1_var, _x2, _n2 + 1) == d1array4(a1_var, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a2_var, _x2, _n2 + 1) == d1array4(a2_var, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a1_var, _x2, 0) == d1array2(a1_var, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array2(a2_var, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, _N2) == d1array2(a1_var, _n1, _N1))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array(a2_var, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array4(a2_var, _x2, 0) ==
                                 d1array(a2_var, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array4(a2_var, _x2, 0) ==
                                   d1array(a2_var, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array4(a2_var, _x2!2, 0) ==
                            d1array(a2_var, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array4(a2_var, _x2!2, 0) ==
                       d1array(a2_var, _x2!2)))),
            Not(d1array4(a2_var, _x2!2, 0) ==
                d1array(a2_var, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array4(a2_var,
                                        _x2!2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array4(a2_var,
                                        _x2!2,
                                        0) ==
                                       d1array2(a2_var,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array4(a2_var,
                                        _x2!2,
                                        0) ==
                                    d1array2(a2_var,
                                        _x2!2,
                                        _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array4(a2_var, _x2!2, 0) ==
                            d1array2(a2_var, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(a2_var,
                                        _x2,
                                        0) ==
                                       d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array2(a2_var,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array2(a2_var,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array4(a2_var, _x2, 0) ==
                                   d1array2(a2_var,
                                        _x2,
                                        _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
                                        _x2,
                                        0) ==
                                        d1array(a2_var, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array4(a2_var,
                                        Var(0),
                                        0) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array4(a2_var,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 08:31:36
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a2_var, _x2, _k2 + 1)==d1array(a2_var, _x2)),(d1array4(a2_var, _x2, _k2 + 2)==d1array(a2_var, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a2_var, _x2, _k2 + 1)==d1array(a2_var, _x2)),(d1array4(a2_var, _x2, _k2 + 2)==d1array(a2_var, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a2_var, _x2, _k2 + 1)==d1array(a2_var, _x2)),(d1array4(a2_var, _x2, _k2 + 2)==d1array(a2_var, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a1_var, _x2, _n2 + 1) == d1array4(a1_var, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a2_var, _x2, _n2 + 1) == d1array4(a2_var, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a1_var, _x2, 0) == d1array2(a1_var, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array2(a2_var, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, _N2) == d1array2(a1_var, _n1, _N1))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(a2_var, _x2, _k2 + 1)==d1array(a2_var, _x2)),(d1array4(a2_var, _x2, _k2 + 2)==d1array(a2_var, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(a2_var,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(a2_var, _x2),
                                        d1array4(a2_var,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(a2_var, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array4(a2_var,
                                        Var(0),
                                        1 + _k2)),
                                        (d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        (d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2)),
                                        (d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        (d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Implies(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        rewrite(Implies(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a2_var,
                                        Var(0))) ==
                                        Or(Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(a2_var,
                                        Var(0),
                                        _k2 + 1) ==
                                        d1array(a2_var,
                                        Var(0)),
                                        d1array4(a2_var,
                                        Var(0),
                                        _k2 + 2) ==
                                        d1array(a2_var,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(a2_var,
                                        Var(0),
                                        1 + _k2) ==
                                        d1array(a2_var,
                                        Var(0))),
                                        d1array4(a2_var,
                                        Var(0),
                                        2 + _k2) ==
                                        d1array(a2_var,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(a2_var,
                                        _x2,
                                        _k2 + 1) ==
                                        d1array(a2_var, _x2),
                                        d1array4(a2_var,
                                        _x2,
                                        _k2 + 2) ==
                                        d1array(a2_var, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(a2_var,
                                        _x2,
                                        1 + _k2) ==
                                        d1array(a2_var, _x2)),
                                        d1array4(a2_var,
                                        _x2,
                                        2 + _k2) ==
                                        d1array(a2_var, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(a2_var,
                                        _x2,
                                        _k2 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2)),
                                        (d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2)) ==
                                        (d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))),
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))) ==
                                        Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))) ==
                                       Or(Not(ForAll([_x2,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k2 >= -1),
                                        d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                        d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))),
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array4(a2_var,
                                        _x2!2,
                                        1 + 1 + _k2) ==
                                     d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))) ==
                               Or(Not(ForAll([_x2, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k2 >= -1),
                                  d1array4(a2_var,
                                        _x2!2,
                                        2 + _k2) ==
                                  d1array4(a2_var,
                                        _x2!2,
                                        1 + _k2))),
                         Or(Not(ForAll([_x2, _n2],
                                       Or(Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        1 + _n2) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                            Not(_x2!2 >= 0),
                            Not(_k2 >= -1),
                            d1array4(a2_var, _x2!2, 2 + _k2) ==
                            d1array4(a2_var, _x2!2, 1 + _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n2],
                                        Implies(And(_x2 >= 0,
                                        _n2 >= 0),
                                        d1array4(a2_var,
                                        _x2,
                                        _n2 + 1) ==
                                        d1array4(a2_var,
                                        _x2,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(a2_var,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(a2_var,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(a2_var,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, _N2) == d1array(a2_var, _x2)))

***********************
2017-05-14 08:31:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n2],Implies(_n2>=0,(d1array4(a1_var, _n2, _N2)==d1array4(a2_var, _n2, _N2))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n2],Implies(_n2>=0,(d1array4(a1_var, _n2, _N2)==d1array4(a2_var, _n2, _N2))))

System try to prove 
ForAll([_n2],Implies(_n2>=0,(d1array4(a1_var, _n2, _N2)==d1array4(a2_var, _n2, _N2))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n2=Int('_n2')
main=Int('main')
a1_var=Const('a1_var',arraySort)
_n1=Int('_n1')
i1=Int('i1')
_N1=Const('_N1',IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
a2_var=Const('a2_var',arraySort)
d1array=Function('d1array',arraySort,IntSort(),IntSort())
a2_var1=Const('a2_var1',arraySort)
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
a1_var1=Const('a1_var1',arraySort)
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
_N2=Const('_N2',IntSort())
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k2=Int('_k2')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array2=Function('d1array2',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(i1 == _N1)
_s.add(x1 == _N2)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a2_var, _x2) == d1array4(a2_var, _x2, _N2))))
_s.add(main == 0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(a1_var, _x2) == d1array4(a1_var, _x2, _N2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _n1 + 1) == d1array2(a1_var, _n1, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array2(a2_var, _x2, _n1 + 1) == d1array2(a2_var, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a1_var, _x2, 0) == d1array(a1_var, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, 0) == d1array(a2_var, _x2))))
_s.add(_N1 >= 100000)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 100000)))
_s.add(Or(_N1==0,_N1 - 1 < 100000))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a1_var, _x2, _n2 + 1) == d1array4(a1_var, _x2, _n2))))
_s.add(ForAll([_x2,_n2],Implies(And(_x2>=0,_n2>=0),d1array4(a2_var, _x2, _n2 + 1) == d1array4(a2_var, _x2, _n2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a1_var, _x2, 0) == d1array2(a1_var, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, 0) == d1array2(a2_var, _x2, _N1))))
_s.add(_N2 >= 100000)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < 100000)))
_s.add(Or(_N2==0,_N2 - 1 < 100000))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array2(a1_var, _n1, _N1) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array2(a2_var, _x2, _N1) == d1array(a2_var, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(a1_var, _n1, _N2) == d1array2(a1_var, _n1, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(a2_var, _x2, _N2) == d1array(a2_var, _x2))))
_s.add(a2_var1 == a2_var)
_s.add(a1_var1 == a1_var)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_N1>=0)
_s.add(_N2>=0)
_s.add(Not(ForAll([_n2],Implies(_n2>=0,(d1array4(a1_var, _n2, _N2)==d1array4(a2_var, _n2, _N2))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">standard_copy1_false-unreach-call_ground.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'standard_copy1_false-unreach-call_ground.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove
