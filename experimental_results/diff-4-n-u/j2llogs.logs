
***********************
2017-05-15 01:01:02
***********************

Command--Translate 

Parameters--
 File Name--multi/diff-4-n-u/diff-4-n-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l2(_n1 + 1)=l2(_n1) + 1,l2(0)=l
 Closed Form Solution
_n1 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k5(_n2 + 1)=k5(_n2) + 1,k5(0)=k
 Closed Form Solution
_n2 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j9(_n3 + 1)=j9(_n3) + 1,j9(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i14(_n4 + 1)=i14(_n4) + 1,i14(0)=i
 Closed Form Solution
_n4 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l16(_n5 + 1)=l16(_n5) + 1,l16(0)=l
 Closed Form Solution
_n5 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k19(_n6 + 1)=k19(_n6) + 1,k19(0)=k
 Closed Form Solution
_n6 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j23(_n7 + 1)=j23(_n7) + 1,j23(0)=j
 Closed Form Solution
_n7 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i28(_n8 + 1)=i28(_n8) + 1,i28(0)=i
 Closed Form Solution
_n8 + i

***********************
2017-05-15 01:01:11
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(A,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(A, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(A,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(A,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(A,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(A,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(A,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(A, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(A, _x2, _x3, _x4, _x5, 0) ==
             d4array(A, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:01:18
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(C,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(C, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(C,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(C,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(C,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(C,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(C,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(C,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(C, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(C, _x2, _x3, _x4, _x5, 0) ==
             d4array(C, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(C,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:01:25
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(B,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(B, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(B,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(B,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(B,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(B,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(B,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(B,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(B, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(B, _x2, _x3, _x4, _x5, 0) ==
             d4array(B, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(B,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:01:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:01:41
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, 0, _k4) == d4array(C, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, 0, _k4) == d4array(C, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, 0, _k4) == d4array(C, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, 0, _k4) == d4array(C, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(C,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(C,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(C,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:01:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:00
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(C,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(C,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(C,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(A, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(A, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(A, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(A, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                    d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n2,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:34
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(A, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array2(A, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(A, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array2(A, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(A, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array2(A, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(A, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array2(A, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array2(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:02:39
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d4array2(C, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d4array2(C, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)

System try to prove 
d4array2(C, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(d4array2(C, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4 >= 0),
                    Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d4array2(B,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             0,
                             _k2,
                             _k3,
                             _k4) +
                    -1*
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             0,
                             _k2,
                             _k3,
                             _k4) +
                    d4array2(C,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             1 + 0,
                             _k2,
                             _k3,
                             _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        rewrite(d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(B,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) -
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), mp(mp(asserted(Not(d4array2(C,
                            _k4,
                            _k3,
                            _k2,
                            0,
                            1,
                            _k2,
                            _k3,
                            _k4) ==
                   d4array2(A,
                            _k4,
                            _k3,
                            _k2,
                            0,
                            0,
                            _k2,
                            _k3,
                            _k4) -
                   d4array2(B,
                            _k4,
                            _k3,
                            _k2,
                            0,
                            0,
                            _k2,
                            _k3,
                            _k4))),
      monotonicity(monotonicity(rewrite(d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)),
                                (d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) -
                                 d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                (d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) +
                                 -1*
                                 d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4))),
                   Not(d4array2(C,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                1,
                                _k2,
                                _k3,
                                _k4) ==
                       d4array2(A,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                0,
                                _k2,
                                _k3,
                                _k4) -
                       d4array2(B,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                0,
                                _k2,
                                _k3,
                                _k4)) ==
                   Not(d4array2(C,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                1,
                                _k2,
                                _k3,
                                _k4) ==
                       d4array2(A,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                0,
                                _k2,
                                _k3,
                                _k4) +
                       -1*
                       d4array2(B,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                0,
                                _k2,
                                _k3,
                                _k4))),
      Not(d4array2(C, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) ==
          d4array2(A, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4) +
          -1*d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4))),
   monotonicity(rewrite((d4array2(C,
                                  _k4,
                                  _k3,
                                  _k2,
                                  0,
                                  1,
                                  _k2,
                                  _k3,
                                  _k4) ==
                         d4array2(A,
                                  _k4,
                                  _k3,
                                  _k2,
                                  0,
                                  0,
                                  _k2,
                                  _k3,
                                  _k4) +
                         -1*
                         d4array2(B,
                                  _k4,
                                  _k3,
                                  _k2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:42
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d4array2(C, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(C, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(C, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(C, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

System try to prove 
Implies((d4array2(C, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(C, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies((d4array2(C, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(C, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4 >= 0),
                    Not(1 + _k1 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d4array2(B,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + _k1,
                             _k2,
                             _k3,
                             _k4) +
                    -1*
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + _k1,
                             _k2,
                             _k3,
                             _k4) +
                    d4array2(C,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2,
                             _k3,
                             _k4) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(trans(monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        rewrite(d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) -
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), mp(not-or-elim(mp(asserted(Not(Implies(d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                       d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4),
                                       d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                       d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4)))),
                  monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        rewrite(d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        trans(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:02:46
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(C, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(C, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

System try to prove 
Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(C, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(A, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) +
                               d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4!11 >= 0),
                    Not(_n1!10 >= 0),
                    Not(_k3!9 >= 0),
                    Not(_k2!8 >= 0),
                    d4array2(B,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11) +
                    -1*
                    d4array2(A,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11) +
                    d4array2(C,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             1 + _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11) ==
                    0))),
   rewrite(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                         Or(Not(_n4 >= 0),
                            Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d4array2(B,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4) +
                            -1*
                            d4array2(A,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4) +
                            d4array2(C,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3,
                                     _n4) ==
                            0))),
              Or(Not(_k4!11 >= 0),
                 Not(_n1!10 >= 0),
                 Not(_k3!9 >= 0),
                 Not(_k2!8 >= 0),
                 d4array2(B,
                          _k4!11,
                          _k3!9,
                          _k2!8,
                          _n1!10,
                          _n1!10,
                          _k2!8,
                          _k3!9,
                          _k4!11) +
                 -1*
                 d4array2(A,
                          _k4!11,
                          _k3!9,
                          _k2!8,
                          _n1!10,
                          _n1!10,
                          _k2!8,
                          _k3!9,
                          _k4!11) +
                 d4array2(C,
                          _k4!11,
                          _k3!9,
                          _k2!8,
                          _n1!10,
                          1 + _n1!10,
                          _k2!8,
                          _k3!9,
                          _k4!11) ==
                 0)) ==
           Or(Not(ForAll([_n4, _n1, _n3, _n2],
                         Or(Not(_n4 >= 0),
                            Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d4array2(B,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4) +
                            -1*
                            d4array2(A,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4) +
                            d4array2(C,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3,
                                     _n4) ==
                            0))),
              Not(_k4!11 >= 0),
              Not(_n1!10 >= 0),
              Not(_k3!9 >= 0),
              Not(_k2!8 >= 0),
              d4array2(B,
                       _k4!11,
                       _k3!9,
                       _k2!8,
                       _n1!10,
                       _n1!10,
                       _k2!8,
                       _k3!9,
                       _k4!11) +
              -1*
              d4array2(A,
                       _k4!11,
                       _k3!9,
                       _k2!8,
                       _n1!10,
                       _n1!10,
                       _k2!8,
                       _k3!9,
                       _k4!11) +
              d4array2(C,
                       _k4!11,
                       _k3!9,
                       _k2!8,
                       _n1!10,
                       1 + _n1!10,
                       _k2!8,
                       _k3!9,
                       _k4!11) ==
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4) -
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) +
                                        -1*
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) -
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        rewrite(d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4)))

***********************
2017-05-15 01:02:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9)))),
                      rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                 Or(Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                    d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9))) ==
                              Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                 Not(_x3!11 >= 0),
                                 Not(_x2!10 >= 0),
                                 Not(_x5!9 >= 0),
                                 Not(_x4!8 >= 0),
                                 d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9))),
                      Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       Not(_x5 >= 0),
                                       Not(_x4 >= 0),
                                       d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                         Not(_x3!11 >= 0),
                         Not(_x2!10 >= 0),
                         Not(_x5!9 >= 0),
                         Not(_x4!8 >= 0),
                         d4array5(B,
                                  _x2!10,
                                  _x3!11,
                                  _x4!8,
                                  _x5!9,
                                  _k2,
                                  _k3,
                                  _k4) ==
                         d4array(B,
                                 _x2!10,
                                 _x3!11,
                                 _x4!8,
                                 _x5!9))),
                   mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:03:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:03:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array5(A, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array5(A, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array5(A, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array5(A, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4)),
                                        (d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array5(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!861 >= 0),
                                        Not(_x2!860 >= 0),
                                        Not(_x5!859 >= 0),
                                        Not(_x4!858 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!861 >= 0),
                                       Not(_x2!860 >= 0),
                                       Not(_x5!859 >= 0),
                                       Not(_x4!858 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array5(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!861 >= 0),
                                    Not(_x2!860 >= 0),
                                    Not(_x5!859 >= 0),
                                    Not(_x4!858 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    d4array5(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                    d4array2(A,
                                        _x2!860,
                                        _x3!861,
                                        _x4!858,
                                        _x5!859,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                            Not(_x3!861 >= 0),
                            Not(_x2!860 >= 0),
                            Not(_x5!859 >= 0),
                            Not(_x4!858 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:03:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(C, _k4, _k3, _k2 - 1, _n1)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(C, _k4, _k3, _k2 - 1, _n1)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(C, _k4, _k3, _k2 - 1, _n1)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(C, _k4, _k3, _k2 - 1, _n1)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-15 01:05:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array5(C, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(A, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4) - d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array5(C, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(A, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4) - d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array5(C, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(A, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4) - d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array5(C, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(A, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4) - d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)),
                            d4array5(C,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     1,
                                     _k3,
                                     _k4) +
                            -1*
                            d4array2(C,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3, _k4),
                                     0,
                                     _k3,
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4)),
                                        (d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        (d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        False,
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        0,
                                        Not(d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) <=
                                        0),
                                        Not(d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)),
                                        (d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        (d4array5(C,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
..., unit-resolution(th-lemma(Or(Not(d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                -1*
                                d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) ==
                                0),
                            d4array2(B,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3, _k4),
                                     0,
                                     _k3,
                                     _k4) +
                            -1*
                            d4array2(A,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3, _k4),
                                     0,
                                     _k3,
                                     _k4) +
                            d4array2(C,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3, _k4),
                                     0,
                                     _k3,
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        -1*
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:05:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4) - d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4) - d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4) - d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(C, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(A, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4) - d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(C, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(A, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4) - d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)),
                            d4array5(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     1 + _k2,
                                     _k3,
                                     _k4) +
                            -1*
                            d4array2(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3, _k4),
                                     _k2,
                                     _k3,
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))),
                                   trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
..., unit-resolution(unit-resolution(th-lemma(Or(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0,
                                        Not(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) <=
                                        0),
                                        Not(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4),
                                        _k2 - 1,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4),
                                        _k2 - 1,
                                        _k3,
                                        _k4),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) -
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(...*
                                        ... ==
                                        -1),
                                        _k2 + ...*... ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4)),
                                        trans(monotonicity(monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N1(... - ...,
                                        _k3,
                                        _k4) ==
                                        _N1(... + ...,
                                        _k3,
                                        _k4)),
                                        trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
..., unit-resolution(th-lemma(Or(Not(d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                -1*
                                d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                0),
                            d4array2(B,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3, _k4),
                                     _k2,
                                     _k3,
                                     _k4) +
                            -1*
                            d4array2(A,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3, _k4),
                                     _k2,
                                     _k3,
                                     _k4) +
                            d4array2(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3, _k4),
                                     _k2,
                                     _k3,
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        -1*
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        -1*
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) +
                                        d4array2(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) +
                                        d4array2(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3)))

***********************
2017-05-15 01:06:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(C, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4)),
                                        (d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array5(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!885 >= 0),
                                        Not(_x2!884 >= 0),
                                        Not(_x5!883 >= 0),
                                        Not(_x4!882 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!885 >= 0),
                                       Not(_x2!884 >= 0),
                                       Not(_x5!883 >= 0),
                                       Not(_x4!882 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array5(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!885 >= 0),
                                    Not(_x2!884 >= 0),
                                    Not(_x5!883 >= 0),
                                    Not(_x4!882 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    d4array5(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                    d4array2(B,
                                        _x2!884,
                                        _x3!885,
                                        _x4!882,
                                        _x5!883,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                            Not(_x3!885 >= 0),
                            Not(_x2!884 >= 0),
                            Not(_x5!883 >= 0),
                            Not(_x4!882 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:06:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array9(A, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array9(A, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array9(A, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array9(A, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(A,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!891 >= 0),
                                        Not(_x2!890 >= 0),
                                        Not(_x5!889 >= 0),
                                        Not(_x4!888 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!891 >= 0),
                                       Not(_x2!890 >= 0),
                                       Not(_x5!889 >= 0),
                                       Not(_x4!888 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array9(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        1 + _k3,
                                        _k4) ==
                                       d4array5(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Not(_x3!891 >= 0),
                                    Not(_x2!890 >= 0),
                                    Not(_x5!889 >= 0),
                                    Not(_x4!888 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array9(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        1 + _k3,
                                        _k4) ==
                                    d4array5(A,
                                        _x2!890,
                                        _x3!891,
                                        _x4!888,
                                        _x5!889,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                            Not(_x3!891 >= 0),
                            Not(_x2!890 >= 0),
                            Not(_x5!889 >= 0),
                            Not(_x4!888 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array9(A,
                                     _x2!890,
                                     _x3!891,
                                     _x4!888,
                                     _x5!889,
                                     1 + _k3,
                                     _k4) ==
                            d4array5(A,
                                     _x2!890,
                                     _x3!891,
                                     _x4!888,
                                     _x5!889,
                                     _N2(_k3, _k4),
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:06:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(C, _k4, _k3 - 1, _k2, _n1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(C, _k4, _k3 - 1, _k2, _n1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(C, _k4, _k3 - 1, _k2, _n1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(C, _k4, _k3 - 1, _k2, _n1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(C, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-15 01:08:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array9(C, _k4, 0, _k2, _n1, 1, _k4) == d4array5(A, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0) - d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array9(C, _k4, 0, _k2, _n1, 1, _k4) == d4array5(A, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0) - d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array9(C, _k4, 0, _k2, _n1, 1, _k4) == d4array5(A, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0) - d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array9(C, _k4, 0, _k2, _n1, 1, _k4) == d4array5(A, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0) - d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4)),
                            d4array5(C,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0, _k4),
                                     0,
                                     _k4) +
                            -1*
                            d4array9(C,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     1,
                                     _k4) >=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)))),
                                      trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4)),
                                        (d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)) ==
                                        (d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4))),
                                        Or(Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)) ==
                                        Or(False,
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        False,
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4))),
                                        rewrite(Or(False,
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        False,
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        0,
                                        Not(d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) <=
                                        0),
                                        Not(d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0) -
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) -
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0)),
                                        (d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) -
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0)) ==
                                        (d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0))),
                                        Implies(Var(0) >= 0,
                                        d4array9(C,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0) -
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
..., unit-resolution(th-lemma(Or(Not(d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) +
                                d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                -1*
                                d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) ==
                                0),
                            d4array5(C,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0, _k4),
                                     0,
                                     _k4) +
                            d4array5(B,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0, _k4),
                                     _k2,
                                     0) +
                            -1*
                            d4array5(A,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0, _k4),
                                     _k2,
                                     0) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d4array5(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n2,
                                        _n3) +
                                        d4array5(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) +
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0)),
                                        (d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        _k2,
                                        0) +
                                        d4array5(C,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:08:46
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(A, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1) - d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(A, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3) - d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(A, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1) - d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(A, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3) - d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(A, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1) - d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(A, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3) - d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(C, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(A, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1) - d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(C, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(A, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3) - d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) ==
                                d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4)),
                            d4array5(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N2(_k3, _k4),
                                     _k3,
                                     _k4) +
                            -1*
                            d4array9(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     1 + _k3,
                                     _k4) >=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                                      trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
..., unit-resolution(unit-resolution(th-lemma(Or(d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        0,
                                        Not(d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) <=
                                        0),
                                        Not(d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d4array9(C,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _N2(_k3 - 1, _k4),
                                        _k2,
                                        _k3 - 1) -
                                        d4array5(B,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _N2(_k3 - 1, _k4),
                                        _k2,
                                        _k3 - 1),
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) -
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(...*
                                        ... ==
                                        -1),
                                        _k3 + ...*... ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d4array9(C,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        d4array9(C,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4)),
                                        trans(monotonicity(monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k3 - 1 == -1 + _k3),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N2(... - ..., _k4) ==
                                        _N2(... + ..., _k4)),
                                        trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k3 - 1 == -1 + _k3),
                                        d4array5(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(... - ..., _k4),
                                        _k2,
                                        _k3 - 1) ==
                                        d4array5(A,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(... + ..., _k4),
                                        _k2,
                                        -1 + _k3)),
                                        monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
..., unit-resolution(th-lemma(Or(Not(d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) +
                                -1*
                                d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) ==
                                0),
                            d4array5(B,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N2(_k3, _k4),
                                     _k2,
                                     _k3) +
                            d4array5(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N2(_k3, _k4),
                                     _k3,
                                     _k4) +
                            -1*
                            d4array5(A,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N2(_k3, _k4),
                                     _k2,
                                     _k3) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d4array5(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n2,
                                        _n3) +
                                        d4array5(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3)),
                                        (d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
                                        d4array5(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3) +
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2)))

***********************
2017-05-15 01:09:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(C, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(B,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!917 >= 0),
                                        Not(_x2!916 >= 0),
                                        Not(_x5!915 >= 0),
                                        Not(_x4!914 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!917 >= 0),
                                       Not(_x2!916 >= 0),
                                       Not(_x5!915 >= 0),
                                       Not(_x4!914 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array9(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        1 + _k3,
                                        _k4) ==
                                       d4array5(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Not(_x3!917 >= 0),
                                    Not(_x2!916 >= 0),
                                    Not(_x5!915 >= 0),
                                    Not(_x4!914 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array9(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        1 + _k3,
                                        _k4) ==
                                    d4array5(B,
                                        _x2!916,
                                        _x3!917,
                                        _x4!914,
                                        _x5!915,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                            Not(_x3!917 >= 0),
                            Not(_x2!916 >= 0),
                            Not(_x5!915 >= 0),
                            Not(_x4!914 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array9(B,
                                     _x2!916,
                                     _x3!917,
                                     _x4!914,
                                     _x5!915,
                                     1 + _k3,
                                     _k4) ==
                            d4array5(B,
                                     _x2!916,
                                     _x3!917,
                                     _x4!914,
                                     _x5!915,
                                     _N2(_k3, _k4),
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:09:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(A, _x2, _x3, _x4, _x5, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array14(A, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(A, _x2, _x3, _x4, _x5, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array14(A, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(A, _x2, _x3, _x4, _x5, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array14(A, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(A, _x2, _x3, _x4, _x5, _k4)==d4array(A, _x2, _x3, _x4, _x5)),(d4array14(A, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4 + 1) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!921 >= 0),
                                        Not(_x2!920 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!919 >= 0),
                                        Not(_x4!918 >= 0),
                                        d4array14(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!921 >= 0),
                                       Not(_x2!920 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!919 >= 0),
                                       Not(_x4!918 >= 0),
                                       d4array14(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        1 + _k4) ==
                                       d4array9(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!921 >= 0),
                                    Not(_x2!920 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!919 >= 0),
                                    Not(_x4!918 >= 0),
                                    d4array14(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        1 + _k4) ==
                                    d4array9(A,
                                        _x2!920,
                                        _x3!921,
                                        _x4!918,
                                        _x5!919,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!921 >= 0),
                            Not(_x2!920 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!919 >= 0),
                            Not(_x4!918 >= 0),
                            d4array14(A,
                                      _x2!920,
                                      _x3!921,
                                      _x4!918,
                                      _x5!919,
                                      1 + _k4) ==
                            d4array9(A,
                                     _x2!920,
                                     _x3!921,
                                     _x4!918,
                                     _x5!919,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4 + 1) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:09:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(C, _k4 - 1, _k3, _k2, _n1)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(C, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(C, _k4 - 1, _k3, _k2, _n1)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(C, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(C, _k4 - 1, _k3, _k2, _n1)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(C, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(C, _k4 - 1, _k3, _k2, _n1)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(C, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-15 01:11:31
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array14(C, 0, _k3, _k2, _n1, 1) == d4array9(A, 0, _k3, _k2, _n1, _N3(0), _k2) - d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array14(C, 0, _k3, _k2, _n1, 1) == d4array9(A, 0, _k3, _k2, _n1, _N3(0), _k2) - d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array14(C, 0, _k3, _k2, _n1, 1) == d4array9(A, 0, _k3, _k2, _n1, _N3(0), _k2) - d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array14(C, 0, _k3, _k2, _n1, 1) == d4array9(A, 0, _k3, _k2, _n1, _N3(0), _k2) - d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                -1*
                                d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                -1*
                                d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0) ==
                                0),
                            d4array9(A,
                                     0,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(0),
                                     _k2) +
                            -1*
                            d4array9(B,
                                     0,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(0),
                                     _k2) +
                            -1*
                            d4array9(C,
                                     0,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(0),
                                     0) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array9(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n2) +
                                        -1*
                                        d4array9(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n2) +
                                        d4array9(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0) ==
                                        -1*
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)),
                                        (d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0) ==
                                        0) ==
                                        (-1*
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) ==
                                        0,
                                        Not(d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) <=
                                        0),
                                        Not(d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        _k2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2) -
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) -
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2)),
                                        (d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) -
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2)) ==
                                        (d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2))),
                                        Implies(Var(0) >= 0,
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) -
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2)) ==
                                        Implies(Var(0) >= 0,
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2) +
                                        -1*
                                        d4array9(B,
                                        0,
                                        _k3,
..., unit-resolution(th-lemma(Or(Not(d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)),
                            d4array14(C,
                                      0,
                                      _k3,
                                      _k2,
                                      _n1!2,
                                      1) +
                            -1*
                            d4array9(C,
                                     0,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(0),
                                     0) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1)),
                                        (d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        (d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        Or(Not(_k3 >= 0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        rewrite(Or(Not(_k3 >=
                                        0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(C,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:11:45
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(A, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2) - d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(A, _k4, _k3, _k2, _n1, _N3(_k4), _k2) - d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(A, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2) - d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(A, _k4, _k3, _k2, _n1, _N3(_k4), _k2) - d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(A, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2) - d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(A, _k4, _k3, _k2, _n1, _N3(_k4), _k2) - d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(C, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(A, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2) - d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(C, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(A, _k4, _k3, _k2, _n1, _N3(_k4), _k2) - d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) ==
                                d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4)),
                            d4array9(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(_k4),
                                     _k4) +
                            -1*
                            d4array14(C,
                                      _k4,
                                      _k3,
                                      _k2,
                                      _n1!2,
                                      1 + _k4) >=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)))),
                                      trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        0,
                                        Not(d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) <=
                                        0),
                                        Not(d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d4array14(C,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k4) ==
                                        d4array9(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4 - 1),
                                        _k2) -
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4 - 1),
                                        _k2),
                                        d4array14(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k4 + 1) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4),
                                        _k2) -
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4),
                                        _k2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k4 -
                                        1 ==
                                        _k4 + -1*1),
                                        trans(monotonicity(rewrite(...*
                                        ... ==
                                        -1),
                                        _k4 + ...*... ==
                                        _k4 + -1),
                                        rewrite(_k4 + -1 ==
                                        -1 + _k4),
                                        _k4 + -1*1 ==
                                        -1 + _k4),
                                        _k4 - 1 == -1 + _k4),
                                        d4array14(C,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array14(C,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4)),
                                        trans(monotonicity(monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k4 - 1 == -1 + _k4),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N3(... - ...) ==
                                        _N3(... + ...)),
                                        d4array9(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(... - ...),
                                        _k2) ==
                                        d4array9(A,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(... + ...),
                                        _k2)),
                                        monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k4 - 1 == -1 + _k4),
                                        monotonicity(trans(rewrite(... ==
                                        ...),
                                        trans(monotonicity(...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        ... - ... ==
                                        ... + ...),
                                        _N3(... - ...) ==
                                        _N3(... + ...)),
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(... - ...),
                                        _k2) ==
                                        d4array9(B,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(... + ...),
                                        _k2)),
                                        d4array9(A,
..., unit-resolution(th-lemma(Or(Not(d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) +
                                d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                -1*
                                d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) ==
                                0),
                            d4array9(C,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(_k4),
                                     _k4) +
                            d4array9(B,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(_k4),
                                     _k2) +
                            -1*
                            d4array9(A,
                                     _k4,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(_k4),
                                     _k2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array9(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n2) +
                                        -1*
                                        d4array9(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n2) +
                                        d4array9(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) ==
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) +
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2)),
                                        (d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) ==
                                        0) ==
                                        (d4array9(C,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4) +
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k2) ==
                                        0)),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(B,
                                        _k4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-15 01:12:00
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(C, _x2, _x3, _x4, _x5, _k4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4 + 1) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!945 >= 0),
                                        Not(_x2!944 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!943 >= 0),
                                        Not(_x4!942 >= 0),
                                        d4array14(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        1 + _k4) ==
                                        d4array9(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!945 >= 0),
                                       Not(_x2!944 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!943 >= 0),
                                       Not(_x4!942 >= 0),
                                       d4array14(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        1 + _k4) ==
                                       d4array9(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!945 >= 0),
                                    Not(_x2!944 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!943 >= 0),
                                    Not(_x4!942 >= 0),
                                    d4array14(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        1 + _k4) ==
                                    d4array9(B,
                                        _x2!944,
                                        _x3!945,
                                        _x4!942,
                                        _x5!943,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!945 >= 0),
                            Not(_x2!944 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!943 >= 0),
                            Not(_x4!942 >= 0),
                            d4array14(B,
                                      _x2!944,
                                      _x3!945,
                                      _x4!942,
                                      _x5!943,
                                      1 + _k4) ==
                            d4array9(B,
                                     _x2!944,
                                     _x3!945,
                                     _x4!942,
                                     _x5!943,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4 + 1) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:12:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                        d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                       d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                    d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))),
                         Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array28(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0) ==
                            d4array14(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _N4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:12:21
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, 0) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, 0) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, 0) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, 0) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                0),
                            d4array14(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            d4array14(B,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array14(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) ==
                                        0))),
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)),
                                        (d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0) ==
                                        (d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0)),
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0) ==
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(C,
                                        _n4!11,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0,
                                        Not(d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) <=
                                        0),
                                        Not(d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array28(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array28(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
..., unit-resolution(th-lemma(Or(Not(d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)),
                            d4array28(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0) +
                            -1*
                            d4array14(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                      Not(_n3!9 >= 0),
                                      Not(_n4!11 >= 0),
                                      Not(_n1!10 >= 0),
                                      Not(_n2!8 >= 0),
                                      d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                      d4array14(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:12:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                        d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                       d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                    d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))),
                         Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array28(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0) ==
                            d4array14(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _N4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:12:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, 0, _k8) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, 0, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, 0, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, 0, _k8) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                        d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                       d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                    d4array28(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array23(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k8) ==
                            d4array28(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:12:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(C, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(C, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(C, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(C, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8)),
                            d4array23(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0,
                                      _k8) +
                            -1*
                            d4array28(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                      Not(_n3!9 >= 0),
                                      Not(_n4!11 >= 0),
                                      Not(_k8 >= 0),
                                      Not(_n1!10 >= 0),
                                      Not(_n2!8 >= 0),
                                      d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                      d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0,
                                        Not(d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) <=
                                        0),
                                        Not(d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array23(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array23(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8) ==
                                0),
                            d4array14(B,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            d4array28(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(rewrite(Or(Not(_n3!9 >=
                                        0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array28(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8) ==
                                        0)),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:13:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                        d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                       d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                    d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array23(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k8) ==
                            d4array28(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:13:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                       d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                    d4array23(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array19(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k7,
                                      _k8) ==
                            d4array23(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:13:33
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(C, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(C, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(C, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(C, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8) ==
                                d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8)),
                            d4array23(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array19(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0,
                                      _k7,
                                      _k8) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                        0,
                                        Not(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) <=
                                        0),
                                        Not(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array19(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array19(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(C,
                                        Var(3),
                                        Var(1),
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8) ==
                                0),
                            d4array14(B,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            d4array23(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k7,
                                      _k8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(rewrite(Or(Not(_n3!9 >=
                                        0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array23(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8) ==
                                        0)),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7,
                                        _k8) ==
                                        0))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:13:50
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                       d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                    d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array19(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k7,
                                      _k8) ==
                            d4array23(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:13:59
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(A, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(A, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(A, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(A, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                       d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                    d4array19(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:14:04
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(A, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array16(A, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(A, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array16(A, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(A, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array16(A, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(A, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array16(A, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array16(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:14:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(C, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(C, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(C, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(C, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8)),
                            d4array19(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array16(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0,
                                      _k6,
                                      _k7,
                                      _k8) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0,
                                        Not(d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) <=
                                        0),
                                        Not(d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
..., unit-resolution(th-lemma(Or(Not(d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) +
                                d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                0),
                            d4array19(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k6,
                                      _k7,
                                      _k8) +
                            d4array14(B,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(monotonicity(rewrite(d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)),
                                        (d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (d4array19(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0)),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:30:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(C, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(C, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(C, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(C, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(C, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(C, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(C, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(C, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                            d4array16(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      1 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array16(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      2 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                                      trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        -1*
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0,
                                        Not(d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        -1*
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) <=
                                        0),
                                        Not(d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        -1*
                                        d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        -1*
                                        d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
..., unit-resolution(th-lemma(Or(Not(d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                -1*
                                d4array16(C,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                -1*
                                d4array14(B,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                0),
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array16(C,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      1 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array14(B,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) <=
                            0)),
                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array16(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array16(C,
                                        Var(3),
                                        Var(1),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-15 01:30:56
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                       d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                    d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 01:31:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:31:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array19(A, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array19(A, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array19(A, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array19(A, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8)),
                                        (d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array19(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array19(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!991 >= 0),
                                        Not(_x2!990 >= 0),
                                        Not(_x5!989 >= 0),
                                        Not(_x4!988 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!991 >= 0),
                                       Not(_x2!990 >= 0),
                                       Not(_x5!989 >= 0),
                                       Not(_x4!988 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                       d4array16(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!991 >= 0),
                                    Not(_x2!990 >= 0),
                                    Not(_x5!989 >= 0),
                                    Not(_x4!988 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                    d4array16(A,
                                        _x2!990,
                                        _x3!991,
                                        _x4!988,
                                        _x5!989,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!991 >= 0),
                            Not(_x2!990 >= 0),
                            Not(_x5!989 >= 0),
                            Not(_x4!988 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:31:19
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(C, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(C, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(C, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(C, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(C, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(C, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(C, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(C, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)),
                            d4array19(C,
                                      _n4!1003,
                                      _n3!1001,
                                      _n2!1000,
                                      _n1!1002,
                                      1 + _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array16(C,
                                      _n4!1003,
                                      _n3!1001,
                                      _n2!1000,
                                      _n1!1002,
                                      _N5(_k6, _k7, _k8),
                                      _k6,
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!1001 >= 0),
                                        Not(_n4!1003 >= 0),
                                        Not(_n1!1002 >= 0),
                                        Not(_n2!1000 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!1001 >= 0),
                                        Not(_n4!1003 >= 0),
                                        Not(_n1!1002 >= 0),
                                        Not(_n2!1000 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Not(_n3!1001 >= 0),
                                        Not(_n4!1003 >= 0),
                                        Not(_n1!1002 >= 0),
                                        Not(_n2!1000 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) ==
                                        0,
                                        Not(d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) <=
                                        0),
                                        Not(d4array19(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array19(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array19(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                0),
                            d4array14(B,
                                      _n4!1003,
                                      _n3!1001,
                                      _n2!1000,
                                      _n1!1002,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!1003,
                                      _n3!1001,
                                      _n2!1000,
                                      _n1!1002,
                                      _N4) +
                            d4array16(C,
                                      _n4!1003,
                                      _n3!1001,
                                      _n2!1000,
                                      _n1!1002,
                                      _N5(_k6, _k7, _k8),
                                      _k6,
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n6,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1003 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!1002 >= 0),
                                        Not(_n3!1001 >= 0),
                                        Not(_n2!1000 >= 0),
                                        Not(_k8 >= 0),
                                        d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n6,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array16(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1003 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!1002 >= 0),
                                        Not(_n3!1001 >= 0),
                                        Not(_n2!1000 >= 0),
                                        Not(_k8 >= 0),
                                        d4array14(B,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N4) +
                                        d4array16(C,
                                        _n4!1003,
                                        _n3!1001,
                                        _n2!1000,
                                        _n1!1002,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n7,
                                        _n6,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-15 01:31:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(C, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8)),
                                        (d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array19(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!1015 >= 0),
                                        Not(_x2!1014 >= 0),
                                        Not(_x5!1013 >= 0),
                                        Not(_x4!1012 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!1015 >= 0),
                                       Not(_x2!1014 >= 0),
                                       Not(_x5!1013 >= 0),
                                       Not(_x4!1012 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                       d4array16(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!1015 >= 0),
                                    Not(_x2!1014 >= 0),
                                    Not(_x5!1013 >= 0),
                                    Not(_x4!1012 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                    d4array16(B,
                                        _x2!1014,
                                        _x3!1015,
                                        _x4!1012,
                                        _x5!1013,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!1015 >= 0),
                            Not(_x2!1014 >= 0),
                            Not(_x5!1013 >= 0),
                            Not(_x4!1012 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:31:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array23(A, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array23(A, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array23(A, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array23(A, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8)),
                                        (d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array23(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(A,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!1029 >= 0),
                                        Not(_x2!1028 >= 0),
                                        Not(_x5!1027 >= 0),
                                        Not(_x4!1026 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!1029 >= 0),
                                       Not(_x2!1028 >= 0),
                                       Not(_x5!1027 >= 0),
                                       Not(_x4!1026 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array23(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        1 + _k7,
                                        _k8) ==
                                       d4array19(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Not(_x3!1029 >= 0),
                                    Not(_x2!1028 >= 0),
                                    Not(_x5!1027 >= 0),
                                    Not(_x4!1026 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array23(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        1 + _k7,
                                        _k8) ==
                                    d4array19(A,
                                        _x2!1028,
                                        _x3!1029,
                                        _x4!1026,
                                        _x5!1027,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                            Not(_x3!1029 >= 0),
                            Not(_x2!1028 >= 0),
                            Not(_x5!1027 >= 0),
                            Not(_x4!1026 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array23(A,
                                      _x2!1028,
                                      _x3!1029,
                                      _x4!1026,
                                      _x5!1027,
                                      1 + _k7,
                                      _k8) ==
                            d4array19(A,
                                      _x2!1028,
                                      _x3!1029,
                                      _x4!1026,
                                      _x5!1027,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:32:04
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(C, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(C, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(C, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(C, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(C, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(C, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(C, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(C, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) ==
                                d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)),
                            d4array23(C,
                                      _n4!1039,
                                      _n3!1037,
                                      _n2!1036,
                                      _n1!1038,
                                      1 + _k7,
                                      _k8) +
                            -1*
                            d4array19(C,
                                      _n4!1039,
                                      _n3!1037,
                                      _n2!1036,
                                      _n1!1038,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!1037 >= 0),
                                        Not(_n4!1039 >= 0),
                                        Not(_n1!1038 >= 0),
                                        Not(_n2!1036 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!1037 >= 0),
                                        Not(_n4!1039 >= 0),
                                        Not(_n1!1038 >= 0),
                                        Not(_n2!1036 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Not(_n3!1037 >= 0),
                                        Not(_n4!1039 >= 0),
                                        Not(_n1!1038 >= 0),
                                        Not(_n2!1036 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) ==
                                        0,
                                        Not(d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) <=
                                        0),
                                        Not(d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        d4array23(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        1 + _k7,
                                        _k8) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7 + 1,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array23(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array23(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                0),
                            d4array14(B,
                                      _n4!1039,
                                      _n3!1037,
                                      _n2!1036,
                                      _n1!1038,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!1039,
                                      _n3!1037,
                                      _n2!1036,
                                      _n1!1038,
                                      _N4) +
                            d4array19(C,
                                      _n4!1039,
                                      _n3!1037,
                                      _n2!1036,
                                      _n1!1038,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1039 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_n1!1038 >= 0),
                                        Not(_n3!1037 >= 0),
                                        Not(_n2!1036 >= 0),
                                        Not(_k8 >= 0),
                                        d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1039 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_n1!1038 >= 0),
                                        Not(_n3!1037 >= 0),
                                        Not(_n2!1036 >= 0),
                                        Not(_k8 >= 0),
                                        d4array14(B,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N4) +
                                        d4array19(C,
                                        _n4!1039,
                                        _n3!1037,
                                        _n2!1036,
                                        _n1!1038,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n7,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array19(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6(_n7, _n8),
                                        _n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-15 01:32:25
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(C, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8)),
                                        (d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(B,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!1049 >= 0),
                                        Not(_x2!1048 >= 0),
                                        Not(_x5!1047 >= 0),
                                        Not(_x4!1046 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!1049 >= 0),
                                       Not(_x2!1048 >= 0),
                                       Not(_x5!1047 >= 0),
                                       Not(_x4!1046 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array23(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        1 + _k7,
                                        _k8) ==
                                       d4array19(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Not(_x3!1049 >= 0),
                                    Not(_x2!1048 >= 0),
                                    Not(_x5!1047 >= 0),
                                    Not(_x4!1046 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array23(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        1 + _k7,
                                        _k8) ==
                                    d4array19(B,
                                        _x2!1048,
                                        _x3!1049,
                                        _x4!1046,
                                        _x5!1047,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                            Not(_x3!1049 >= 0),
                            Not(_x2!1048 >= 0),
                            Not(_x5!1047 >= 0),
                            Not(_x4!1046 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array23(B,
                                      _x2!1048,
                                      _x3!1049,
                                      _x4!1046,
                                      _x5!1047,
                                      1 + _k7,
                                      _k8) ==
                            d4array19(B,
                                      _x2!1048,
                                      _x3!1049,
                                      _x4!1046,
                                      _x5!1047,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:32:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(A, _x2, _x3, _x4, _x5, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array28(A, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(A, _x2, _x3, _x4, _x5, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array28(A, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(A, _x2, _x3, _x4, _x5, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array28(A, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(A, _x2, _x3, _x4, _x5, _k8)==d4array(A, _x2, _x3, _x4, _x5)),(d4array28(A, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(A, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8 + 1) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8)),
                                        (d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                       Or(Not(_x3!1061 >= 0),
                                        Not(_x2!1060 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!1059 >= 0),
                                        Not(_x4!1058 >= 0),
                                        d4array28(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        _N7(_k8),
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Or(Not(_x3!1061 >= 0),
                                       Not(_x2!1060 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!1059 >= 0),
                                       Not(_x4!1058 >= 0),
                                       d4array28(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        1 + _k8) ==
                                       d4array23(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        _N7(_k8),
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Not(_x3!1061 >= 0),
                                    Not(_x2!1060 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!1059 >= 0),
                                    Not(_x4!1058 >= 0),
                                    d4array28(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        1 + _k8) ==
                                    d4array23(A,
                                        _x2!1060,
                                        _x3!1061,
                                        _x4!1058,
                                        _x5!1059,
                                        _N7(_k8),
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                            Not(_x3!1061 >= 0),
                            Not(_x2!1060 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!1059 >= 0),
                            Not(_x4!1058 >= 0),
                            d4array28(A,
                                      _x2!1060,
                                      _x3!1061,
                                      _x4!1058,
                                      _x5!1059,
                                      1 + _k8) ==
                            d4array23(A,
                                      _x2!1060,
                                      _x3!1061,
                                      _x4!1058,
                                      _x5!1059,
                                      _N7(_k8),
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8 + 1) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _N8) == d4array(A, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:32:52
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(C, _n4, _n3, _n2, _n1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(C, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(C, _n4, _n3, _n2, _n1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(C, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(C, _n4, _n3, _n2, _n1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(C, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _N8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(C, _n4, _n3, _n2, _n1, _k8)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(C, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8)),
                            d4array28(C,
                                      _n4!1069,
                                      _n3!1067,
                                      _n2!1066,
                                      _n1!1068,
                                      1 + _k8) +
                            -1*
                            d4array23(C,
                                      _n4!1069,
                                      _n3!1067,
                                      _n2!1066,
                                      _n1!1068,
                                      _N7(_k8),
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Or(Not(_n3!1067 >= 0),
                                        Not(_n4!1069 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                        d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Or(Not(_n3!1067 >= 0),
                                        Not(_n4!1069 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                        d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Not(_n3!1067 >= 0),
                                        Not(_n4!1069 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                        d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(C,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                      Not(_n3!1067 >= 0),
                                      Not(_n4!1069 >= 0),
                                      Not(_k8 >= 0),
                                      Not(_n1!1068 >= 0),
                                      Not(_n2!1066 >= 0),
                                      d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                      d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
..., unit-resolution(unit-resolution(th-lemma(Or(d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) ==
                                        0,
                                        Not(d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) <=
                                        0),
                                        Not(d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        d4array28(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        1 + _k8) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8 + 1) ==
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) -
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(rewrite(d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        (d4array28(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) -
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array28(C,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4) +
                                        -1*
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8) ==
                                0),
                            d4array14(B,
                                      _n4!1069,
                                      _n3!1067,
                                      _n2!1066,
                                      _n1!1068,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n4!1069,
                                      _n3!1067,
                                      _n2!1066,
                                      _n1!1068,
                                      _N4) +
                            d4array23(C,
                                      _n4!1069,
                                      _n3!1067,
                                      _n2!1066,
                                      _n1!1068,
                                      _N7(_k8),
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n8,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N7(_n8),
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1069 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!1067 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n8,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N7(_n8),
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!1069 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!1067 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        d4array23(C,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N7(_k8),
                                        _k8) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n8,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array23(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N7(_n8),
                                        _n8) ==
                                        0))),
                                        Not(_n4!1069 >= 0),
                                        Not(_n1!1068 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!1067 >= 0),
                                        Not(_n2!1066 >= 0),
                                        d4array14(B,
                                        _n4!1069,
                                        _n3!1067,
                                        _n2!1066,
                                        _n1!1068,
                                        _N4) +
                                        -1*
                                        d4array14(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, _N8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-15 01:33:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _N8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, _N8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(C, _x2, _x3, _x4, _x5, _k8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8 + 1) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8)),
                                        (d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                       Or(Not(_x3!1077 >= 0),
                                        Not(_x2!1076 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!1075 >= 0),
                                        Not(_x4!1074 >= 0),
                                        d4array28(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        1 + _k8) ==
                                        d4array23(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        _N7(_k8),
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Or(Not(_x3!1077 >= 0),
                                       Not(_x2!1076 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!1075 >= 0),
                                       Not(_x4!1074 >= 0),
                                       d4array28(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        1 + _k8) ==
                                       d4array23(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        _N7(_k8),
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Not(_x3!1077 >= 0),
                                    Not(_x2!1076 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!1075 >= 0),
                                    Not(_x4!1074 >= 0),
                                    d4array28(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        1 + _k8) ==
                                    d4array23(B,
                                        _x2!1076,
                                        _x3!1077,
                                        _x4!1074,
                                        _x5!1075,
                                        _N7(_k8),
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                            Not(_x3!1077 >= 0),
                            Not(_x2!1076 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!1075 >= 0),
                            Not(_x4!1074 >= 0),
                            d4array28(B,
                                      _x2!1076,
                                      _x3!1077,
                                      _x4!1074,
                                      _x5!1075,
                                      1 + _k8) ==
                            d4array23(B,
                                      _x2!1076,
                                      _x3!1077,
                                      _x4!1074,
                                      _x5!1075,
                                      _N7(_k8),
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8 + 1) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _N8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-15 01:33:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(C, _n8, _n7, _n6, _n5, _N8)==d4array28(A, _n8, _n7, _n6, _n5, _N8) - d4array28(B, _n8, _n7, _n6, _n5, _N8))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(C, _n8, _n7, _n6, _n5, _N8)==d4array28(A, _n8, _n7, _n6, _n5, _N8) - d4array28(B, _n8, _n7, _n6, _n5, _N8))))

System try to prove 
ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(C, _n8, _n7, _n6, _n5, _N8)==d4array28(A, _n8, _n7, _n6, _n5, _N8) - d4array28(B, _n8, _n7, _n6, _n5, _N8))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
k23=Function('k23',IntSort(),IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Const('C',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
_x3=Int('_x3')
B1=Const('B1',arraySort)
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(C, _x2, _x3, _x4, _x5) == d4array28(C, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(A, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(C, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= q)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < q)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(C, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(C, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= p)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < p)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(C, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(C, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(C, _x2, _x3, _x4, _x5, 0) == d4array(C, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(C, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(C, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= q)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < q)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < q))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(C, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(C, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= p)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < p)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < p))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(C, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(C, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(C, _x2, _x3, _x4, _x5, 0) == d4array14(C, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= m)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < m)))
_s.add(Or(_N8==0,_N8 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(C, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(C, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(C, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(C, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(C, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(C, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(C, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) - d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(C, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3) - d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(C, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n2) - d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _N4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(C, _n4, _n3, _n2, _n1, _N4) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(C, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(C, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(C, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(C, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(C, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(C, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(C, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(C, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(C, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, _N8) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(C, _n4, _n3, _n2, _n1, _N8) == d4array14(A, _n4, _n3, _n2, _n1, _N4) - d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _N8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_n2 ,_n3 ,_n4],_N1(_n2, _n3, _n4)>=0))
_s.add(ForAll([_n3 ,_n4],_N2(_n3, _n4)>=0))
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(ForAll([_n6 ,_n7 ,_n8],_N5(_n6, _n7, _n8)>=0))
_s.add(ForAll([_n7 ,_n8],_N6(_n7, _n8)>=0))
_s.add(ForAll([_n8],_N7(_n8)>=0))
_s.add(_N8>=0)
_s.add(Not(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(C, _n8, _n7, _n6, _n5, _N8)==d4array28(A, _n8, _n7, _n6, _n5, _N8) - d4array28(B, _n8, _n7, _n6, _n5, _N8))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-4-n-u/diff-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-4-n-u/diff-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11) ==
                                d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4)),
                            d4array(B,
                                    _n8!8,
                                    _n7!10,
                                    _n6!9,
                                    _n5!11) +
                            -1*
                            d4array14(B,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N4) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11)))),
                                      rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                      Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                   mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
..., unit-resolution(th-lemma(Or(Not(d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11) ==
                                d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8)),
                            d4array(B,
                                    _n8!8,
                                    _n7!10,
                                    _n6!9,
                                    _n5!11) +
                            -1*
                            d4array28(B,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N8) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
..., unit-resolution(th-lemma(Or(Not(d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                -1*
                                d4array14(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                0),
                            d4array14(B,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N4) +
                            -1*
                            d4array14(A,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N4) +
                            d4array28(C,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        0))),
                                        Or(Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        0))),
                                        Or(Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        d4array28(C,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        0))),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        -1*
                                        d4array14(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0)),
                                   Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
..., unit-resolution(unit-resolution(th-lemma(Or(d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0,
                                        Not(d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) <=
                                        0),
                                        Not(d4array28(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) +
                                        d4array28(C,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(C,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) -
                                        d4array28(B,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(rewrite(d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) -
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) +
                                        -1*
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8)),
                                        (d4array28(C,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) -
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8)) ==
                                        (d4array28(C,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) +
                                        -1*
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(C,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) -
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
..., unit-resolution(th-lemma(Or(Not(d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                d4array14(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4)),
                            d4array28(A,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N8) +
                            -1*
                            d4array14(A,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N4) >=
                            0)),
                trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Or(Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        Not(_n7!10 >= 0),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11))),
                                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N8) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved
