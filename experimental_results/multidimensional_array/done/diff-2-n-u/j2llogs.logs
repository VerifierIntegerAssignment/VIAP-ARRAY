
***********************
2017-05-14 22:56:01
***********************

Command--Translate 

Parameters--
 File Name--multi/copy-partial-4-n-u/copy-partial-4-n-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l2(_n1 + 1)=l2(_n1) + 1,l2(0)=l
 Closed Form Solution
_n1 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k5(_n2 + 1)=k5(_n2) + 1,k5(0)=k
 Closed Form Solution
_n2 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j9(_n3 + 1)=j9(_n3) + 1,j9(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i14(_n4 + 1)=i14(_n4) + 1,i14(0)=i
 Closed Form Solution
_n4 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l16(_n5 + 1)=l16(_n5) + 1,l16(0)=l
 Closed Form Solution
_n5 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k19(_n6 + 1)=k19(_n6) + 1,k19(0)=k
 Closed Form Solution
_n6 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j23(_n7 + 1)=j23(_n7) + 1,j23(0)=j
 Closed Form Solution
_n7 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i28(_n8 + 1)=i28(_n8) + 1,i28(0)=i
 Closed Form Solution
_n8 + i

***********************
2017-05-14 22:56:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(A,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(A, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(A,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(A,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(A,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(A,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(A,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(A, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(A, _x2, _x3, _x4, _x5, 0) ==
             d4array(A, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:56:18
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(B,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(B, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(B,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(B,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(B,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(B,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(B,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(B,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(B, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(B, _x2, _x3, _x4, _x5, 0) ==
             d4array(B, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(B,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:56:24
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:56:34
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, 0, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:56:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:56:54
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(B,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:57:03
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)

System try to prove 
d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                 Or(Not(_k4 >= 0),
                    Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             1 + 0,
                             _k2,
                             _k3,
                             _k4) ==
                    d4array2(B,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             0,
                             _k2,
                             _k3,
                             _k4)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k4 >= 0),
                                        False,
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4))),
                            rewrite(Or(Not(_k4 >= 0),
                                       False,
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                    Or(Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4))),
                            Or(Not(_k4 >= 0),
                               Not(0 >= 0),
                               Not(_k3 >= 0),
..., mp(mp(mp~(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                             Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                     d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                     d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
             quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                               rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                       Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), asserted(Not(d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) ==
             d4array2(B, _k4, _k3, _k2, 0, 0, _k2, _k3, _k4))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:57:05
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

System try to prove 
Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                 Or(Not(_k4 >= 0),
                    Not(1 + _k1 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2,
                             _k3,
                             _k4) ==
                    d4array2(B,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + _k1,
                             _k2,
                             _k3,
                             _k4)))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                   Or(Not(_k4 >= 0),
                                      Not(1 + _k1 >= 0),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                      d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                   Or(Not(_k4 >= 0),
                                      Not(_k1 >= -1),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                      d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
                                       Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                       d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                         Or(Not(_k4 >= 0),
                            Not(1 + _k1 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d4array2(A,
                                     _k4,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + 1 + _k1,
                                     _k2,
                                     _k3,
                                     _k4) ==
                            d4array2(B,
                                     _k4,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + _k1,
                                     _k2,
                                     _k3,
                                     _k4))) ==
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
..., mp(mp(mp~(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                             Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                     d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                     d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
             quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                               rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                       Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), not-or-elim(mp(asserted(Not(Implies(d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                    d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4),
                                    d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                    d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4)))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Implies(d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3,
                                        _k4),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:57:08
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1, _k1, _k2, _k3, _k4)),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3, _k4)))

System try to prove 
Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == d4array2(B, _k4, _k3, _k2, _n1, _n1, _k2, _k3, _k4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                 Or(Not(_k4!11 >= 0),
                    Not(_n1!10 >= 0),
                    Not(_k3!9 >= 0),
                    Not(_k2!8 >= 0),
                    d4array2(A,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             1 + _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11) ==
                    d4array2(B,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11)))),
   rewrite(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                         Or(Not(_n4 >= 0),
                            Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d4array2(A,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3,
                                     _n4) ==
                            d4array2(B,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4)))),
              Or(Not(_k4!11 >= 0),
                 Not(_n1!10 >= 0),
                 Not(_k3!9 >= 0),
                 Not(_k2!8 >= 0),
                 d4array2(A,
                          _k4!11,
                          _k3!9,
                          _k2!8,
                          _n1!10,
                          1 + _n1!10,
                          _k2!8,
                          _k3!9,
                          _k4!11) ==
                 d4array2(B,
                          _k4!11,
                          _k3!9,
                          _k2!8,
                          _n1!10,
                          _n1!10,
                          _k2!8,
                          _k3!9,
                          _k4!11))) ==
           Or(Not(ForAll([_n4, _n1, _n3, _n2],
                         Or(Not(_n4 >= 0),
                            Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d4array2(A,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3,
                                     _n4) ==
                            d4array2(B,
                                     _n4,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3,
                                     _n4)))),
              Not(_k4!11 >= 0),
              Not(_n1!10 >= 0),
              Not(_k3!9 >= 0),
              Not(_k2!8 >= 0),
              d4array2(A,
                       _k4!11,
                       _k3!9,
                       _k2!8,
                       _n1!10,
                       1 + _n1!10,
                       _k2!8,
                       _k3!9,
                       _k4!11) ==
              d4array2(B,
                       _k4!11,
                       _k3!9,
                       _k2!8,
                       _n1!10,
                       _n1!10,
                       _k2!8,
                       _k3!9,
                       _k4!11))),
   Or(Not(ForAll([_n4, _n1, _n3, _n2],
                 Or(Not(_n4 >= 0),
                    Not(_n1 >= 0),
                    Not(_n3 >= 0),
                    Not(_n2 >= 0),
                    d4array2(A,
                             _n4,
                             _n3,
                             _n2,
                             _n1,
                             1 + _n1,
                             _n2,
                             _n3,
                             _n4) ==
                    d4array2(B,
                             _n4,
                             _n3,
                             _n2,
                             _n1,
                             _n1,
                             _n2,
                             _n3,
                             _n4)))),
      Not(_k4!11 >= 0),
      Not(_n1!10 >= 0),
      Not(_k3!9 >= 0),
      Not(_k2!8 >= 0),
      d4array2(A,
               _k4!11,
               _k3!9,
               _k2!8,
               _n1!10,
               1 + _n1!10,
               _k2!8,
               _k3!9,
               _k4!11) ==
      d4array2(B,
               _k4!11,
               _k3!9,
               _k2!8,
               _n1!10,
               _n1!10,
               _k2!8,
               _k3!9,
               _k4!11))), mp(mp(mp~(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                             Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                     d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                     d4array2(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
             quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)))),
                               rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                       Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4)))

***********************
2017-05-14 22:57:15
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array2(B, _x2, _x3, _x4, _x5, 0, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9)))),
                      rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                 Or(Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                    d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9))) ==
                              Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                 Not(_x3!11 >= 0),
                                 Not(_x2!10 >= 0),
                                 Not(_x5!9 >= 0),
                                 Not(_x4!8 >= 0),
                                 d4array5(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 d4array(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9))),
                      Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       Not(_x5 >= 0),
                                       Not(_x4 >= 0),
                                       d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                         Not(_x3!11 >= 0),
                         Not(_x2!10 >= 0),
                         Not(_x5!9 >= 0),
                         Not(_x4!8 >= 0),
                         d4array5(B,
                                  _x2!10,
                                  _x3!11,
                                  _x4!8,
                                  _x5!9,
                                  _k2,
                                  _k3,
                                  _k4) ==
                         d4array(B,
                                 _x2!10,
                                 _x3!11,
                                 _x4!8,
                                 _x5!9))),
                   mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))),
                                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:57:20
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array2(B, _x2, _x3, _x4, _x5, _k1 + 1, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array2(B, _x2, _x3, _x4, _x5, _k1 + 2, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array2(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n1,
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        (d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n1,
                                        _n2,
                                        _n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 22:57:25
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 22:59:33
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == d4array2(B, _k4, _k3, 0, _n1, _N1(0, _k3, _k4), 0, _k3, _k4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(Var(0) >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                 d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3,
                                        _k4) ==
                                   d4array2(B,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d4array5(A,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     1,
                                     _k3,
                                     _k4) ==
                            d4array2(B,
                                     _k4,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3, _k4),
                                     0,
                                     _k3,
                                     _k4))))),
                Not(Or(Not(_n1!2 >= 0),
                       d4array5(A,
                                _k4,
                                _k3,
                                0,
                                _n1!2,
                                1,
                                _k3,
                                _k4) ==
                       d4array2(B,
                                _k4,
                                _k3,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4)),
                                        (d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        (d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        False,
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4))),
                                        rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        False,
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3, _k4),
                                        0,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 22:59:41
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array2(B, _k4, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3, _k4), _k2 - 1, _k3, _k4)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array2(B, _k4, _k3, _k2, _n1, _N1(_k2, _k3, _k4), _k2, _k3, _k4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4),
                                        _k2 - 1,
                                        _k3,
                                        _k4),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4)),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4) ==
                                        _N1(-1 + _k2,
                                        _k3,
                                        _k4)),
                                        trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4),
                                        _k2 - 1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2,
                                        _k3,
                                        _k4),
                                        -1 + _k2,
                                        _k3,
                                        _k4)),
                                        (d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1,
                                        _k3,
                                        _k4),
                                        _k2 - 1,
                                        _k3,
                                        _k4)) ==
                                        (d4array5(A,
                                        _k4,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _k4,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2,
                                        _k3,
                                        _k4),
                                        -1 + _k2,
                                        _k3,
                                        _k4))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3,
                                        _k4)),
                                        (d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3)))

***********************
2017-05-14 22:59:51
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array5(B, _x2, _x3, _x4, _x5, _k2, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array5(B, _x2, _x3, _x4, _x5, _k2 + 1, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4)),
                                        (d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2 + 1,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array5(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!651 >= 0),
                                        Not(_x2!650 >= 0),
                                        Not(_x5!649 >= 0),
                                        Not(_x4!648 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d4array5(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!651 >= 0),
                                       Not(_x2!650 >= 0),
                                       Not(_x5!649 >= 0),
                                       Not(_x4!648 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d4array5(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                       d4array2(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!651 >= 0),
                                    Not(_x2!650 >= 0),
                                    Not(_x5!649 >= 0),
                                    Not(_x4!648 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    d4array5(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        1 + _k2,
                                        _k3,
                                        _k4) ==
                                    d4array2(B,
                                        _x2!650,
                                        _x3!651,
                                        _x4!648,
                                        _x5!649,
                                        _N1(_k2, _k3, _k4),
                                        _k2,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3,
                                        _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n2,
                                        _n3,
                                        _n4) ==
                                        d4array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N1(_n2, _n3, _n4),
                                        _n2,
                                        _n3,
                                        _n4)))),
                            Not(_x3!651 >= 0),
                            Not(_x2!650 >= 0),
                            Not(_x5!649 >= 0),
                            Not(_x4!648 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:00:01
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 23:02:10
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == d4array5(B, _k4, 0, _k2, _n1, _N2(0, _k4), _k2, 0)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0, _k4),
                                        _k2,
                                        0))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                 d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                   d4array5(B,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0, _k4),
                                        _k2,
                                        0)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d4array9(A,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     1,
                                     _k4) ==
                            d4array5(B,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0, _k4),
                                     _k2,
                                     0))))),
                Not(Or(Not(_n1!2 >= 0),
                       d4array9(A,
                                _k4,
                                0,
                                _k2,
                                _n1!2,
                                1,
                                _k4) ==
                       d4array5(B,
                                _k4,
                                0,
                                _k2,
                                _n1!2,
                                _N2(0, _k4),
                                _k2,
                                0)))),
            Not(d4array9(A, _k4, 0, _k2, _n1!2, 1, _k4) ==
                d4array5(B,
                         _k4,
                         0,
                         _k2,
                         _n1!2,
                         _N2(0, _k4),
                         _k2,
                         0))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                       Or(Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4)),
                                        (d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)) ==
                                        (d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4))),
                                        Or(Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)) ==
                                        Or(False,
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        False,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4))),
                                        rewrite(Or(False,
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        False,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4)) ==
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0, _k4),
                                        0,
                                        _k4))),
                                        Or(Not(0 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(0 >= 0),
                                        d4array9(A,
                                        _k4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:02:19
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array5(B, _k4, _k3 - 1, _k2, _n1, _N2(_k3 - 1, _k4), _k2, _k3 - 1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array5(B, _k4, _k3, _k2, _n1, _N2(_k3, _k4), _k2, _k3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _N2(_k3 - 1, _k4),
                                        _k2,
                                        _k3 - 1),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        d4array9(A,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4)),
                                        monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        _N2(_k3 - 1, _k4) ==
                                        _N2(-1 + _k3, _k4)),
                                        trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d4array5(B,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(_k3 - 1, _k4),
                                        _k2,
                                        _k3 - 1) ==
                                        d4array5(B,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3, _k4),
                                        _k2,
                                        -1 + _k3)),
                                        (d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(_k3 - 1, _k4),
                                        _k2,
                                        _k3 - 1)) ==
                                        (d4array9(A,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3, _k4),
                                        _k2,
                                        -1 + _k3))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3,
                                        _k4)),
                                        (d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3)) ==
                                        (d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3, _k4),
                                        _k2,
                                        _k3))),
                                        Implies(d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                       Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                         trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2)))

***********************
2017-05-14 23:02:28
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array9(B, _x2, _x3, _x4, _x5, _k3, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array9(B, _x2, _x3, _x4, _x5, _k3 + 1, _k4)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array9(B,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!673 >= 0),
                                        Not(_x2!672 >= 0),
                                        Not(_x5!671 >= 0),
                                        Not(_x4!670 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array9(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        1 + _k3,
                                        _k4) ==
                                        d4array5(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!673 >= 0),
                                       Not(_x2!672 >= 0),
                                       Not(_x5!671 >= 0),
                                       Not(_x4!670 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array9(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        1 + _k3,
                                        _k4) ==
                                       d4array5(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                                    Not(_x3!673 >= 0),
                                    Not(_x2!672 >= 0),
                                    Not(_x5!671 >= 0),
                                    Not(_x4!670 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array9(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        1 + _k3,
                                        _k4) ==
                                    d4array5(B,
                                        _x2!672,
                                        _x3!673,
                                        _x4!670,
                                        _x5!671,
                                        _N2(_k3, _k4),
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n3,
                                        _n4) ==
                                        d4array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4)))),
                            Not(_x3!673 >= 0),
                            Not(_x2!672 >= 0),
                            Not(_x5!671 >= 0),
                            Not(_x4!670 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array9(B,
                                     _x2!672,
                                     _x3!673,
                                     _x4!670,
                                     _x5!671,
                                     1 + _k3,
                                     _k4) ==
                            d4array5(B,
                                     _x2!672,
                                     _x3!673,
                                     _x4!670,
                                     _x5!671,
                                     _N2(_k3, _k4),
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:02:39
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 23:04:48
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == d4array9(B, 0, _k3, _k2, _n1, _N3(0), _k2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2)) ==
                                        Or(Not(Var(0) >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(0),
                                        _k2))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                 d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        1) ==
                                   d4array9(B,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(0),
                                        _k2)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d4array14(A,
                                      0,
                                      _k3,
                                      _k2,
                                      _n1!2,
                                      1) ==
                            d4array9(B,
                                     0,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N3(0),
                                     _k2))))),
                Not(Or(Not(_n1!2 >= 0),
                       d4array14(A, 0, _k3, _k2, _n1!2, 1) ==
                       d4array9(B,
                                0,
                                _k3,
                                _k2,
                                _n1!2,
                                _N3(0),
                                _k2)))),
            Not(d4array14(A, 0, _k3, _k2, _n1!2, 1) ==
                d4array9(B, 0, _k3, _k2, _n1!2, _N3(0), _k2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1)),
                                        (d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        (d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        Or(Not(_k3 >= 0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        rewrite(Or(Not(_k3 >=
                                        0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(0),
                                        0)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        0,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d4array9(A,
                                        0,
                                        _k3,
                                        _k2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:04:57
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array9(B, _k4 - 1, _k3, _k2, _n1, _N3(_k4 - 1), _k2)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array9(B, _k4, _k3, _k2, _n1, _N3(_k4), _k2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d4array14(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k4) ==
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4 - 1),
                                        _k2),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k4 + 1) ==
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N3(_k4),
                                        _k2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k4 -
                                        1 ==
                                        _k4 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k4 + -1*1 ==
                                        _k4 + -1),
                                        rewrite(_k4 + -1 ==
                                        -1 + _k4),
                                        _k4 + -1*1 ==
                                        -1 + _k4),
                                        _k4 - 1 == -1 + _k4),
                                        d4array14(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array14(A,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4)),
                                        monotonicity(trans(rewrite(_k4 -
                                        1 ==
                                        _k4 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k4 + -1*1 ==
                                        _k4 + -1),
                                        rewrite(_k4 + -1 ==
                                        -1 + _k4),
                                        _k4 + -1*1 ==
                                        -1 + _k4),
                                        _k4 - 1 == -1 + _k4),
                                        monotonicity(trans(rewrite(_k4 -
                                        1 ==
                                        _k4 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k4 + -1*1 ==
                                        _k4 + -1),
                                        rewrite(_k4 + -1 ==
                                        -1 + _k4),
                                        _k4 + -1*1 ==
                                        -1 + _k4),
                                        _k4 - 1 == -1 + _k4),
                                        _N3(_k4 - 1) ==
                                        _N3(-1 + _k4)),
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4 - 1),
                                        _k2) ==
                                        d4array9(B,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(-1 + _k4),
                                        _k2)),
                                        (d4array14(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4 - 1),
                                        _k2)) ==
                                        (d4array14(A,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array9(B,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(-1 + _k4),
                                        _k2))),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4 + 1) ==
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k4)),
                                        (d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4 + 1) ==
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4),
                                        _k2)) ==
                                        (d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k4) ==
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4),
                                        _k2))),
                                        Implies(d4array14(A,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array9(B,
                                        _k4 - 1,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4 - 1),
                                        _k2),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4 + 1) ==
                                        d4array9(B,
                                        _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(_k4),
                                        _k2)) ==
                                        Implies(d4array14(A,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k4) ==
                                        d4array9(B,
                                        -1 + _k4,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N3(-1 + _k4),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)))),
                         trans(monotonicity(rewrite(Or(Not(_k3 >=
                                        0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d4array14(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k4) ==
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N3(_k4),
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-14 23:05:06
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _k4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array14(B, _x2, _x3, _x4, _x5, _k4)==d4array(B, _x2, _x3, _x4, _x5)),(d4array14(B, _x2, _x3, _x4, _x5, _k4 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4 + 1) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!693 >= 0),
                                        Not(_x2!692 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!691 >= 0),
                                        Not(_x4!690 >= 0),
                                        d4array14(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        1 + _k4) ==
                                        d4array9(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!693 >= 0),
                                       Not(_x2!692 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!691 >= 0),
                                       Not(_x4!690 >= 0),
                                       d4array14(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        1 + _k4) ==
                                       d4array9(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!693 >= 0),
                                    Not(_x2!692 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!691 >= 0),
                                    Not(_x4!690 >= 0),
                                    d4array14(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        1 + _k4) ==
                                    d4array9(B,
                                        _x2!692,
                                        _x3!693,
                                        _x4!690,
                                        _x5!691,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n4) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!693 >= 0),
                            Not(_x2!692 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!691 >= 0),
                            Not(_x4!690 >= 0),
                            d4array14(B,
                                      _x2!692,
                                      _x3!693,
                                      _x4!690,
                                      _x5!691,
                                      1 + _k4) ==
                            d4array9(B,
                                     _x2!692,
                                     _x3!693,
                                     _x4!690,
                                     _x5!691,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4 + 1) ==
                                        d4array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:05:18
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))) ==
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n4 >= 0,
                                        _n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                                Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                       Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Or(Not(_n3!9 >= 0),
                                       Not(_n4!11 >= 0),
                                       Not(_n1!10 >= 0),
                                       Not(_n2!8 >= 0),
                                       d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                       d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Not(_n3!9 >= 0),
                                    Not(_n4!11 >= 0),
                                    Not(_n1!10 >= 0),
                                    Not(_n2!8 >= 0),
                                    d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                    d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))),
                         Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                            Not(_n3!9 >= 0),
                            Not(_n4!11 >= 0),
                            Not(_n1!10 >= 0),
                            Not(_n2!8 >= 0),
                            d4array28(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0) ==
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:05:28
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                        d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                       d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0) ==
                                    d4array14(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _N4))),
                         Or(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array28(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0) ==
                            d4array14(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _N4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(B,
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:05:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))) ==
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n4 >= 0,
                                        _n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                       Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Or(Not(_n3!9 >= 0),
                                       Not(_n4!11 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_n1!10 >= 0),
                                       Not(_n2!8 >= 0),
                                       d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                       d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Not(_n3!9 >= 0),
                                    Not(_n4!11 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_n1!10 >= 0),
                                    Not(_n2!8 >= 0),
                                    d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k8) ==
                                    d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                            Not(_n3!9 >= 0),
                            Not(_n4!11 >= 0),
                            Not(_k8 >= 0),
                            Not(_n1!10 >= 0),
                            Not(_n2!8 >= 0),
                            d4array23(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0,
                                      _k8) ==
                            d4array28(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:05:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, 0, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array23(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                        d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                       d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k8) ==
                                    d4array28(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array23(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k8) ==
                            d4array28(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n8) ==
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:05:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))) ==
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n4 >= 0,
                                        _n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_n3!9 >= 0),
                                       Not(_n4!11 >= 0),
                                       Not(_n1!10 >= 0),
                                       Not(_n2!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                       d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Not(_n3!9 >= 0),
                                    Not(_n4!11 >= 0),
                                    Not(_n1!10 >= 0),
                                    Not(_n2!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k7,
                                        _k8) ==
                                    d4array23(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                            Not(_n3!9 >= 0),
                            Not(_n4!11 >= 0),
                            Not(_n1!10 >= 0),
                            Not(_n2!8 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array19(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0,
                                      _k7,
                                      _k8) ==
                            d4array23(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:06:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, 0, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                        d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                       d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k7,
                                        _k8) ==
                                    d4array23(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n7,
                                        _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array19(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      0,
                                      _k7,
                                      _k8) ==
                            d4array23(B,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:06:16
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))) ==
                                        (ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n4 >= 0,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_n3!9 >= 0),
                                       Not(_n4!11 >= 0),
                                       Not(_n1!10 >= 0),
                                       Not(_n2!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                       d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_n3!9 >= 0),
                                    Not(_n4!11 >= 0),
                                    Not(_n1!10 >= 0),
                                    Not(_n2!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                    d4array19(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_n3!9 >= 0),
                            Not(_n4!11 >= 0),
                            Not(_n1!10 >= 0),
                            Not(_n2!8 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:06:21
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(d4array16(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-14 23:06:26
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array16(B, _x2, _x3, _x4, _x5, 0, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                       d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                    d4array19(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:06:31
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array16(B, _x2, _x3, _x4, _x5, _k5 + 1, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array16(B, _x2, _x3, _x4, _x5, _k5 + 2, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array16(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:06:36
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6,
                                        _k7,
                                        _k8)),
                                        (d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_n3!723 >= 0),
                                        Not(_n4!725 >= 0),
                                        Not(_n1!724 >= 0),
                                        Not(_n2!722 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_n3!723 >= 0),
                                       Not(_n4!725 >= 0),
                                       Not(_n1!724 >= 0),
                                       Not(_n2!722 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                       d4array16(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_n3!723 >= 0),
                                    Not(_n4!725 >= 0),
                                    Not(_n1!724 >= 0),
                                    Not(_n2!722 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                    d4array16(A,
                                        _n4!725,
                                        _n3!723,
                                        _n2!722,
                                        _n1!724,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_n3!723 >= 0),
                            Not(_n4!725 >= 0),
                            Not(_n1!724 >= 0),
                            Not(_n2!722 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-14 23:06:48
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array19(B, _x2, _x3, _x4, _x5, _k6, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array19(B, _x2, _x3, _x4, _x5, _k6 + 1, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8)),
                                        (d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array19(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array19(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!737 >= 0),
                                        Not(_x2!736 >= 0),
                                        Not(_x5!735 >= 0),
                                        Not(_x4!734 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!737 >= 0),
                                       Not(_x2!736 >= 0),
                                       Not(_x5!735 >= 0),
                                       Not(_x4!734 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k8 >= 0),
                                       d4array19(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                       d4array16(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                    Not(_x3!737 >= 0),
                                    Not(_x2!736 >= 0),
                                    Not(_x5!735 >= 0),
                                    Not(_x4!734 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k8 >= 0),
                                    d4array19(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                    d4array16(B,
                                        _x2!736,
                                        _x3!737,
                                        _x4!734,
                                        _x5!735,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                            Not(_x3!737 >= 0),
                            Not(_x2!736 >= 0),
                            Not(_x5!735 >= 0),
                            Not(_x4!734 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:06:59
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7 + 1,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k7,
                                        _k8)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                       Or(Not(_n3!749 >= 0),
                                        Not(_n4!751 >= 0),
                                        Not(_n1!750 >= 0),
                                        Not(_n2!748 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Or(Not(_n3!749 >= 0),
                                       Not(_n4!751 >= 0),
                                       Not(_n1!750 >= 0),
                                       Not(_n2!748 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array23(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        1 + _k7,
                                        _k8) ==
                                       d4array19(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Not(_n3!749 >= 0),
                                    Not(_n4!751 >= 0),
                                    Not(_n1!750 >= 0),
                                    Not(_n2!748 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array23(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        1 + _k7,
                                        _k8) ==
                                    d4array19(A,
                                        _n4!751,
                                        _n3!749,
                                        _n2!748,
                                        _n1!750,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                            Not(_n3!749 >= 0),
                            Not(_n4!751 >= 0),
                            Not(_n1!750 >= 0),
                            Not(_n2!748 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array23(A,
                                      _n4!751,
                                      _n3!749,
                                      _n2!748,
                                      _n1!750,
                                      1 + _k7,
                                      _k8) ==
                            d4array19(A,
                                      _n4!751,
                                      _n3!749,
                                      _n2!748,
                                      _n1!750,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-14 23:07:11
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array23(B, _x2, _x3, _x4, _x5, _k7, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array23(B, _x2, _x3, _x4, _x5, _k7 + 1, _k8)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8)),
                                        (d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array23(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k7,
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array23(B,
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                       Or(Not(_x3!761 >= 0),
                                        Not(_x2!760 >= 0),
                                        Not(_x5!759 >= 0),
                                        Not(_x4!758 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Or(Not(_x3!761 >= 0),
                                       Not(_x2!760 >= 0),
                                       Not(_x5!759 >= 0),
                                       Not(_x4!758 >= 0),
                                       Not(_k7 >= 0),
                                       Not(_k8 >= 0),
                                       d4array23(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        1 + _k7,
                                        _k8) ==
                                       d4array19(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                    Not(_x3!761 >= 0),
                                    Not(_x2!760 >= 0),
                                    Not(_x5!759 >= 0),
                                    Not(_x4!758 >= 0),
                                    Not(_k7 >= 0),
                                    Not(_k8 >= 0),
                                    d4array23(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        1 + _k7,
                                        _k8) ==
                                    d4array19(B,
                                        _x2!760,
                                        _x3!761,
                                        _x4!758,
                                        _x5!759,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                            Not(_x3!761 >= 0),
                            Not(_x2!760 >= 0),
                            Not(_x5!759 >= 0),
                            Not(_x4!758 >= 0),
                            Not(_k7 >= 0),
                            Not(_k8 >= 0),
                            d4array23(B,
                                      _x2!760,
                                      _x3!761,
                                      _x4!758,
                                      _x5!759,
                                      1 + _k7,
                                      _k8) ==
                            d4array19(B,
                                      _x2!760,
                                      _x3!761,
                                      _x4!758,
                                      _x5!759,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:07:21
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==d4array14(B, _n4, _n3, _n2, _n1, _N4)),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==d4array14(B, _n4, _n3, _n2, _n1, _N4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n4, _n1, _n3, _n2],
                                       Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8 + 1) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8 + 1) ==
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8)),
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8 + 1) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8 + 1) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Implies(d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        rewrite(Implies(d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)) ==
                                        Or(Not(d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4)),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8) ==
                                        d4array14(B,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N4))),
                                        Implies(d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                       Or(Not(_n3!771 >= 0),
                                        Not(_n4!773 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!772 >= 0),
                                        Not(_n2!770 >= 0),
                                        d4array28(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        _N7(_k8),
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Or(Not(_n3!771 >= 0),
                                       Not(_n4!773 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_n1!772 >= 0),
                                       Not(_n2!770 >= 0),
                                       d4array28(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        1 + _k8) ==
                                       d4array23(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        _N7(_k8),
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Not(_n3!771 >= 0),
                                    Not(_n4!773 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_n1!772 >= 0),
                                    Not(_n2!770 >= 0),
                                    d4array28(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        1 + _k8) ==
                                    d4array23(A,
                                        _n4!773,
                                        _n3!771,
                                        _n2!770,
                                        _n1!772,
                                        _N7(_k8),
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                            Not(_n3!771 >= 0),
                            Not(_n4!773 >= 0),
                            Not(_k8 >= 0),
                            Not(_n1!772 >= 0),
                            Not(_n2!770 >= 0),
                            d4array28(A,
                                      _n4!773,
                                      _n3!771,
                                      _n2!770,
                                      _n1!772,
                                      1 + _k8) ==
                            d4array23(A,
                                      _n4!773,
                                      _n3!771,
                                      _n2!770,
                                      _n1!772,
                                      _N7(_k8),
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8 + 1) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, _N8) == d4array14(B, _n4, _n3, _n2, _n1, _N4)))

***********************
2017-05-14 23:07:33
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, _N8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _k8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),Implies((d4array28(B, _x2, _x3, _x4, _x5, _k8)==d4array(B, _x2, _x3, _x4, _x5)),(d4array28(B, _x2, _x3, _x4, _x5, _k8 + 1)==d4array(B, _x2, _x3, _x4, _x5)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        Implies(d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8 + 1) ==
                                        d4array(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8)),
                                        (d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        (d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8 + 1) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        1 + _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        _k8) ==
                                        d4array(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)),
                                        d4array28(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                       Or(Not(_x3!781 >= 0),
                                        Not(_x2!780 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_x5!779 >= 0),
                                        Not(_x4!778 >= 0),
                                        d4array28(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        1 + _k8) ==
                                        d4array23(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        _N7(_k8),
                                        _k8)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Or(Not(_x3!781 >= 0),
                                       Not(_x2!780 >= 0),
                                       Not(_k8 >= 0),
                                       Not(_x5!779 >= 0),
                                       Not(_x4!778 >= 0),
                                       d4array28(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        1 + _k8) ==
                                       d4array23(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        _N7(_k8),
                                        _k8))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                    Not(_x3!781 >= 0),
                                    Not(_x2!780 >= 0),
                                    Not(_k8 >= 0),
                                    Not(_x5!779 >= 0),
                                    Not(_x4!778 >= 0),
                                    d4array28(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        1 + _k8) ==
                                    d4array23(B,
                                        _x2!780,
                                        _x3!781,
                                        _x4!778,
                                        _x5!779,
                                        _N7(_k8),
                                        _k8))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                            Not(_x3!781 >= 0),
                            Not(_x2!780 >= 0),
                            Not(_k8 >= 0),
                            Not(_x5!779 >= 0),
                            Not(_x4!778 >= 0),
                            d4array28(B,
                                      _x2!780,
                                      _x3!781,
                                      _x4!778,
                                      _x5!779,
                                      1 + _k8) ==
                            d4array23(B,
                                      _x2!780,
                                      _x3!781,
                                      _x4!778,
                                      _x5!779,
                                      _N7(_k8),
                                      _k8))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array28(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n8 + 1) ==
                                        d4array23(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _N8) == d4array(B, _x2, _x3, _x4, _x5)))

***********************
2017-05-14 23:07:45
***********************

Command--Prove 

Parameters--

 Pre Condition--['u < v', 's < n', 't < p', 'q < m']
 Post Condition--['ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==d4array28(B, _n8, _n7, _n6, _n5, _N8))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==d4array28(B, _n8, _n7, _n6, _n5, _N8))))

System try to prove 
ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==d4array28(B, _n8, _n7, _n6, _n5, _N8))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
_n1=Int('_n1')
_n6=Int('_n6')
j1=Int('j1')
l23=Function('l23',IntSort(),IntSort(),IntSort())
_N7=Function('_N7',IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
t1=Int('t1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
j28=Function('j28',IntSort(),IntSort())
q1=Int('q1')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
s1=Int('s1')
u1=Int('u1')
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
m1=Int('m1')
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
main=Int('main')
t=Int('t')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N8=Const('_N8',IntSort())
B=Const('B',arraySort)
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
l1=Int('l1')
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
v1=Int('v1')
k23=Function('k23',IntSort(),IntSort(),IntSort())
_n5=Int('_n5')
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
p1=Int('p1')
_n2=Int('_n2')
_n3=Int('_n3')
_x3=Int('_x3')
m=Int('m')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
q=Int('q')
p=Int('p')
s=Int('s')
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
u=Int('u')
B1=Const('B1',arraySort)
v=Int('v')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(B, _x2, _x3, _x4, _x5) == d4array28(B, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array2(B, _x2, _x3, _x4, _x5, _n1 + 1, _n2, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _n1, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= u)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < u)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(B, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= t)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < t)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(B, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= s)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < s)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, 0) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= q)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < q)))
_s.add(Or(_N4==0,_N4 - 1 < q))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(B, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= u)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < u)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < u))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(B, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= t)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < t)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < t))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(B, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= s)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < s)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < s))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, 0) == d4array14(B, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= q)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < q)))
_s.add(Or(_N8==0,_N8 - 1 < q))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(B, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(B, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(B, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array2(B, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(B, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == d4array5(B, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(B, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == d4array9(B, _n4, _n3, _n2, _n1, _N3(_n4), _n2))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(B, _x2, _x3, _x4, _x5, _N3(_n4), _n4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(B, _x2, _x3, _x4, _x5, _N4) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(B, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(B, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(B, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(B, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(B, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(B, _x2, _x3, _x4, _x5, _N7(_n8), _n8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, _N8) == d4array14(B, _n4, _n3, _n2, _n1, _N4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(B, _x2, _x3, _x4, _x5, _N8) == d4array(B, _x2, _x3, _x4, _x5))))
_s.add(A1 == A)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(q1 == q)
_s.add(p1 == p)
_s.add(s1 == s)
_s.add(u1 == u)
_s.add(t1 == t)
_s.add(v1 == v)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_n2 ,_n3 ,_n4],_N1(_n2, _n3, _n4)>=0))
_s.add(ForAll([_n3 ,_n4],_N2(_n3, _n4)>=0))
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(ForAll([_n6 ,_n7 ,_n8],_N5(_n6, _n7, _n8)>=0))
_s.add(ForAll([_n7 ,_n8],_N6(_n7, _n8)>=0))
_s.add(ForAll([_n8],_N7(_n8)>=0))
_s.add(_N8>=0)
_s.add(u < v)
_s.add(s < n)
_s.add(t < p)
_s.add(q < m)
_s.add(Not(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==d4array28(B, _n8, _n7, _n6, _n5, _N8))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-n-u/copy-partial-4-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-n-u/copy-partial-4-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n5, _n7, _n6, _n8],
                                       Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        d4array28(B,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        d4array28(B,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8))),
                                        (ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        d4array28(B,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8)))) ==
                                        (ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(And(_n5 >= 0,
                                        _n7 >= 0,
                                        _n6 >= 0,
                                        _n8 >= 0)),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        d4array28(B,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8))))),
                                Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
..., trans(trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))),
                                        Or(Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4)))),
                               rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))),
                                        Or(Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4))) ==
                                       Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))),
                                        Not(_n8!8 >= 0),
                                        Not(_n5!11 >= 0),
                                        Not(_n7!10 >= 0),
                                        Not(_n6!9 >= 0),
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4))),
                               Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))),
                                  Not(_n8!8 >= 0),
                                  Not(_n5!11 >= 0),
                                  Not(_n7!10 >= 0),
                                  Not(_n6!9 >= 0),
                                  d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                  d4array14(B,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N4))),
                            mp(mp(mp~(mp(asserted(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        d4array14(B,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:13:41
***********************

Command--Translate 

Parameters--
 File Name--multi/copy-partial-4-u/copy-partial-4-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k2(_n1 + 1)=k2(_n1) + 1,k2(0)=k
 Closed Form Solution
_n1 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j5(_n2 + 1)=j5(_n2) + 1,j5(0)=j
 Closed Form Solution
_n2 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i9(_n3 + 1)=i9(_n3) + 1,i9(0)=i
 Closed Form Solution
_n3 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k11(_n4 + 1)=k11(_n4) + 1,k11(0)=k
 Closed Form Solution
_n4 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j14(_n5 + 1)=j14(_n5) + 1,j14(0)=j
 Closed Form Solution
_n5 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i18(_n6 + 1)=i18(_n6) + 1,i18(0)=i
 Closed Form Solution
_n6 + i

***********************
2017-05-14 23:13:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0, _x4 >= 0)),
                           d3array9(A, _x2, _x3, _x4, 0) ==
                           d3array(A, _x2, _x3, _x4)))),
   quant-intro(trans(monotonicity(rewrite(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     rewrite(Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                             Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     Implies(And(Var(2) >= 0,
                                 And(Var(1) >= 0,
                                     Var(0) >= 0)),
                             d3array9(A,
                                      Var(1),
                                      Var(2),
                                      Var(0),
                                      0) ==
                             d3array(A,
                                     Var(1),
                                     Var(2),
                                     Var(0))) ==
                     Or(Not(And(Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d3array9(A,
                                 Var(1),
                                 Var(2),
                                 Var(0),
                                 0) ==
                        d3array(A, Var(1), Var(2), Var(0)))),
               (ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(A, _x2, _x3, _x4, 0) ==
                               d3array(A, _x2, _x3, _x4)))) ==
               (ForAll([_x3, _x2, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x4 >= 0)),
                          d3array9(A, _x2, _x3, _x4, 0) ==
                          d3array(A, _x2, _x3, _x4))))),
   ForAll([_x3, _x2, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
             d3array9(A, _x2, _x3, _x4, 0) ==
             d3array(A, _x2, _x3, _x4)))), mp(asserted(Not(ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(A, _x2, _x3, _x4, 0) ==
                               d3array(A, _x2, _x3, _x4))))),
   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                            (ForAll([_x3, _x2, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                            (ForAll([_x3, _x2, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                       d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                       d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                Not(ForAll([_x3, _x2, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        _x4 >= 0)),
                                   d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                   d3array(A, _x2, _x3, _x4)))) ==
                Not(ForAll([_x3, _x2, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x4 >= 0)),
                              d3array9(A, _x2, _x3, _x4, 0) ==
                              d3array(A, _x2, _x3, _x4))))),
   Not(ForAll([_x3, _x2, _x4],
              Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
                 d3array9(A, _x2, _x3, _x4, 0) ==
                 d3array(A, _x2, _x3, _x4))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:13:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0, _x4 >= 0)),
                           d3array9(B, _x2, _x3, _x4, 0) ==
                           d3array(B, _x2, _x3, _x4)))),
   quant-intro(trans(monotonicity(rewrite(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     rewrite(Implies(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                             Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                     Implies(And(Var(2) >= 0,
                                 And(Var(1) >= 0,
                                     Var(0) >= 0)),
                             d3array9(B,
                                      Var(1),
                                      Var(2),
                                      Var(0),
                                      0) ==
                             d3array(B,
                                     Var(1),
                                     Var(2),
                                     Var(0))) ==
                     Or(Not(And(Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d3array9(B,
                                 Var(1),
                                 Var(2),
                                 Var(0),
                                 0) ==
                        d3array(B, Var(1), Var(2), Var(0)))),
               (ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(B, _x2, _x3, _x4, 0) ==
                               d3array(B, _x2, _x3, _x4)))) ==
               (ForAll([_x3, _x2, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x4 >= 0)),
                          d3array9(B, _x2, _x3, _x4, 0) ==
                          d3array(B, _x2, _x3, _x4))))),
   ForAll([_x3, _x2, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
             d3array9(B, _x2, _x3, _x4, 0) ==
             d3array(B, _x2, _x3, _x4)))), mp(asserted(Not(ForAll([_x3, _x2, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0, _x4 >= 0)),
                               d3array9(B, _x2, _x3, _x4, 0) ==
                               d3array(B, _x2, _x3, _x4))))),
   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                  Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                  Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                     d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                            (ForAll([_x3, _x2, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                            (ForAll([_x3, _x2, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                       d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                       d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                Not(ForAll([_x3, _x2, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        _x4 >= 0)),
                                   d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                   d3array(B, _x2, _x3, _x4)))) ==
                Not(ForAll([_x3, _x2, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x4 >= 0)),
                              d3array9(B, _x2, _x3, _x4, 0) ==
                              d3array(B, _x2, _x3, _x4))))),
   Not(ForAll([_x3, _x2, _x4],
              Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
                 d3array9(B, _x2, _x3, _x4, 0) ==
                 d3array(B, _x2, _x3, _x4))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:13:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k3>=0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, 0, _k3) == d3array(A, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(A,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                 d3array(A, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                   d3array(A, _x2, _x3, _x4)))),
                     Not(Or(Not(And(_x3!8 >= 0,
                                    _x2!7 >= 0,
                                    _x4!6 >= 0)),
                            d3array5(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array(A, _x2!7, _x3!8, _x4!6))))),
                Not(Or(Not(And(_x3!8 >= 0,
                               _x2!7 >= 0,
                               _x4!6 >= 0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                        d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                       d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array5(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                    d3array9(A,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))),
                         Or(Not(ForAll([_x3, _x2, _n3, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k3 >= 0),
                            Not(_x4!6 >= 0),
                            d3array5(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array9(A,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        _x4 >= 0))),
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:14:02
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, 0, _k3) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, 0, _k3) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, 0, _k3) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k3>=0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, 0, _k3) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                 d3array(B, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k3) ==
                                   d3array(B, _x2, _x3, _x4)))),
                     Not(Or(Not(And(_x3!8 >= 0,
                                    _x2!7 >= 0,
                                    _x4!6 >= 0)),
                            d3array5(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array(B, _x2!7, _x3!8, _x4!6))))),
                Not(Or(Not(And(_x3!8 >= 0,
                               _x2!7 >= 0,
                               _x4!6 >= 0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                        d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                       d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k3) ==
                                    d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k3))),
                         Or(Not(ForAll([_x3, _x2, _n3, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k3 >= 0),
                            Not(_x4!6 >= 0),
                            d3array5(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k3) ==
                            d3array9(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        _x4 >= 0))),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n3) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array5(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:14:08
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == d3array2(A, _k3, _k2, 0, 0, _k2, _k3)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == d3array2(A, _k3, _k2, 0, 0, _k2, _k3)

System try to prove 
d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == d3array2(A, _k3, _k2, 0, 0, _k2, _k3)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(d3array2(A, _k3, _k2, 0, 1, _k2, _k3) == d3array2(A, _k3, _k2, 0, 0, _k2, _k3)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
                 Or(Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d3array2(A,
                             _k3,
                             _k2,
                             0,
                             1 + 0,
                             _k2,
                             _k3) ==
                    d3array2(A, _k3, _k2, 0, 0, _k2, _k3)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3)) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3))),
                                        Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3)) ==
                                        Or(False,
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3))),
                            rewrite(Or(False,
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3)) ==
                                    Or(Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                                       d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3))),
                            Or(Not(0 >= 0),
                               Not(_k3 >= 0),
                               Not(_k2 >= 0),
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3) ==
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3)) ==
                            Or(Not(_k3 >= 0),
                               Not(_k2 >= 0),
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3) ==
                               d3array2(A,
                                        _k3,
                                        _k2,
                                        0,
                                        0,
                                        _k2,
                                        _k3))),
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
..., mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(Not(d3array2(A, _k3, _k2, 0, 1, _k2, _k3) ==
             d3array2(A, _k3, _k2, 0, 0, _k2, _k3))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:14:09
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==d3array2(A, _k3, _k2, _k1, _k1, _k2, _k3)),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==d3array2(A, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==d3array2(A, _k3, _k2, _k1, _k1, _k2, _k3)),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==d3array2(A, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3)))

System try to prove 
Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==d3array2(A, _k3, _k2, _k1, _k1, _k2, _k3)),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==d3array2(A, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==d3array2(A, _k3, _k2, _k1, _k1, _k2, _k3)),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==d3array2(A, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
                 Or(Not(1 + _k1 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    d3array2(A,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2,
                             _k3) ==
                    d3array2(A,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + _k1,
                             _k2,
                             _k3)))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3)) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                                   Or(Not(1 + _k1 >= 0),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3)) ==
                                   Or(Not(_k1 >= -1),
                                      Not(_k3 >= 0),
                                      Not(_k2 >= 0),
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                      d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
                         Or(Not(1 + _k1 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + 1 + _k1,
                                     _k2,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + _k1,
                                     _k2,
                                     _k3))) ==
                      Or(Not(ForAll([_n1, _n3, _n2],
                                    Or(Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                       d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
                         Or(Not(_k1 >= -1),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     2 + _k1,
                                     _k2,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     1 + _k1,
                                     1 + _k1,
                                     _k2,
                                     _k3)))),
         rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                               Or(Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
..., mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), not-or-elim(mp(asserted(Not(Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                    d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3),
                                    d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                    d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3)))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3)) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3)) ==
                                        (d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                                        Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2,
                                        _k3)) ==
                                        Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2,
                                        _k3),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                                  rewrite(Implies(d3array2(A,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:14:11
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d3array2(A, _k3, _k2, _k1, _k1 + 1, _k2, _k3)==d3array2(A, _k3, _k2, _k1, _k1, _k2, _k3)),(d3array2(A, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3)==d3array2(A, _k3, _k2, _k1 + 1, _k1 + 1, _k2, _k3)))

System try to prove 
Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(Implies(ForAll([_n1,_k3,_k2],Implies(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))),ForAll([_n1,_k3,_k2],Implies(And(And(And(And(And(_n1>=0,And(_k3>=0,_k2>=0)),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d3array2(A, _k3, _k2, _n1, _n1 + 1, _k2, _k3) == d3array2(A, _k3, _k2, _n1, _n1, _k2, _k3))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n3, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                               d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
                 Or(Not(_n1!8 >= 0),
                    Not(_k3!7 >= 0),
                    Not(_k2!6 >= 0),
                    d3array2(A,
                             _k3!7,
                             _k2!6,
                             _n1!8,
                             1 + _n1!8,
                             _k2!6,
                             _k3!7) ==
                    d3array2(A,
                             _k3!7,
                             _k2!6,
                             _n1!8,
                             _n1!8,
                             _k2!6,
                             _k3!7)))),
   rewrite(Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3) ==
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3)))),
              Or(Not(_n1!8 >= 0),
                 Not(_k3!7 >= 0),
                 Not(_k2!6 >= 0),
                 d3array2(A,
                          _k3!7,
                          _k2!6,
                          _n1!8,
                          1 + _n1!8,
                          _k2!6,
                          _k3!7) ==
                 d3array2(A,
                          _k3!7,
                          _k2!6,
                          _n1!8,
                          _n1!8,
                          _k2!6,
                          _k3!7))) ==
           Or(Not(ForAll([_n1, _n3, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n3 >= 0),
                            Not(_n2 >= 0),
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2,
                                     _n3) ==
                            d3array2(A,
                                     _n3,
                                     _n2,
                                     _n1,
                                     _n1,
                                     _n2,
                                     _n3)))),
              Not(_n1!8 >= 0),
              Not(_k3!7 >= 0),
              Not(_k2!6 >= 0),
              d3array2(A,
                       _k3!7,
                       _k2!6,
                       _n1!8,
                       1 + _n1!8,
                       _k2!6,
                       _k3!7) ==
              d3array2(A,
                       _k3!7,
                       _k2!6,
                       _n1!8,
                       _n1!8,
                       _k2!6,
                       _k3!7))),
   Or(Not(ForAll([_n1, _n3, _n2],
                 Or(Not(_n1 >= 0),
                    Not(_n3 >= 0),
                    Not(_n2 >= 0),
                    d3array2(A,
                             _n3,
                             _n2,
                             _n1,
                             1 + _n1,
                             _n2,
                             _n3) ==
                    d3array2(A,
                             _n3,
                             _n2,
                             _n1,
                             _n1,
                             _n2,
                             _n3)))),
      Not(_n1!8 >= 0),
      Not(_k3!7 >= 0),
      Not(_k2!6 >= 0),
      d3array2(A,
               _k3!7,
               _k2!6,
               _n1!8,
               1 + _n1!8,
               _k2!6,
               _k3!7) ==
      d3array2(A, _k3!7, _k2!6, _n1!8, _n1!8, _k2!6, _k3!7))), mp(mp(mp~(mp(asserted(ForAll([_n1, _n3, _n2],
                             Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                     d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                       d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                  d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                         (ForAll([_n1, _n3, _n2],
                                 Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3) ==
                                        d3array2(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2,
                                        _n3)))) ==
                         (ForAll([_n1, _n3, _n2],
                                 Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                    d3array2(A,
                                        _n3,
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3))),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3))),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3))),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3))),
                                        ForAll([_n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        And(_k3 >= 0,
                                        _k2 >= 0)),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2,
                                        _k3)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1))),
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        (d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(And(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Var(2) < _L1),
                                        _L1 > 0),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0)),
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1)) ==
                                        d3array2(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3)))

***********************
2017-05-14 23:14:17
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array2(B, _x2, _x3, _x4, 0, _k2, _k3) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array2(B, _x2, _x3, _x4, 0, _k2, _k3) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array2(B, _x2, _x3, _x4, 0, _k2, _k3) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array2(B, _x2, _x3, _x4, 0, _k2, _k3) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                 d3array(B, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k2,
                                        _k3) ==
                                   d3array(B, _x2, _x3, _x4)))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n2,
                                        _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k2,
                                        _k3) ==
                                        d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k2,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n2,
                                        _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2,
                                        _n3)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k2,
                                        _k3) ==
                                       d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k2,
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n2,
                                        _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2,
                                        _n3)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k2,
                                        _k3) ==
                                    d3array5(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k2,
                                        _k3))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n2,
                                        _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2,
                                        _n3)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            Not(_x4!6 >= 0),
                            d3array2(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     0,
                                     _k2,
                                     _k3) ==
                            d3array5(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     _k2,
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        And(_n2 >= 0,
                                        _x4 >= 0)))),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n2,
                                        _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:14:19
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array2(B, _x2, _x3, _x4, _k1 + 1, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array2(B, _x2, _x3, _x4, _k1 + 2, _k2, _k3)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array2(B, _x2, _x3, _x4, _k1 + 1, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array2(B, _x2, _x3, _x4, _k1 + 2, _k2, _k3)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array2(B, _x2, _x3, _x4, _k1 + 1, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array2(B, _x2, _x3, _x4, _k1 + 2, _k2, _k3)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array2(B, _x2, _x3, _x4, _k1 + 1, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array2(B, _x2, _x3, _x4, _k1 + 2, _k2, _k3)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k1 + 2,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array2(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array2(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n1,
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k1,
                                        _k2,
                                        _k3)),
                                        (d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3)) ==
                                        (d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3)) ==
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n1,
                                        _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n1,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k1,
                                        _k2,
                                        _k3))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:14:23
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array(A, _k3, _k2 - 1, _n1)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array(A, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 23:16:30
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == d3array2(A, _k3, 0, _n1, _N1(0, _k3), 0, _k3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == d3array2(A, _k3, 0, _n1, _N1(0, _k3), 0, _k3)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == d3array2(A, _k3, 0, _n1, _N1(0, _k3), 0, _k3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d3array5(A, _k3, 0, _n1, 1, _k3) == d3array2(A, _k3, 0, _n1, _N1(0, _k3), 0, _k3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3, _x2, _n3, _n2, _x4],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               Not(_x4 >= 0),
                               d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                               d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                 Or(Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k3 >= 0),
                    Not(0 >= 0),
                    Not(_n1!2 >= 0),
                    d3array5(A, _k3, 0, _n1!2, 1 + 0, _k3) ==
                    d3array2(A,
                             _k3,
                             0,
                             _n1!2,
                             _N1(0, _k3),
                             0,
                             _k3)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        Or(Not(0 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(False,
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        Not(_n1!2 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                            rewrite(Or(False,
                                       Not(_k3 >= 0),
                                       Not(_k3 >= 0),
                                       False,
                                       Not(_n1!2 >= 0),
                                       d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3) ==
                                       d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                    Or(Not(_k3 >= 0),
                                       Not(_n1!2 >= 0),
                                       d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3) ==
                                       d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                            Or(Not(0 >= 0),
                               Not(_k3 >= 0),
                               Not(_k3 >= 0),
                               Not(0 >= 0),
                               Not(_n1!2 >= 0),
                               d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1 + 0,
                                        _k3) ==
                               d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                            Or(Not(_k3 >= 0),
                               Not(_n1!2 >= 0),
                               d3array5(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        1,
                                        _k3) ==
                               d3array2(A,
                                        _k3,
                                        0,
                                        _n1!2,
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                      Or(Not(ForAll([_x3,
                                     _x2,
                                     _n3,
                                     _n2,
                                     _x4],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
..., mp(mp(mp~(mp(asserted(ForAll([_x3, _x2, _n3, _n2, _x4],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        And(_n2 >= 0,
                                        _x4 >= 0)))),
                                     d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2 + 1,
                                        _n3) ==
                                     d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2))),
                                        (d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                        (d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                                        Implies(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                        Implies(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                               rewrite(Implies(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                       Or(Not(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                               Implies(And(Var(4) >= 0,
..., asserted(_k3 >= 0), not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                 d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                   d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d3array5(A,
                                     _k3,
                                     0,
                                     _n1!2,
                                     1,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3),
                                     0,
                                     _k3))))),
                Not(Or(Not(_n1!2 >= 0),
                       d3array5(A, _k3, 0, _n1!2, 1, _k3) ==
                       d3array2(A,
                                _k3,
                                0,
                                _n1!2,
                                _N1(0, _k3),
                                0,
                                _k3)))),
            _n1!2 >= 0), not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3),
                                        0,
                                        _k3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        Var(0),
                                        _N1(0, _k3),
                                        0,
                                        _k3))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                 d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d3array5(A,
                                        _k3,
                                        0,
                                        _n1,
                                        1,
                                        _k3) ==
                                   d3array2(A,
                                        _k3,
                                        0,
                                        _n1,
                                        _N1(0, _k3),
                                        0,
                                        _k3)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d3array5(A,
                                     _k3,
                                     0,
                                     _n1!2,
                                     1,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     0,
                                     _n1!2,
                                     _N1(0, _k3),
                                     0,
                                     _k3))))),
                Not(Or(Not(_n1!2 >= 0),
                       d3array5(A, _k3, 0, _n1!2, 1, _k3) ==
                       d3array2(A,
                                _k3,
                                0,
                                _n1!2,
                                _N1(0, _k3),
                                0,
                                _k3)))),
            Not(d3array5(A, _k3, 0, _n1!2, 1, _k3) ==
                d3array2(A,
                         _k3,
                         0,
                         _n1!2,
                         _N1(0, _k3),
                         0,
                         _k3))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:16:35
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array2(A, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3), _k2 - 1, _k3)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array2(A, _k3, _k2, _n1, _N1(_k2, _k3), _k2, _k3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array2(A, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3), _k2 - 1, _k3)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array2(A, _k3, _k2, _n1, _N1(_k2, _k3), _k2, _k3)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array2(A, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3), _k2 - 1, _k3)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array2(A, _k3, _k2, _n1, _N1(_k2, _k3), _k2, _k3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array5(A, _k3, _k2 - 1, _n1, _k2, _k3)==d3array2(A, _k3, _k2 - 1, _n1, _N1(_k2 - 1, _k3), _k2 - 1, _k3)),(d3array5(A, _k3, _k2, _n1, _k2 + 1, _k3)==d3array2(A, _k3, _k2, _n1, _N1(_k2, _k3), _k2, _k3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3, _x2, _n3, _n2, _x4],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               Not(_x4 >= 0),
                               d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                               d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                 Or(Not(_k2 >= 0),
                    Not(_k3 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    Not(_n1!2 >= 0),
                    d3array5(A,
                             _k3,
                             _k2,
                             _n1!2,
                             1 + _k2,
                             _k3) ==
                    d3array2(A,
                             _k3,
                             _k2,
                             _n1!2,
                             _N1(_k2, _k3),
                             _k2,
                             _k3)))),
   trans(monotonicity(rewrite(Or(Not(_k2 >= 0),
                                 Not(_k3 >= 0),
                                 Not(_k3 >= 0),
                                 Not(_k2 >= 0),
                                 Not(_n1!2 >= 0),
                                 d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3) ==
                                 d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)) ==
                              Or(Not(_k2 >= 0),
                                 Not(_k3 >= 0),
                                 Not(_n1!2 >= 0),
                                 d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k2,
                                        _k3) ==
                                 d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))),
                      Or(Not(ForAll([_x3,
                                     _x2,
                                     _n3,
                                     _n2,
                                     _x4],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       Not(_x4 >= 0),
                                       d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                       d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                         Or(Not(_k2 >= 0),
                            Not(_k3 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            Not(_n1!2 >= 0),
                            d3array5(A,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     1 + _k2,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3),
                                     _k2,
                                     _k3))) ==
                      Or(Not(ForAll([_x3,
                                     _x2,
                                     _n3,
                                     _n2,
                                     _x4],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       Not(_x4 >= 0),
                                       d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                       d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                         Or(Not(_k2 >= 0),
                            Not(_k3 >= 0),
                            Not(_n1!2 >= 0),
                            d3array5(A,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     1 + _k2,
                                     _k3) ==
                            d3array2(A,
                                     _k3,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2, _k3),
                                     _k2,
                                     _k3)))),
         rewrite(Or(Not(ForAll([_x3, _x2, _n3, _n2, _x4],
                               Or(Not(_x3 >= 0),
                                  Not(_x2 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  Not(_x4 >= 0),
                                  d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                  d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                    Or(Not(_k2 >= 0),
                       Not(_k3 >= 0),
                       Not(_n1!2 >= 0),
                       d3array5(A,
                                _k3,
                                _k2,
                                _n1!2,
                                1 + _k2,
                                _k3) ==
                       d3array2(A,
                                _k3,
                                _k2,
                                _n1!2,
                                _N1(_k2, _k3),
                                _k2,
                                _k3))) ==
                 Or(Not(ForAll([_x3, _x2, _n3, _n2, _x4],
                               Or(Not(_x3 >= 0),
                                  Not(_x2 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  Not(_x4 >= 0),
                                  d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                  d3array2(A,
                                        _x2,
..., mp(mp(mp~(mp(asserted(ForAll([_x3, _x2, _n3, _n2, _x4],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        And(_n2 >= 0,
                                        _x4 >= 0)))),
                                     d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2 + 1,
                                        _n3) ==
                                     d3array2(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2))),
                                        (d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                        (d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                                        Implies(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        Var(1) + 1,
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                        Implies(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                               rewrite(Implies(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2))) ==
                                       Or(Not(And(Var(4) >=
                                        0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array5(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        1 + Var(1),
                                        Var(2)) ==
                                        d3array2(A,
                                        Var(3),
                                        Var(4),
                                        Var(0),
                                        _N1(Var(1), Var(2)),
                                        Var(1),
                                        Var(2)))),
                               Implies(And(Var(4) >= 0,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3)),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        _N1(_k2 - 1, _k3) ==
                                        _N1(-1 + _k2, _k3)),
                                        trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2, _k3),
                                        -1 + _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2, _k3),
                                        -1 + _k2,
                                        _k3))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))),
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
..., not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3)),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        _N1(_k2 - 1, _k3) ==
                                        _N1(-1 + _k2, _k3)),
                                        trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2, _k3),
                                        -1 + _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2, _k3),
                                        -1 + _k2,
                                        _k3))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)) ==
                                        (d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))),
                                        Implies(d3array5(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1, _k3),
                                        _k2 - 1,
                                        _k3),
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array2(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N1(_k2, _k3),
                                        _k2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2)))

***********************
2017-05-14 23:16:42
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array5(B, _x2, _x3, _x4, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array5(B, _x2, _x3, _x4, _k2 + 1, _k3)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array5(B, _x2, _x3, _x4, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array5(B, _x2, _x3, _x4, _k2 + 1, _k3)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array5(B, _x2, _x3, _x4, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array5(B, _x2, _x3, _x4, _k2 + 1, _k3)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array5(A, _x2, _x3, _x4, _k2, _k3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array5(B, _x2, _x3, _x4, _k2, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array5(B, _x2, _x3, _x4, _k2, _k3)==d3array(B, _x2, _x3, _x4)),(d3array5(B, _x2, _x3, _x4, _k2 + 1, _k3)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k2 + 1,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k2,
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x3!366 >= 0),
                                        Not(_x2!365 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_x4!364 >= 0),
                                        d3array5(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        1 + _k2,
                                        _k3) ==
                                        d3array2(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                    Or(Not(_x3!366 >= 0),
                                       Not(_x2!365 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_k2 >= 0),
                                       Not(_x4!364 >= 0),
                                       d3array5(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        1 + _k2,
                                        _k3) ==
                                       d3array2(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                    Not(_x3!366 >= 0),
                                    Not(_x2!365 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_k2 >= 0),
                                    Not(_x4!364 >= 0),
                                    d3array5(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        1 + _k2,
                                        _k3) ==
                                    d3array2(B,
                                        _x2!365,
                                        _x3!366,
                                        _x4!364,
                                        _N1(_k2, _k3),
                                        _k2,
                                        _k3))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n2,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                            Not(_x3!366 >= 0),
                            Not(_x2!365 >= 0),
                            Not(_k3 >= 0),
                            Not(_k2 >= 0),
                            Not(_x4!364 >= 0),
                            d3array5(B,
                                     _x2!365,
                                     _x3!366,
                                     _x4!364,
                                     1 + _k2,
                                     _k3) ==
                            d3array2(B,
                                     _x2!365,
                                     _x3!366,
                                     _x4!364,
                                     _N1(_k2, _k3),
                                     _k2,
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _n2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        And(_n2 >= 0,
                                        _x4 >= 0)))),
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n2 + 1,
                                        _n3) ==
                                        d3array2(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N1(_n2, _n3),
                                        _n2,
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:16:49
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, _k3) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array(A, _k3 - 1, _k2, _n1)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array(A, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-14 23:18:56
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == d3array5(A, 0, _k2, _n1, _N2(0), _k2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == d3array5(A, 0, _k2, _n1, _N2(0), _k2)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == d3array5(A, 0, _k2, _n1, _N2(0), _k2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array9(A, _x2, _x3, _x4, _k3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d3array9(A, 0, _k2, _n1, 1) == d3array5(A, 0, _k2, _n1, _N2(0), _k2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0),
                                        _k2)) ==
                                        Or(Not(Var(0) >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        Var(0),
                                        _N2(0),
                                        _k2))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d3array9(A, 0, _k2, _n1, 1) ==
                                 d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d3array9(A,
                                        0,
                                        _k2,
                                        _n1,
                                        1) ==
                                   d3array5(A,
                                        0,
                                        _k2,
                                        _n1,
                                        _N2(0),
                                        _k2)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d3array9(A, 0, _k2, _n1!2, 1) ==
                            d3array5(A,
                                     0,
                                     _k2,
                                     _n1!2,
                                     _N2(0),
                                     _k2))))),
                Not(Or(Not(_n1!2 >= 0),
                       d3array9(A, 0, _k2, _n1!2, 1) ==
                       d3array5(A,
                                0,
                                _k2,
                                _n1!2,
                                _N2(0),
                                _k2)))),
            Not(d3array9(A, 0, _k2, _n1!2, 1) ==
                d3array5(A, 0, _k2, _n1!2, _N2(0), _k2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0)))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1)),
                                        (d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0)) ==
                                        (d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0))),
                                        rewrite(Or(Not(_k2 >=
                                        0),
                                        False,
                                        False,
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1) ==
                                        d3array5(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        _N2(0),
                                        0))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        0,
                                        _k2,
                                        _n1!2,
                                        1 + 0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:01
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array5(A, _k3 - 1, _k2, _n1, _N2(_k3 - 1), _k2)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array5(A, _k3, _k2, _n1, _N2(_k3), _k2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array5(A, _k3 - 1, _k2, _n1, _N2(_k3 - 1), _k2)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array5(A, _k3, _k2, _n1, _N2(_k3), _k2)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array5(A, _k3 - 1, _k2, _n1, _N2(_k3 - 1), _k2)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array5(A, _k3, _k2, _n1, _N2(_k3), _k2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array9(A, _x2, _x3, _x4, _k3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d3array9(A, _k3 - 1, _k2, _n1, _k3)==d3array5(A, _k3 - 1, _k2, _n1, _N2(_k3 - 1), _k2)),(d3array9(A, _k3, _k2, _n1, _k3 + 1)==d3array5(A, _k3, _k2, _n1, _N2(_k3), _k2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _k3) ==
                                        d3array5(A,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _N2(_k3 - 1),
                                        _k2),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k3 + 1) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _N2(_k3),
                                        _k2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3)),
                                        monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        _N2(_k3 - 1) ==
                                        _N2(-1 + _k3)),
                                        d3array5(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(_k3 - 1),
                                        _k2) ==
                                        d3array5(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3),
                                        _k2)),
                                        (d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array5(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(_k3 - 1),
                                        _k2)) ==
                                        (d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array5(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3),
                                        _k2))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3)),
                                        (d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3),
                                        _k2)) ==
                                        (d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3),
                                        _k2))),
                                        Implies(d3array9(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array5(A,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _N2(_k3 - 1),
                                        _k2),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3),
                                        _k2)) ==
                                        Implies(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array5(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3),
                                        _k2),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        Var(0),
                                        _N2(_k3),
                                        _k2))),
                                        rewrite(Implies(d3array9(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3) ==
                                        d3array5(A,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _N2(-1 + _k3),
                                        _k2),
                                        d3array9(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3)))),
                         trans(monotonicity(rewrite(Or(Not(_k2 >=
                                        0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3)) ==
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Or(Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                        Not(_k2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_n1!2 >= 0),
                                        d3array9(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        1 + _k3) ==
                                        d3array5(A,
                                        _k3,
                                        _k2,
                                        _n1!2,
                                        _N2(_k3),
                                        _k3))),
                               Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3)))

***********************
2017-05-14 23:19:07
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array9(B, _x2, _x3, _x4, _k3)==d3array(B, _x2, _x3, _x4)),(d3array9(B, _x2, _x3, _x4, _k3 + 1)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array9(B, _x2, _x3, _x4, _k3)==d3array(B, _x2, _x3, _x4)),(d3array9(B, _x2, _x3, _x4, _k3 + 1)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array9(B, _x2, _x3, _x4, _k3)==d3array(B, _x2, _x3, _x4)),(d3array9(B, _x2, _x3, _x4, _k3 + 1)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array9(A, _x2, _x3, _x4, _k3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _k3) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array9(B, _x2, _x3, _x4, _k3)==d3array(B, _x2, _x3, _x4)),(d3array9(B, _x2, _x3, _x4, _k3 + 1)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k3) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k3 + 1) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3)),
                                        (d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k3) ==
                                        d3array(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_x3!376 >= 0),
                                        Not(_x2!375 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_x4!374 >= 0),
                                        d3array9(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        1 + _k3) ==
                                        d3array5(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        _N2(_k3),
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                    Or(Not(_x3!376 >= 0),
                                       Not(_x2!375 >= 0),
                                       Not(_k3 >= 0),
                                       Not(_x4!374 >= 0),
                                       d3array9(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        1 + _k3) ==
                                       d3array5(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        _N2(_k3),
                                        _k3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                    Not(_x3!376 >= 0),
                                    Not(_x2!375 >= 0),
                                    Not(_k3 >= 0),
                                    Not(_x4!374 >= 0),
                                    d3array9(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        1 + _k3) ==
                                    d3array5(B,
                                        _x2!375,
                                        _x3!376,
                                        _x4!374,
                                        _N2(_k3),
                                        _k3))),
                         Or(Not(ForAll([_x3, _x2, _n3, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_x4 >= 0),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n3) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                            Not(_x3!376 >= 0),
                            Not(_x2!375 >= 0),
                            Not(_k3 >= 0),
                            Not(_x4!374 >= 0),
                            d3array9(B,
                                     _x2!375,
                                     _x3!376,
                                     _x4!374,
                                     1 + _k3) ==
                            d3array5(B,
                                     _x2!375,
                                     _x3!376,
                                     _x4!374,
                                     _N2(_k3),
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n3,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n3 >= 0,
                                        _x4 >= 0))),
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n3 + 1) ==
                                        d3array5(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N2(_n3),
                                        _n3)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1) + 1) ==
                                        d3array9(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        1 + Var(1))),
                                        (d3array9(B,
                                        Var(2),
                                        Var(3),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:19:15
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == d3array9(A, _n3, _n2, _n1, _N3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == d3array9(A, _n3, _n2, _n1, _N3)))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == d3array9(A, _n3, _n2, _n1, _N3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, 0) == d3array9(A, _n3, _n2, _n1, _N3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3, _x2, _x4],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x4 >= 0),
                               d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                               d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                 Or(Not(_n2!6 >= 0),
                    Not(_n3!7 >= 0),
                    Not(_n1!8 >= 0),
                    d3array18(A, _n3!7, _n2!6, _n1!8, 0) ==
                    d3array9(A, _n3!7, _n2!6, _n1!8, _N3)))),
   rewrite(Or(Not(ForAll([_x3, _x2, _x4],
                         Or(Not(_x3 >= 0),
                            Not(_x2 >= 0),
                            Not(_x4 >= 0),
                            d3array18(A, _x2, _x3, _x4, 0) ==
                            d3array9(A, _x2, _x3, _x4, _N3)))),
              Or(Not(_n2!6 >= 0),
                 Not(_n3!7 >= 0),
                 Not(_n1!8 >= 0),
                 d3array18(A, _n3!7, _n2!6, _n1!8, 0) ==
                 d3array9(A, _n3!7, _n2!6, _n1!8, _N3))) ==
           Or(Not(ForAll([_x3, _x2, _x4],
                         Or(Not(_x3 >= 0),
                            Not(_x2 >= 0),
                            Not(_x4 >= 0),
                            d3array18(A, _x2, _x3, _x4, 0) ==
                            d3array9(A, _x2, _x3, _x4, _N3)))),
              Not(_n2!6 >= 0),
              Not(_n3!7 >= 0),
              Not(_n1!8 >= 0),
              d3array18(A, _n3!7, _n2!6, _n1!8, 0) ==
              d3array9(A, _n3!7, _n2!6, _n1!8, _N3))),
   Or(Not(ForAll([_x3, _x2, _x4],
                 Or(Not(_x3 >= 0),
                    Not(_x2 >= 0),
                    Not(_x4 >= 0),
                    d3array18(A, _x2, _x3, _x4, 0) ==
                    d3array9(A, _x2, _x3, _x4, _N3)))),
      Not(_n2!6 >= 0),
      Not(_n3!7 >= 0),
      Not(_n1!8 >= 0),
      d3array18(A, _n3!7, _n2!6, _n1!8, 0) ==
      d3array9(A, _n3!7, _n2!6, _n1!8, _N3))), mp(mp(mp~(mp(asserted(ForAll([_x3, _x2, _x4],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                     d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                     d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
             quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                               rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                       Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                               Implies(And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                       d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                               Or(Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  d3array18(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                  d3array9(A,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                         (ForAll([_x3, _x2, _x4],
                                 Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))) ==
                         (ForAll([_x3, _x2, _x4],
                                 Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                    d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                    d3array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3))))),
             ForAll([_x3, _x2, _x4],
                    Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
                       d3array18(A, _x2, _x3, _x4, 0) ==
                       d3array9(A, _x2, _x3, _x4, _N3)))),
          nnf-pos(refl(~(Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array18(A,
                                      Var(1),
                                      Var(2),
                                      Var(0),
                                      0) ==
                            d3array9(A,
                                     Var(1),
                                     Var(2),
                                     Var(0),
                                     _N3)),
                         Or(Not(And(Var(2) >= 0,
                                    Var(1) >= 0,
                                    Var(0) >= 0)),
                            d3array18(A,
                                      Var(1),
                                      Var(2),
                                      Var(0),
                                      0) ==
                            d3array9(A,
                                     Var(1),
                                     Var(2),
                                     Var(0),
                                     _N3)))),
                  ~(ForAll([_x3, _x2, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x4 >= 0)),
                              d3array18(A, _x2, _x3, _x4, 0) ==
                              d3array9(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _N3))),
                    ForAll([_x3, _x2, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x4 >= 0)),
                              d3array18(A, _x2, _x3, _x4, 0) ==
                              d3array9(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _N3))))),
          ForAll([_x3, _x2, _x4],
                 Or(Not(And(_x3 >= 0, _x2 >= 0, _x4 >= 0)),
                    d3array18(A, _x2, _x3, _x4, 0) ==
                    d3array9(A, _x2, _x3, _x4, _N3)))),
      quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(2) >=
                                        0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(2) >=
                                        0),
                                        Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))))),
..., and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            Not(ForAll([_n1, _n3, _n2],
                                       Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                         sk(~(Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))),
                              Not(Or(Not(And(_n1!8 >= 0,
..., and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            Not(ForAll([_n1, _n3, _n2],
                                       Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                         sk(~(Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))),
                              Not(Or(Not(And(_n1!8 >= 0,
..., and-elim(not-or-elim(mp~(mp(asserted(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                            Not(ForAll([_n1, _n3, _n2],
                                       Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                         sk(~(Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))),
                              Not(Or(Not(And(_n1!8 >= 0,
..., not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                 d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                sk(~(Not(ForAll([_n1, _n3, _n2],
                                Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                   d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                   d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))),
                     Not(Or(Not(And(_n1!8 >= 0,
                                    _n3!7 >= 0,
                                    _n2!6 >= 0)),
                            d3array18(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                 d3array(B, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                   d3array(B, _x2, _x3, _x4)))),
                     Not(Or(Not(And(_x3!8 >= 0,
                                    _x2!7 >= 0,
                                    _x4!6 >= 0)),
                            d3array18(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      0) ==
                            d3array(B, _x2!7, _x3!8, _x4!6))))),
                Not(Or(Not(And(_x3!8 >= 0,
                               _x2!7 >= 0,
                               _x4!6 >= 0)),
                       d3array18(B, _x2!7, _x3!8, _x4!6, 0) ==
                       d3array(B, _x2!7, _x3!8, _x4!6)))),
            Not(d3array18(B, _x2!7, _x3!8, _x4!6, 0) ==
                d3array(B, _x2!7, _x3!8, _x4!6))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0) ==
                                        d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _N3)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0) ==
                                       d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _N3))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0) ==
                                    d3array9(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _N3))),
                         Or(Not(ForAll([_x3, _x2, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_x4!6 >= 0),
                            d3array18(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      0) ==
                            d3array9(B,
                                     _x2!7,
                                     _x3!8,
                                     _x4!6,
                                     _N3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0) ==
                                        d3array9(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N3)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0) ==
                                        d3array9(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:26
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array14(A, _n3, _n2, _n1, 0, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k6) ==
                                 d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                sk(~(Not(ForAll([_n1, _n3, _n2],
                                Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                   d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!8 >= 0),
                                        d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                        d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Or(Not(_n2!6 >= 0),
                                       Not(_n3!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_n1!8 >= 0),
                                       d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                       d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Not(_n2!6 >= 0),
                                    Not(_n3!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_n1!8 >= 0),
                                    d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k6) ==
                                    d3array18(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                            Not(_n2!6 >= 0),
                            Not(_n3!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_n1!8 >= 0),
                            d3array14(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k6) ==
                            d3array18(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:32
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, 0, _k6) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, 0, _k6) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, 0, _k6) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(ForAll([_x3,_x2,_x1,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(_x1, _x2, _x3, _x4) == d3array18(_x1, _x2, _x3, _x4, _N6))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, 0, _k6) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                 d3array(B, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k6) ==
                                   d3array(B, _x2, _x3, _x4)))),
                     Not(Or(Not(And(_x3!8 >= 0,
                                    _x2!7 >= 0,
                                    _x4!6 >= 0)),
                            d3array14(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      0,
                                      _k6) ==
                            d3array(B, _x2!7, _x3!8, _x4!6))))),
                Not(Or(Not(And(_x3!8 >= 0,
                               _x2!7 >= 0,
                               _x4!6 >= 0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k6) ==
                                        d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k6) ==
                                       d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k6) ==
                                    d3array18(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_x4!6 >= 0),
                            d3array14(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      0,
                                      _k6) ==
                            d3array18(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n6) ==
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d3array14(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        0,
                                        Var(1)) ==
                                        d3array18(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:37
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array11(A, _n3, _n2, _n1, 0, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                        (ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                                Not(ForAll([_n1, _n3, _n2],
                                        Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))) ==
                                Not(ForAll([_n1, _n3, _n2],
                                        Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3))))),
                   Not(ForAll([_n1, _n3, _n2],
                              Or(Not(And(_n1 >= 0,
                                        _n3 >= 0,
                                        _n2 >= 0)),
                                 d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k5,
                                        _k6) ==
                                 d3array9(A,
                                        _n3,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_n1!8 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Or(Not(_n2!6 >= 0),
                                       Not(_n3!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_n1!8 >= 0),
                                       d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                       d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Not(_n2!6 >= 0),
                                    Not(_n3!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_n1!8 >= 0),
                                    d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        0,
                                        _k5,
                                        _k6) ==
                                    d3array14(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                            Not(_n2!6 >= 0),
                            Not(_n3!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_n1!8 >= 0),
                            d3array11(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      0,
                                      _k5,
                                      _k6) ==
                            d3array14(A,
                                      _n3!7,
                                      _n2!6,
                                      _n1!8,
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:40
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array11(A, _n3, _n2, _n1, _k4 + 1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array11(A, _n3, _n2, _n1, _k4 + 2, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3),
                                        d3array11(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        2 ==
                                        2 + _k4),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        (d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(d3array11(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k4 >=
                                        0) ==
                                        (_k4 >= -1)),
                                        Not(1 + _k4 >= 0) ==
                                        Not(_k4 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k4 ==
                                        2 + _k4),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        (d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k4 >= -1),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                        Or(Not(_n2!6 >= 0),
                                        Not(_n3!7 >= 0),
                                        Not(_n1!8 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!7,
                                        _n2!6,
                                        _n1!8,
                                        1 + _k4,
                                        _k5,
                                        _k6))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3)))

***********************
2017-05-14 23:19:44
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array11(B, _x2, _x3, _x4, 0, _k5, _k6) == d3array(B, _x2, _x3, _x4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array11(B, _x2, _x3, _x4, 0, _k5, _k6) == d3array(B, _x2, _x3, _x4)))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array11(B, _x2, _x3, _x4, 0, _k5, _k6) == d3array(B, _x2, _x3, _x4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array11(B, _x2, _x3, _x4, 0, _k5, _k6) == d3array(B, _x2, _x3, _x4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                                Not(ForAll([_x3, _x2, _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))) ==
                                Not(ForAll([_x3, _x2, _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4))))),
                   Not(ForAll([_x3, _x2, _x4],
                              Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                 d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                 d3array(B, _x2, _x3, _x4))))),
                sk(~(Not(ForAll([_x3, _x2, _x4],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x4 >= 0)),
                                   d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _k5,
                                        _k6) ==
                                   d3array(B, _x2, _x3, _x4)))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_x4!6 >= 0),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k5,
                                        _k6) ==
                                        d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Or(Not(_x3!8 >= 0),
                                       Not(_x2!7 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_x4!6 >= 0),
                                       d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k5,
                                        _k6) ==
                                       d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                    Not(_x3!8 >= 0),
                                    Not(_x2!7 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_x4!6 >= 0),
                                    d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        0,
                                        _k5,
                                        _k6) ==
                                    d3array14(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                            Not(_x3!8 >= 0),
                            Not(_x2!7 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_x4!6 >= 0),
                            d3array11(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      0,
                                      _k5,
                                      _k6) ==
                            d3array14(B,
                                      _x2!7,
                                      _x3!8,
                                      _x4!6,
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        0,
                                        _n5,
                                        _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-14 23:19:47
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array11(B, _x2, _x3, _x4, _k4 + 1, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array11(B, _x2, _x3, _x4, _k4 + 2, _k5, _k6)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array11(B, _x2, _x3, _x4, _k4 + 1, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array11(B, _x2, _x3, _x4, _k4 + 2, _k5, _k6)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array11(B, _x2, _x3, _x4, _k4 + 1, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array11(B, _x2, _x3, _x4, _k4 + 2, _k5, _k6)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array11(B, _x2, _x3, _x4, _k4 + 1, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array11(B, _x2, _x3, _x4, _k4 + 2, _k5, _k6)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        2 ==
                                        2 + _k4),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 1,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k4 + 2,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array11(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array11(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                       Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k4 >=
                                        0) ==
                                        (_k4 >= -1)),
                                        Not(1 + _k4 >= 0) ==
                                        Not(_k4 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k4 ==
                                        2 + _k4),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k4,
                                        _k5,
                                        _k6)),
                                        (d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        (d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6)) ==
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k4 >= -1),
                                        Not(_k6 >= 0),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        2 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n4,
                                        _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n4,
                                        _n5,
                                        _n6)))),
                                        Or(Not(_x3!8 >= 0),
                                        Not(_x2!7 >= 0),
                                        Not(_x4!6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1 + _k4 >= 0),
                                        Not(_k6 >= 0),
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + 1 + _k4,
                                        _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!7,
                                        _x3!8,
                                        _x4!6,
                                        1 + _k4,
                                        _k5,
                                        _k6))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x4,
                                        _n5,
                                        _n4,
                                        _n6],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n6 >= 0),
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:19:51
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array14(A, _n3, _n2, _n1, _k5, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array14(A, _n3, _n2, _n1, _k5 + 1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3),
                                        d3array14(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6)),
                                        (d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        (d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)),
                                        d3array14(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                       Or(Not(_n2!398 >= 0),
                                        Not(_n3!399 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_n1!400 >= 0),
                                        d3array14(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        1 + _k5,
                                        _k6) ==
                                        d3array11(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Or(Not(_n2!398 >= 0),
                                       Not(_n3!399 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_n1!400 >= 0),
                                       d3array14(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        1 + _k5,
                                        _k6) ==
                                       d3array11(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Not(_n2!398 >= 0),
                                    Not(_n3!399 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_n1!400 >= 0),
                                    d3array14(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        1 + _k5,
                                        _k6) ==
                                    d3array11(A,
                                        _n3!399,
                                        _n2!398,
                                        _n1!400,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                            Not(_n2!398 >= 0),
                            Not(_n3!399 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_n1!400 >= 0),
                            d3array14(A,
                                      _n3!399,
                                      _n2!398,
                                      _n1!400,
                                      1 + _k5,
                                      _k6) ==
                            d3array11(A,
                                      _n3!399,
                                      _n2!398,
                                      _n1!400,
                                      _N4(_k5, _k6),
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5 + 1,
                                        _n6) ==
                                        d3array11(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == d3array9(A, _n3, _n2, _n1, _N3)))

***********************
2017-05-14 23:20:00
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array14(B, _x2, _x3, _x4, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array14(B, _x2, _x3, _x4, _k5 + 1, _k6)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array14(B, _x2, _x3, _x4, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array14(B, _x2, _x3, _x4, _k5 + 1, _k6)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array14(B, _x2, _x3, _x4, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array14(B, _x2, _x3, _x4, _k5 + 1, _k6)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array14(A, _x2, _x3, _x4, _k5, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array14(B, _x2, _x3, _x4, _k5, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array14(B, _x2, _x3, _x4, _k5, _k6)==d3array(B, _x2, _x3, _x4)),(d3array14(B, _x2, _x3, _x4, _k5 + 1, _k6)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k5 + 1,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6)),
                                        (d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5 + 1,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array14(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k5,
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                       Or(Not(_x3!408 >= 0),
                                        Not(_x2!407 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_x4!406 >= 0),
                                        d3array14(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        1 + _k5,
                                        _k6) ==
                                        d3array11(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Or(Not(_x3!408 >= 0),
                                       Not(_x2!407 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_k5 >= 0),
                                       Not(_x4!406 >= 0),
                                       d3array14(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        1 + _k5,
                                        _k6) ==
                                       d3array11(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                    Not(_x3!408 >= 0),
                                    Not(_x2!407 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_k5 >= 0),
                                    Not(_x4!406 >= 0),
                                    d3array14(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        1 + _k5,
                                        _k6) ==
                                    d3array11(B,
                                        _x2!407,
                                        _x3!408,
                                        _x4!406,
                                        _N4(_k5, _k6),
                                        _k5,
                                        _k6))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_x4 >= 0),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n5,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                            Not(_x3!408 >= 0),
                            Not(_x2!407 >= 0),
                            Not(_k6 >= 0),
                            Not(_k5 >= 0),
                            Not(_x4!406 >= 0),
                            d3array14(B,
                                      _x2!407,
                                      _x3!408,
                                      _x4!406,
                                      1 + _k5,
                                      _k6) ==
                            d3array11(B,
                                      _x2!407,
                                      _x3!408,
                                      _x4!406,
                                      _N4(_k5, _k6),
                                      _k5,
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _n5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        And(_n5 >= 0,
                                        _x4 >= 0)))),
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n5 + 1,
                                        _n6) ==
                                        d3array11(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N4(_n5, _n6),
                                        _n5,
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:20:08
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==d3array9(A, _n3, _n2, _n1, _N3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==d3array9(A, _n3, _n2, _n1, _N3)))))

System try to prove 
ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==d3array9(A, _n3, _n2, _n1, _N3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),Implies((d3array18(A, _n3, _n2, _n1, _k6)==d3array9(A, _n3, _n2, _n1, _N3)),(d3array18(A, _n3, _n2, _n1, _k6 + 1)==d3array9(A, _n3, _n2, _n1, _N3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_n1, _n3, _n2],
                                       Implies(And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0)),
                                        Implies(d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3),
                                        d3array18(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6 + 1) ==
                                        d3array9(A,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N3)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6)),
                                        (d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        (d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        rewrite(Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6 + 1) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)) ==
                                        Or(Not(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3)),
                                        d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array18(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6) ==
                                        d3array9(A,
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N3),
                                        d3array18(A,
                                        Var(1),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                       Or(Not(_n2!416 >= 0),
                                        Not(_n3!417 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!418 >= 0),
                                        d3array18(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        1 + _k6) ==
                                        d3array14(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        _N5(_k6),
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Or(Not(_n2!416 >= 0),
                                       Not(_n3!417 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_n1!418 >= 0),
                                       d3array18(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        1 + _k6) ==
                                       d3array14(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        _N5(_k6),
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Not(_n2!416 >= 0),
                                    Not(_n3!417 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_n1!418 >= 0),
                                    d3array18(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        1 + _k6) ==
                                    d3array14(A,
                                        _n3!417,
                                        _n2!416,
                                        _n1!418,
                                        _N5(_k6),
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                            Not(_n2!416 >= 0),
                            Not(_n3!417 >= 0),
                            Not(_k6 >= 0),
                            Not(_n1!418 >= 0),
                            d3array18(A,
                                      _n3!417,
                                      _n2!416,
                                      _n1!418,
                                      1 + _k6) ==
                            d3array14(A,
                                      _n3!417,
                                      _n2!416,
                                      _n1!418,
                                      _N5(_k6),
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array18(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6 + 1) ==
                                        d3array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1) + 1) ==
                                        d3array18(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        1 + Var(1))),
                                        (d3array18(A,
                                        Var(2),
                                        Var(3),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, _N6) == d3array9(A, _n3, _n2, _n1, _N3)))

***********************
2017-05-14 23:20:16
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array18(B, _x2, _x3, _x4, _k6)==d3array(B, _x2, _x3, _x4)),(d3array18(B, _x2, _x3, _x4, _k6 + 1)==d3array(B, _x2, _x3, _x4)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array18(B, _x2, _x3, _x4, _k6)==d3array(B, _x2, _x3, _x4)),(d3array18(B, _x2, _x3, _x4, _k6 + 1)==d3array(B, _x2, _x3, _x4)))))

System try to prove 
ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array18(B, _x2, _x3, _x4, _k6)==d3array(B, _x2, _x3, _x4)),(d3array18(B, _x2, _x3, _x4, _k6 + 1)==d3array(B, _x2, _x3, _x4)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, _N6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array18(A, _x2, _x3, _x4, _k6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _k6) == d3array(B, _x2, _x3, _x4))))
_s.add(p < n)
_s.add(Not(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),Implies((d3array18(B, _x2, _x3, _x4, _k6)==d3array(B, _x2, _x3, _x4)),(d3array18(B, _x2, _x3, _x4, _k6 + 1)==d3array(B, _x2, _x3, _x4)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _x4 >= 0)),
                                        Implies(d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k6) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _k6 + 1) ==
                                        d3array(B,
                                        _x2,
                                        _x3,
                                        _x4)))))),
                   monotonicity(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6 + 1) ==
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6)),
                                        (d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        (d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        1 + _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)),
                                        d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6 + 1) ==
                                        d3array(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Or(Not(d3array18(B,
                                        Var(1),
                                        Var(2),
                                        Var(0),
                                        _k6) ==
                                        d3array(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                       Or(Not(_x3!424 >= 0),
                                        Not(_x2!423 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_x4!422 >= 0),
                                        d3array18(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        1 + _k6) ==
                                        d3array14(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        _N5(_k6),
                                        _k6)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Or(Not(_x3!424 >= 0),
                                       Not(_x2!423 >= 0),
                                       Not(_k6 >= 0),
                                       Not(_x4!422 >= 0),
                                       d3array18(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        1 + _k6) ==
                                       d3array14(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        _N5(_k6),
                                        _k6))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                    Not(_x3!424 >= 0),
                                    Not(_x2!423 >= 0),
                                    Not(_k6 >= 0),
                                    Not(_x4!422 >= 0),
                                    d3array18(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        1 + _k6) ==
                                    d3array14(B,
                                        _x2!423,
                                        _x3!424,
                                        _x4!422,
                                        _N5(_k6),
                                        _k6))),
                         Or(Not(ForAll([_x3, _x2, _n6, _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_x4 >= 0),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        1 + _n6) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                            Not(_x3!424 >= 0),
                            Not(_x2!423 >= 0),
                            Not(_k6 >= 0),
                            Not(_x4!422 >= 0),
                            d3array18(B,
                                      _x2!423,
                                      _x3!424,
                                      _x4!422,
                                      1 + _k6) ==
                            d3array14(B,
                                      _x2!423,
                                      _x3!424,
                                      _x4!422,
                                      _N5(_k6),
                                      _k6))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n6,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n6 >= 0,
                                        _x4 >= 0))),
                                        d3array18(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _n6 + 1) ==
                                        d3array14(B,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _N5(_n6),
                                        _n6)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d3array18(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1) + 1) ==
                                        d3array18(B,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        1 + Var(1))),
                                        (d3array18(B,
                                        Var(2),
                                        Var(3),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _N6) == d3array(B, _x2, _x3, _x4)))

***********************
2017-05-14 23:20:24
***********************

Command--Prove 

Parameters--

 Pre Condition--['p < n']
 Post Condition--['ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==d3array18(A, _n6, _n5, _n4, _N6))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==d3array18(A, _n6, _n5, _n4, _N6))))

System try to prove 
ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==d3array18(A, _n6, _n5, _n4, _N6))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j9=Function('j9',IntSort(),IntSort())
_n6=Int('_n6')
j1=Int('j1')
_x4=Int('_x4')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
k14=Function('k14',IntSort(),IntSort(),IntSort())
k18=Function('k18',IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
k1=Int('k1')
k5=Function('k5',IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort())
main=Int('main')
A=Const('A',arraySort)
B=Const('B',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort())
_N6=Const('_N6',IntSort())
_N4=Function('_N4',IntSort(),IntSort(),IntSort())
_N5=Function('_N5',IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
j18=Function('j18',IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
p1=Int('p1')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n4=Int('_n4')
n=Int('n')
p=Int('p')
B1=Const('B1',arraySort)
n1=Int('n1')
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k6=Int('_k6')
_k5=Int('_k5')
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array1=Function('d3array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array18=Function('d3array18',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array2=Function('d3array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array5=Function('d3array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array9=Function('d3array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array=Function('d3array',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d3array11=Function('d3array11',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d3array14=Function('d3array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(A, _x2, _x3, _x4) == d3array18(A, _x2, _x3, _x4, _N6))))
_s.add(i1 == _N6)
_s.add(k1 == k18(_N6))
_s.add(j1 == j18(_N6))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array1(B, _x2, _x3, _x4) == d3array18(B, _x2, _x3, _x4, _N6))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _n1 + 1, _n2, _n3) == d3array2(A, _n3, _n2, _n1, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_x4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))),d3array2(B, _x2, _x3, _x4, _n1 + 1, _n2, _n3) == d3array2(B, _x2, _x3, _x4, _n1, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(A, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(A, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, 0, _n2, _n3) == d3array5(B, _x2, _x3, _x4, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),_N1(_n2, _n3) >= p)))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3),And(_n1>=0,And(_n3>=0,_n2>=0))),_f(_n1) < p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Or(_N1(_n2, _n3)==0,_N1(_n2, _n3) - 1 < p))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),k5(_n2 + 1, _n3) == _N1(_n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n3],k5(0, _n3) == 0))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(A, _x2, _x3, _x4, 0, _n3) == d3array9(A, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, 0, _n3) == d3array9(B, _x2, _x3, _x4, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= p)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < p)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < p))))
_s.add(ForAll([_n3],Implies(_n3>=0,k9(_n3 + 1) == k5(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j9(_n3 + 1) == _N2(_n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(k9(0) == 0)
_s.add(j9(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(A, _x2, _x3, _x4, 0) == d3array(A, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, 0) == d3array(B, _x2, _x3, _x4))))
_s.add(_N3 >= p)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < p)))
_s.add(Or(_N3==0,_N3 - 1 < p))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(A, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(A, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_x4,_n5,_n4,_n6],Implies(And(_x3>=0,And(_x2>=0,And(_x4>=0,And(_n5>=0,And(_n4>=0,_n6>=0))))),d3array11(B, _x2, _x3, _x4, _n4 + 1, _n5, _n6) == d3array11(B, _x2, _x3, _x4, _n4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(A, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(A, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, 0, _n5, _n6) == d3array14(B, _x2, _x3, _x4, _n5, _n6))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),_N4(_n5, _n6) >= n)))
_s.add(ForAll([_n5,_n4,_n6],Implies(And(_n4 < _N4(_n5, _n6),And(_n5>=0,And(_n4>=0,_n6>=0))),_f(_n4) < n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),Or(_N4(_n5, _n6)==0,_N4(_n5, _n6) - 1 < n))))
_s.add(ForAll([_n5,_n6],Implies(And(_n5>=0,_n6>=0),k14(_n5 + 1, _n6) == _N4(_n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n6],k14(0, _n6) == 0))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(A, _x2, _x3, _x4, 0, _n6) == d3array18(A, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, 0, _n6) == d3array18(B, _x2, _x3, _x4, _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,_N5(_n6) >= n)))
_s.add(ForAll([_n5,_n6],Implies(And(_n5 < _N5(_n6),And(_n5>=0,_n6>=0)),_f(_n5) < n)))
_s.add(ForAll([_n6],Implies(_n6>=0,Or(_N5(_n6)==0,_N5(_n6) - 1 < n))))
_s.add(ForAll([_n6],Implies(_n6>=0,k18(_n6 + 1) == k14(_N5(_n6), _n6))))
_s.add(ForAll([_n6],Implies(_n6>=0,j18(_n6 + 1) == _N5(_n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(k18(0) == 0)
_s.add(j18(0) == 0)
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(A, _x2, _x3, _x4, 0) == d3array9(A, _x2, _x3, _x4, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, 0) == d3array9(B, _x2, _x3, _x4, _N3))))
_s.add(_N6 >= n)
_s.add(ForAll([_n6],Implies(And(_n6 < _N6,_n6>=0),_f(_n6) < n)))
_s.add(Or(_N6==0,_N6 - 1 < n))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(A, _x2, _x3, _x4, _n3 + 1) == d3array5(A, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array9(B, _x2, _x3, _x4, _n3 + 1) == d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(A, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(A, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array5(B, _x2, _x3, _x4, _n2 + 1, _n3) == d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3) == d3array2(A, _n3, _n2, _n1, _N1(_n2, _n3), _n2, _n3))))
_s.add(ForAll([_x3,_x2,_n3,_n2,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,And(_n2>=0,_x4>=0)))),d3array2(B, _x2, _x3, _x4, _N1(_n2, _n3), _n2, _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array5(A, _n3, _n2, _n1, _N2(_n3), _n3) == d3array5(A, _n3, _n2, _n1, _N2(_n3), _n2))))
_s.add(ForAll([_x3,_x2,_n3,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n3>=0,_x4>=0))),d3array5(B, _x2, _x3, _x4, _N2(_n3), _n3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array9(A, _n3, _n2, _n1, _N3) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array9(B, _x2, _x3, _x4, _N3) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(A, _x2, _x3, _x4, _n6 + 1) == d3array14(A, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array18(B, _x2, _x3, _x4, _n6 + 1) == d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(A, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(A, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array14(B, _x2, _x3, _x4, _n5 + 1, _n6) == d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6))))
_s.add(ForAll([_n5,_n6,_n1,_n3,_n2],Implies(And(_n5>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),d3array11(A, _n3, _n2, _n1, _N4(_n5, _n6), _n5, _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_n5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,And(_n5>=0,_x4>=0)))),d3array11(B, _x2, _x3, _x4, _N4(_n5, _n6), _n5, _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n6,_n1,_n3,_n2],Implies(And(_n6>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d3array14(A, _n3, _n2, _n1, _N5(_n6), _n6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_n6,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n6>=0,_x4>=0))),d3array14(B, _x2, _x3, _x4, _N5(_n6), _n6) == d3array(B, _x2, _x3, _x4))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d3array18(A, _n3, _n2, _n1, _N6) == d3array9(A, _n3, _n2, _n1, _N3))))
_s.add(ForAll([_x3,_x2,_x4],Implies(And(_x3>=0,And(_x2>=0,_x4>=0)),d3array18(B, _x2, _x3, _x4, _N6) == d3array(B, _x2, _x3, _x4))))
_s.add(A1 == A)
_s.add(p1 == p)
_s.add(B1 == B)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k6>=0)
_s.add(_k5>=0)
_s.add(ForAll([_n2 ,_n3],_N1(_n2, _n3)>=0))
_s.add(ForAll([_n3],_N2(_n3)>=0))
_s.add(_N3>=0)
_s.add(ForAll([_n5 ,_n6],_N4(_n5, _n6)>=0))
_s.add(ForAll([_n6],_N5(_n6)>=0))
_s.add(_N6>=0)
_s.add(p < n)
_s.add(Not(ForAll([_n5,_n4,_n6],Implies(And(_n5>=0,And(_n4>=0,_n6>=0)),(d3array18(A, _n6, _n5, _n4, _N6)==d3array18(A, _n6, _n5, _n4, _N6))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/copy-partial-4-u/copy-partial-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/copy-partial-4-u/copy-partial-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[asserted(Not(ForAll([_n5, _n4, _n6],
                    Implies(And(_n5 >= 0,
                                And(_n4 >= 0, _n6 >= 0)),
                            d3array18(A, _n6, _n5, _n4, _N6) ==
                            d3array18(A, _n6, _n5, _n4, _N6))))), trans(monotonicity(trans(quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6)) ==
                                        True),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6)) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        True)),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        True) ==
                                        True),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6) ==
                                        d3array18(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        _N6)) ==
                                        True),
                                     (ForAll([_n5, _n4, _n6],
                                        Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6)))) ==
                                     (ForAll([_n1, _n3, _n2],
                                        True))),
                         elim-unused((ForAll([_n1, _n3, _n2],
                                        True)) ==
                                     True),
                         (ForAll([_n5, _n4, _n6],
                                 Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                        d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6)))) ==
                         True),
                   Not(ForAll([_n5, _n4, _n6],
                              Implies(And(_n5 >= 0,
                                        And(_n4 >= 0,
                                        _n6 >= 0)),
                                      d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6) ==
                                      d3array18(A,
                                        _n6,
                                        _n5,
                                        _n4,
                                        _N6)))) ==
                   Not(True)),
      rewrite(Not(True) == False),
      Not(ForAll([_n5, _n4, _n6],
                 Implies(And(_n5 >= 0,
                             And(_n4 >= 0, _n6 >= 0)),
                         d3array18(A, _n6, _n5, _n4, _N6) ==
                         d3array18(A, _n6, _n5, _n4, _N6)))) ==
      False), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:41
***********************

Command--Translate 

Parameters--
 File Name--multi/diff-2-n-u/diff-2-n-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j2(_n1 + 1)=j2(_n1) + 1,j2(0)=j
 Closed Form Solution
_n1 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i5(_n2 + 1)=i5(_n2) + 1,i5(0)=i
 Closed Form Solution
_n2 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j7(_n3 + 1)=j7(_n3) + 1,j7(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i10(_n4 + 1)=i10(_n4) + 1,i10(0)=i
 Closed Form Solution
_n4 + i

***********************
2017-05-15 00:01:44
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(A, _x2, _x3, 0) ==
                           d2array(A, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(A, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(A, Var(0), Var(1), 0) ==
                          d2array(A, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(A, _x2, _x3, 0) ==
                          d2array(A, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(A, _x2, _x3, 0) ==
             d2array(A, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(A, _x2, _x3, 0) ==
                               d2array(A, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(A,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(A, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(A, _x2, _x3, 0) ==
                              d2array(A, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(A, _x2, _x3, 0) ==
                 d2array(A, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(C, _x2, _x3, 0) ==
                           d2array(C, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(C, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(C, Var(0), Var(1), 0) ==
                          d2array(C, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(C, _x2, _x3, 0) ==
                               d2array(C, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(C, _x2, _x3, 0) ==
                          d2array(C, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(C, _x2, _x3, 0) ==
             d2array(C, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(C, _x2, _x3, 0) ==
                               d2array(C, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(C,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(C,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(C, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(C, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(C, _x2, _x3, 0) ==
                                   d2array(C, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(C, _x2, _x3, 0) ==
                              d2array(C, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(C, _x2, _x3, 0) ==
                 d2array(C, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:50
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2],
                   Implies(And(_x3 >= 0, _x2 >= 0),
                           d2array5(B, _x2, _x3, 0) ==
                           d2array(B, _x2, _x3)))),
   quant-intro(rewrite(Implies(And(Var(1) >= 0, Var(0) >= 0),
                               d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                               d2array(B, Var(0), Var(1))) ==
                       Or(Not(And(Var(1) >= 0, Var(0) >= 0)),
                          d2array5(B, Var(0), Var(1), 0) ==
                          d2array(B, Var(0), Var(1)))),
               (ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(B, _x2, _x3, 0) ==
                               d2array(B, _x2, _x3)))) ==
               (ForAll([_x3, _x2],
                       Or(Not(And(_x3 >= 0, _x2 >= 0)),
                          d2array5(B, _x2, _x3, 0) ==
                          d2array(B, _x2, _x3))))),
   ForAll([_x3, _x2],
          Or(Not(And(_x3 >= 0, _x2 >= 0)),
             d2array5(B, _x2, _x3, 0) ==
             d2array(B, _x2, _x3)))), mp(asserted(Not(ForAll([_x3, _x2],
                       Implies(And(_x3 >= 0, _x2 >= 0),
                               d2array5(B, _x2, _x3, 0) ==
                               d2array(B, _x2, _x3))))),
   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                    Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                       d2array5(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                       d2array(B,
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2],
                                    Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                            (ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                       d2array(B, _x2, _x3))))),
                Not(ForAll([_x3, _x2],
                           Implies(And(_x3 >= 0, _x2 >= 0),
                                   d2array5(B, _x2, _x3, 0) ==
                                   d2array(B, _x2, _x3)))) ==
                Not(ForAll([_x3, _x2],
                           Or(Not(And(_x3 >= 0, _x2 >= 0)),
                              d2array5(B, _x2, _x3, 0) ==
                              d2array(B, _x2, _x3))))),
   Not(ForAll([_x3, _x2],
              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                 d2array5(B, _x2, _x3, 0) ==
                 d2array(B, _x2, _x3))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(A, _x2, _x3, 0, _k2) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array2(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array2(A, _x2!4, _x3!5, 0, _k2) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array2(A, _x2!4, _x3!5, 0, _k2) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                        d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k2 >= 0),
                                       d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                       d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k2 >= 0),
                                    d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k2) ==
                                    d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k2 >= 0),
                            d2array2(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array5(A, _x2!4, _x3!5, _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n2) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array5(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:54
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(A, _x2, _x3, _k1 + 1, _k2)==d2array(A, _x2, _x3)),(d2array2(A, _x2, _x3, _k1 + 2, _k2)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array2(A,
                                        _x2,
                                        _x3,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A, _x2, _x3),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array2(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        (d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:01:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)

System try to prove 
d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(d2array2(C, _k2, 0, 1, _k2) == d2array2(A, _k2, 0, 0, _k2) - d2array2(B, _k2, 0, 0, _k2)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(_k2 >= 0),
                    d2array2(B, _k2, 0, 0, _k2) +
                    -1*d2array2(A, _k2, 0, 0, _k2) +
                    d2array2(C, _k2, 0, 1 + 0, _k2) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2)),
                                        rewrite(d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                        (d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        0) ==
                                        (d2array2(C,
                                        _k2,
                                        0,
                                        1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) ==
                                        0)),
                                        Or(Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2) ==
                                        0) ==
                                        Or(False,
                                        Not(_k2 >= 0),
                                        d2array2(C,
                                        _k2,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., asserted(_k2 >= 0), mp(mp(asserted(Not(d2array2(C, _k2, 0, 1, _k2) ==
                   d2array2(A, _k2, 0, 0, _k2) -
                   d2array2(B, _k2, 0, 0, _k2))),
      monotonicity(monotonicity(rewrite(d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        0,
                                        0,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        0,
                                        0,
                                        _k2)),
                                (d2array2(C, _k2, 0, 1, _k2) ==
                                 d2array2(A, _k2, 0, 0, _k2) -
                                 d2array2(B, _k2, 0, 0, _k2)) ==
                                (d2array2(C, _k2, 0, 1, _k2) ==
                                 d2array2(A, _k2, 0, 0, _k2) +
                                 -1*
                                 d2array2(B, _k2, 0, 0, _k2))),
                   Not(d2array2(C, _k2, 0, 1, _k2) ==
                       d2array2(A, _k2, 0, 0, _k2) -
                       d2array2(B, _k2, 0, 0, _k2)) ==
                   Not(d2array2(C, _k2, 0, 1, _k2) ==
                       d2array2(A, _k2, 0, 0, _k2) +
                       -1*d2array2(B, _k2, 0, 0, _k2))),
      Not(d2array2(C, _k2, 0, 1, _k2) ==
          d2array2(A, _k2, 0, 0, _k2) +
          -1*d2array2(B, _k2, 0, 0, _k2))),
   monotonicity(rewrite((d2array2(C, _k2, 0, 1, _k2) ==
                         d2array2(A, _k2, 0, 0, _k2) +
                         -1*d2array2(B, _k2, 0, 0, _k2)) ==
                        (d2array2(C, _k2, 0, 1, _k2) +
                         -1*d2array2(A, _k2, 0, 0, _k2) +
                         d2array2(B, _k2, 0, 0, _k2) ==
                         0)),
                Not(d2array2(C, _k2, 0, 1, _k2) ==
                    d2array2(A, _k2, 0, 0, _k2) +
                    -1*d2array2(B, _k2, 0, 0, _k2)) ==
                Not(d2array2(C, _k2, 0, 1, _k2) +
                    -1*d2array2(A, _k2, 0, 0, _k2) +
                    d2array2(B, _k2, 0, 0, _k2) ==
                    0)),
   Not(d2array2(C, _k2, 0, 1, _k2) +
       -1*d2array2(A, _k2, 0, 0, _k2) +
       d2array2(B, _k2, 0, 0, _k2) ==
       0)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:01:59
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

System try to prove 
Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(1 + _k1 >= 0),
                    Not(_k2 >= 0),
                    d2array2(B, _k2, 1 + _k1, 1 + _k1, _k2) +
                    -1*
                    d2array2(A, _k2, 1 + _k1, 1 + _k1, _k2) +
                    d2array2(C,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   monotonicity(trans(monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        rewrite(d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        0) ==
                                        (d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2) +
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) ==
                                        0)),
                                   Or(Not(1 + _k1 >= 0),
                                      Not(_k2 >= 0),
                                      d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      -1*
                                      d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                      d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2) ==
                                      0) ==
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., asserted(_k2 >= 0), mp(not-or-elim(mp(asserted(Not(Implies(d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                       d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                       d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2),
                                       d2array2(C,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2) ==
                                       d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                       d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2)))),
                  monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2)),
                                        rewrite(d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2)),
                                        (d2array2(C,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2)) ==
                                        (d2array2(C,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        _k1,
                                        _k1,
                                        _k2))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d2array2(C,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(C,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2)),
                                        trans(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 1 ==
                                        1 + _k1),
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        rewrite(d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2)),
                                        d2array2(A,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        1 + _k1,
                                        1 + _k1,
                                        _k2) +
                                        -1*
                                        d2array2(B,
                                        _k2,
                                        1 + _k1,
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:02:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d2array2(C, _k2, _k1, _k1 + 1, _k2)==d2array2(A, _k2, _k1, _k1, _k2) - d2array2(B, _k2, _k1, _k1, _k2)),(d2array2(C, _k2, _k1 + 1, _k1 + 2, _k2)==d2array2(A, _k2, _k1 + 1, _k1 + 1, _k2) - d2array2(B, _k2, _k1 + 1, _k1 + 1, _k2)))

System try to prove 
Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(Implies(ForAll([_n1,_k2],Implies(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))),ForAll([_n1,_k2],Implies(And(And(And(And(And(_n1>=0,_k2>=0),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d2array2(C, _k2, _n1, _n1 + 1, _k2) == d2array2(A, _k2, _n1, _n1, _k2) - d2array2(B, _k2, _n1, _n1, _k2))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n1, _n2],
                            Or(Not(_n1 >= 0),
                               Not(_n2 >= 0),
                               d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               -1*
                               d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) +
                               d2array2(C,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2) ==
                               0))),
                 Or(Not(_n1!5 >= 0),
                    Not(_k2!4 >= 0),
                    d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
                    -1*
                    d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
                    d2array2(C,
                             _k2!4,
                             _n1!5,
                             1 + _n1!5,
                             _k2!4) ==
                    0))),
   rewrite(Or(Not(ForAll([_n1, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n2 >= 0),
                            d2array2(B, _n2, _n1, _n1, _n2) +
                            -1*
                            d2array2(A, _n2, _n1, _n1, _n2) +
                            d2array2(C,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2) ==
                            0))),
              Or(Not(_n1!5 >= 0),
                 Not(_k2!4 >= 0),
                 d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
                 -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
                 d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
                 0)) ==
           Or(Not(ForAll([_n1, _n2],
                         Or(Not(_n1 >= 0),
                            Not(_n2 >= 0),
                            d2array2(B, _n2, _n1, _n1, _n2) +
                            -1*
                            d2array2(A, _n2, _n1, _n1, _n2) +
                            d2array2(C,
                                     _n2,
                                     _n1,
                                     1 + _n1,
                                     _n2) ==
                            0))),
              Not(_n1!5 >= 0),
              Not(_k2!4 >= 0),
              d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
              -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
              d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
              0)),
   Or(Not(ForAll([_n1, _n2],
                 Or(Not(_n1 >= 0),
                    Not(_n2 >= 0),
                    d2array2(B, _n2, _n1, _n1, _n2) +
                    -1*d2array2(A, _n2, _n1, _n1, _n2) +
                    d2array2(C, _n2, _n1, 1 + _n1, _n2) ==
                    0))),
      Not(_n1!5 >= 0),
      Not(_k2!4 >= 0),
      d2array2(B, _k2!4, _n1!5, _n1!5, _k2!4) +
      -1*d2array2(A, _k2!4, _n1!5, _n1!5, _k2!4) +
      d2array2(C, _k2!4, _n1!5, 1 + _n1!5, _k2!4) ==
      0)), mp(mp(mp~(mp(mp(asserted(ForAll([_n1, _n2],
                                Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2) ==
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2) -
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _n1,
                                        _n2)))),
                quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                  Implies(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                  Or(Not(And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                     d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                     -1*
                                     d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                            (ForAll([_n1, _n2],
                                    Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., and-elim(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_n1,
                                        _k2],
                                        Implies(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2))),
                                        ForAll([_n1, _k2],
                                        Implies(And(And(And(And(And(_n1 >=
                                        0,
                                        _k2 >= 0),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d2array2(C,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _n1,
                                        _k2)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((Var(1) <
                                        _L1) ==
                                        Not(_L1 <= Var(1))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1)))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(1))) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0),
                                        Var(1) < _L1) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0) ==
                                        And(Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0))),
                                        rewrite(d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))),
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        (d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)))),
                                        Implies(And(And(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Var(1) < _L1),
                                        _L1 > 0),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        Var(1) + 1,
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) -
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(1)),
                                        Not(_L1 <= 0)),
                                        d2array2(C,
                                        Var(0),
                                        Var(1),
                                        1 + Var(1),
                                        Var(0)) ==
                                        d2array2(A,
                                        Var(0),
                                        Var(1),
                                        Var(1),
                                        Var(0)) +
                                        -1*
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2)))

***********************
2017-05-15 00:02:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array2(B, _x2, _x3, 0, _k2) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array2(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k2) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array2(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k2) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array2(B, _x2!4, _x3!5, 0, _k2) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array2(B, _x2!4, _x3!5, 0, _k2) ==
                d2array(B, _x2!4, _x3!5))), mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                       d2array(B,
                                        _x2!4,
                                        _x3!5)))),
                      rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                 Or(Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                    d2array(B, _x2!4, _x3!5))) ==
                              Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                 Not(_x3!5 >= 0),
                                 Not(_x2!4 >= 0),
                                 d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _k2) ==
                                 d2array(B, _x2!4, _x3!5))),
                      Or(Not(ForAll([_x3, _x2],
                                    Or(Not(_x3 >= 0),
                                       Not(_x2 >= 0),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                       d2array(B, _x2, _x3)))),
                         Not(_x3!5 >= 0),
                         Not(_x2!4 >= 0),
                         d2array5(B, _x2!4, _x3!5, _k2) ==
                         d2array(B, _x2!4, _x3!5))),
                   mp(mp(mp~(mp(asserted(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                                quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))),
                             nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                     ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))),
                                       ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3))))),
                             ForAll([_x3, _x2],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                       d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                       d2array(B, _x2, _x3)))),
                         quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Or(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:02:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(_k2>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array2(B, _x2, _x3, _k1 + 1, _k2)==d2array(B, _x2, _x3)),(d2array2(B, _x2, _x3, _k1 + 2, _k2)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array2(B,
                                        _x2,
                                        _x3,
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B, _x2, _x3),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array2(B,
                                        Var(0),
                                        Var(1),
                                        _k1 + 2,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array2(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k1,
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array2(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2)),
                                        (d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        (d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(1 + _k1 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        1 + _n1,
                                        _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _n1,
                                        _n2)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k1 >= -1),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k1,
                                        _k2) ==
                                        d2array2(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k1,
                                        _k2))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:02:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(A, _x2, _x3, _k2)==d2array(A, _x2, _x3)),(d2array5(A, _x2, _x3, _k2 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array5(A,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(A, _x2, _x3),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _k2 + 1) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2)),
                                        (d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                       Or(Not(_x3!231 >= 0),
                                        Not(_x2!230 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                        d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Or(Not(_x3!231 >= 0),
                                       Not(_x2!230 >= 0),
                                       Not(_k2 >= 0),
                                       d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                       d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Not(_x3!231 >= 0),
                                    Not(_x2!230 >= 0),
                                    Not(_k2 >= 0),
                                    d2array5(A,
                                        _x2!230,
                                        _x3!231,
                                        1 + _k2) ==
                                    d2array2(A,
                                        _x2!230,
                                        _x3!231,
                                        _N1(_k2),
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                            Not(_x3!231 >= 0),
                            Not(_x2!230 >= 0),
                            Not(_k2 >= 0),
                            d2array5(A,
                                     _x2!230,
                                     _x3!231,
                                     1 + _k2) ==
                            d2array2(A,
                                     _x2!230,
                                     _x3!231,
                                     _N1(_k2),
                                     _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _n2 + 1) ==
                                        d2array2(A,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        (d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(A,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:02:16
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, _k2) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array(C, _k2 - 1, _n1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array(C, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-15 00:04:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d2array5(C, 0, _n1, 1) == d2array2(A, 0, _n1, _N1(0), 0) - d2array2(B, 0, _n1, _N1(0), 0)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                d2array5(C, 0, _n1!2, 1)),
                            d2array2(C, 0, _n1!2, _N1(0), 0) +
                            -1*d2array5(C, 0, _n1!2, 1) >=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)))),
                                      trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1)),
                                        (d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        (d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        False,
                                        False,
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        rewrite(Or(Not(_n1!2 >=
                                        0),
                                        False,
                                        False,
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0)) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1 + 0) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        d2array2(C,
                                        0,
                                        _n1!2,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) ==
                                        0,
                                        Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) <=
                                        0),
                                        Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array5(C,
                                        0,
                                        _n1!2,
                                        1) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d2array5(C,
                                        0,
                                        _n1,
                                        1) ==
                                        d2array2(A,
                                        0,
                                        _n1,
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        _n1,
                                        _N1(0),
                                        0))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)),
                                        (d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        (d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0))),
                                        Implies(Var(0) >= 0,
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0) -
                                        d2array2(B,
                                        0,
                                        Var(0),
                                        _N1(0),
                                        0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d2array5(C,
                                        0,
                                        Var(0),
                                        1) ==
                                        d2array2(A,
                                        0,
..., unit-resolution(th-lemma(Or(Not(d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                -1*
                                d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                0),
                            d2array2(B, 0, _n1!2, _N1(0), 0) +
                            -1*
                            d2array2(A, 0, _n1!2, _N1(0), 0) +
                            d2array2(C, 0, _n1!2, _N1(0), 0) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        Or(Not(_n1!2 >= 0),
                                        False,
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0)),
                                        rewrite(Or(Not(_n1!2 >=
                                        0),
                                        False,
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0)),
                                        Or(Not(_n1!2 >= 0),
                                        Not(0 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0) ==
                                        Or(Not(_n1!2 >= 0),
                                        d2array2(B,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        -1*
                                        d2array2(A,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) +
                                        d2array2(C,
                                        0,
                                        _n1!2,
                                        _N1(0),
                                        0) ==
                                        0)),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:04:28
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d2array5(C, _k2 - 1, _n1, _k2)==d2array2(A, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1) - d2array2(B, _k2 - 1, _n1, _N1(_k2 - 1), _k2 - 1)),(d2array5(C, _k2, _n1, _k2 + 1)==d2array2(A, _k2, _n1, _N1(_k2), _k2) - d2array2(B, _k2, _n1, _N1(_k2), _k2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2)),
                            d2array2(C,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) +
                            -1*
                            d2array5(C, _k2, _n1!2, 1 + _k2) >=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)))),
                                      trans(monotonicity(rewrite(Or(Not(_n1!2 >=
                                        0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)) ==
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(C,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2))) ==
..., unit-resolution(unit-resolution(th-lemma(Or(d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) ==
                                        0,
                                        Not(d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) <=
                                        0),
                                        Not(d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array5(C,
                                        _k2,
                                        _n1!2,
                                        1 + _k2) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d2array5(C,
                                        _k2 - 1,
                                        _n1,
                                        _k2) ==
                                        d2array2(A,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1),
                                        _k2 - 1) -
                                        d2array2(B,
                                        _k2 - 1,
                                        _n1,
                                        _N1(_k2 - 1),
                                        _k2 - 1),
                                        d2array5(C,
                                        _k2,
                                        _n1,
                                        _k2 + 1) ==
                                        d2array2(A,
                                        _k2,
                                        _n1,
                                        _N1(_k2),
                                        _k2) -
                                        d2array2(B,
                                        _k2,
                                        _n1,
                                        _N1(_k2),
                                        _k2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k2 + -1*1 ==
                                        _k2 + -1),
                                        rewrite(_k2 + -1 ==
                                        -1 + _k2),
                                        _k2 + -1*1 ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d2array5(C,
                                        _k2 - 1,
                                        Var(0),
                                        _k2) ==
                                        d2array5(C,
                                        -1 + _k2,
                                        Var(0),
                                        _k2)),
                                        trans(monotonicity(monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + ...*...),
                                        trans(monotonicity(rewrite(... ==
                                        ...),
                                        ... + ... ==
                                        ... + ...),
                                        rewrite(... + ... ==
                                        ... + ...),
                                        _k2 + ...*... ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        _N1(_k2 - 1) ==
                                        _N1(-1 + _k2)),
                                        trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + ...*...),
                                        trans(monotonicity(rewrite(... ==
                                        ...),
                                        ... + ... ==
                                        ... + ...),
                                        rewrite(... + ... ==
                                        ... + ...),
                                        _k2 + ...*... ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d2array2(A,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1),
                                        _k2 - 1) ==
                                        d2array2(A,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2),
                                        -1 + _k2)),
                                        monotonicity(trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + ...*...),
                                        trans(monotonicity(rewrite(... ==
                                        ...),
                                        ... + ... ==
                                        ... + ...),
                                        rewrite(... + ... ==
                                        ... + ...),
                                        _k2 + ...*... ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        monotonicity(trans(rewrite(... -
                                        ... ==
                                        ... + ...),
                                        trans(monotonicity(rewrite(...),
                                        ... == ...),
                                        rewrite(... == ...),
                                        ... + ... ==
                                        ... + ...),
                                        _k2 - 1 == -1 + _k2),
                                        _N1(_k2 - 1) ==
                                        _N1(-1 + _k2)),
                                        trans(rewrite(_k2 -
                                        1 ==
                                        _k2 + ...*...),
                                        trans(monotonicity(rewrite(... ==
                                        ...),
                                        ... + ... ==
                                        ... + ...),
                                        rewrite(... + ... ==
                                        ... + ...),
                                        _k2 + ...*... ==
                                        -1 + _k2),
                                        _k2 - 1 == -1 + _k2),
                                        d2array2(B,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1),
                                        _k2 - 1) ==
                                        d2array2(B,
                                        -1 + _k2,
                                        Var(0),
                                        _N1(-1 + _k2),
                                        -1 + _k2)),
                                        d2array2(A,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1),
                                        _k2 - 1) -
                                        d2array2(B,
                                        _k2 - 1,
                                        Var(0),
                                        _N1(_k2 - 1),
                                        _k2 - 1) ==
                                        d2array2(A,
..., unit-resolution(th-lemma(Or(Not(d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                -1*
                                d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                0),
                            d2array2(B,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) +
                            -1*
                            d2array2(A,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) +
                            d2array2(C,
                                     _k2,
                                     _n1!2,
                                     _N1(_k2),
                                     _k2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Or(Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0)) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                        Not(_n1!2 >= 0),
                                        Not(_k2 >= 0),
                                        d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        -1*
                                        d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                        d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                        0)),
                                   Or(Not(ForAll([_n1, _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array2(B,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        -1*
                                        d2array2(A,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) +
                                        d2array2(C,
                                        _n2,
                                        _n1,
                                        _N1(_n2),
                                        _n2) ==
                                        0))),
                                      Not(_n1!2 >= 0),
                                      Not(_k2 >= 0),
                                      d2array2(B,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                      -1*
                                      d2array2(A,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) +
                                      d2array2(C,
                                        _k2,
                                        _n1!2,
                                        _N1(_k2),
                                        _k2) ==
                                      0)),
                                mp(mp(mp~(mp(mp(asserted(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array2(C,
                                        _n2,
                                        _n1,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:04:39
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _k2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array5(C, _x2, _x3, _k2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _k2) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array5(B, _x2, _x3, _k2)==d2array(B, _x2, _x3)),(d2array5(B, _x2, _x3, _k2 + 1)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2) ==
                                        d2array(B, _x2, _x3),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _k2 + 1) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2)),
                                        (d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _k2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                       Or(Not(_x3!243 >= 0),
                                        Not(_x2!242 >= 0),
                                        Not(_k2 >= 0),
                                        d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                        d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Or(Not(_x3!243 >= 0),
                                       Not(_x2!242 >= 0),
                                       Not(_k2 >= 0),
                                       d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                       d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                    Not(_x3!243 >= 0),
                                    Not(_x2!242 >= 0),
                                    Not(_k2 >= 0),
                                    d2array5(B,
                                        _x2!242,
                                        _x3!243,
                                        1 + _k2) ==
                                    d2array2(B,
                                        _x2!242,
                                        _x3!243,
                                        _N1(_k2),
                                        _k2))),
                         Or(Not(ForAll([_x3, _x2, _n2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        1 + _n2) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                            Not(_x3!243 >= 0),
                            Not(_x2!242 >= 0),
                            Not(_k2 >= 0),
                            d2array5(B,
                                     _x2!242,
                                     _x3!243,
                                     1 + _k2) ==
                            d2array2(B,
                                     _x2!242,
                                     _x3!243,
                                     _N1(_k2),
                                     _k2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n2],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _n2 + 1) ==
                                        d2array2(B,
                                        _x2,
                                        _x3,
                                        _N1(_n2),
                                        _n2)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        (d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array2(B,
                                        Var(1),
                                        Var(2),
                                        _N1(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:04:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array10(A, _x2, _x3, 0) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array10(A, _x2, _x3, 0) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array10(A, _x2!4, _x3!5, 0) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array10(A, _x2!4, _x3!5, 0) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array10(A, _x2!4, _x3!5, 0) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                        d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2)))),
                         rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                       d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2))) ==
                                 Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                    d2array5(A,
                                        _x2!4,
                                        _x3!5,
                                        _N2))),
                         Or(Not(ForAll([_x3, _x2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            d2array10(A, _x2!4, _x3!5, 0) ==
                            d2array5(A, _x2!4, _x3!5, _N2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                   ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(A,
                                        _x2,
                                        _x3,
                                        _N2)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:04:46
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, 0) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                -1*
                                d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                0),
                            d2array5(B, _n2!4, _n1!5, _N2) +
                            d2array5(C, _n2!4, _n1!5, _N2) +
                            -1*
                            d2array5(A, _n2!4, _n1!5, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0))),
                                   trans(monotonicity(monotonicity(trans(monotonicity(rewrite(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (-1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        rewrite((-1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0,
                                        Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) <=
                                        0),
                                        Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        0) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_n1, _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                            d2array10(C, _n2!4, _n1!5, 0) +
                            -1*
                            d2array5(C, _n2!4, _n1!5, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                        d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))),
                                   Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                      Not(_n1!5 >= 0),
                                      Not(_n2!4 >= 0),
                                      d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        0) ==
                                      d2array5(C,
                                        _n2!4,
                                        _n1!5,
                                        _N2))),
                                mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(C,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(C,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:04:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(ForAll([_x3,_x2,_x1],Implies(And(_x3>=0,_x2>=0),d2array1(_x1, _x2, _x3) == d2array10(_x1, _x2, _x3, _N4))))
_s.add(main == 0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array10(B, _x2, _x3, 0) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array10(B, _x2, _x3, 0) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array10(B, _x2!4, _x3!5, 0) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array10(B, _x2!4, _x3!5, 0) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array10(B, _x2!4, _x3!5, 0) ==
                d2array(B, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                        d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2)))),
                         rewrite(Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                       d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2))) ==
                                 Or(Not(ForAll([_x3, _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        0) ==
                                    d2array5(B,
                                        _x2!4,
                                        _x3!5,
                                        _N2))),
                         Or(Not(ForAll([_x3, _x2],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            d2array10(B, _x2!4, _x3!5, 0) ==
                            d2array5(B, _x2!4, _x3!5, _N2))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                   ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2))))),
                                ForAll([_x3, _x2],
                                       Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        0) ==
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:04:56
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(A, _x2, _x3, 0, _k4) == d2array(A, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(A, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(A, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(A, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array7(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(A, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array7(A, _x2!4, _x3!5, 0, _k4) ==
                       d2array(A, _x2!4, _x3!5)))),
            Not(d2array7(A, _x2!4, _x3!5, 0, _k4) ==
                d2array(A, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array10(A,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array7(A,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array10(A, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:04:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(A, _x2, _x3, _k3 + 1, _k4)==d2array(A, _x2, _x3)),(d2array7(A, _x2, _x3, _k3 + 2, _k4)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array7(A,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array7(A,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array7(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array7(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(A,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:05:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array7(C, _n2, _n1, 0, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4)),
                            d2array10(C, _n2!4, _n1!5, _k4) +
                            -1*
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     0,
                                     _k4) <=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                        quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
..., unit-resolution(unit-resolution(th-lemma(Or(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) ==
                                        0,
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) <=
                                        0),
                                        Not(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        0,
                                        _k4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                -1*
                                d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                0),
                            d2array10(C, _n2!4, _n1!5, _k4) +
                            -1*
                            d2array5(A, _n2!4, _n1!5, _N2) +
                            d2array5(B, _n2!4, _n1!5, _N2) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n1,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        0))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        (-1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        rewrite((-1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0) ==
                                        (d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        (d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        (d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!4,
                                        _n1!5,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:05:06
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array7(C, _n2, _n1, _k3 + 1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array7(C, _n2, _n1, _k3 + 2, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)),
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     2 + _k3,
                                     _k4) +
                            -1*
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     1 + _k3,
                                     _k4) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_n1!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(C,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                        0,
                                        Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) <=
                                        0),
                                        Not(d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        2 + _k3,
                                        _k4) +
                                        d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
..., unit-resolution(th-lemma(Or(Not(d2array5(B,
                                        _n2!4,
                                        _n1!5,
                                        _N2) +
                                d2array7(C,
                                        _n2!4,
                                        _n1!5,
                                        1 + _k3,
                                        _k4) +
                                -1*
                                d2array5(A,
                                        _n2!4,
                                        _n1!5,
                                        _N2) ==
                                0),
                            d2array5(B, _n2!4, _n1!5, _N2) +
                            d2array7(C,
                                     _n2!4,
                                     _n1!5,
                                     1 + _k3,
                                     _k4) +
                            -1*
                            d2array5(A, _n2!4, _n1!5, _N2) <=
                            0)),
                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array7(C,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2),
                                        d2array7(C,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(d2array7(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array5(A,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:05:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array7(B, _x2, _x3, 0, _k4) == d2array(B, _x2, _x3)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                   monotonicity(quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                                Not(ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))) ==
                                Not(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                        d2array(B, _x2, _x3))))),
                   Not(ForAll([_x3, _x2],
                              Or(Not(And(_x3 >= 0, _x2 >= 0)),
                                 d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                 d2array(B, _x2, _x3))))),
                sk(~(Not(ForAll([_x3, _x2],
                                Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                   d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _k4) ==
                                   d2array(B, _x2, _x3)))),
                     Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                            d2array7(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array(B, _x2!4, _x3!5))))),
                Not(Or(Not(And(_x3!5 >= 0, _x2!4 >= 0)),
                       d2array7(B, _x2!4, _x3!5, 0, _k4) ==
                       d2array(B, _x2!4, _x3!5)))),
            Not(d2array7(B, _x2!4, _x3!5, 0, _k4) ==
                d2array(B, _x2!4, _x3!5))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                        d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Or(Not(_x3!5 >= 0),
                                       Not(_x2!4 >= 0),
                                       Not(_k4 >= 0),
                                       d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                       d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                    Not(_x3!5 >= 0),
                                    Not(_x2!4 >= 0),
                                    Not(_k4 >= 0),
                                    d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        0,
                                        _k4) ==
                                    d2array10(B,
                                        _x2!4,
                                        _x3!5,
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                            Not(_x3!5 >= 0),
                            Not(_x2!4 >= 0),
                            Not(_k4 >= 0),
                            d2array7(B,
                                     _x2!4,
                                     _x3!5,
                                     0,
                                     _k4) ==
                            d2array10(B, _x2!4, _x3!5, _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        0,
                                        _n4) ==
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        0,
                                        Var(0)) ==
                                        d2array10(B,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-15 00:05:15
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array7(B, _x2, _x3, _k3 + 1, _k4)==d2array(B, _x2, _x3)),(d2array7(B, _x2, _x3, _k3 + 2, _k4)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array7(B,
                                        _x2,
                                        _x3,
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B, _x2, _x3),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        monotonicity(monotonicity(rewrite(_k3 +
                                        2 ==
                                        2 + _k3),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        2 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 1,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array7(B,
                                        Var(0),
                                        Var(1),
                                        _k3 + 2,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array7(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k3,
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array7(B,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k3 >=
                                        0) ==
                                        (_k3 >= -1)),
                                        Not(1 + _k3 >= 0) ==
                                        Not(_k3 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k3 ==
                                        2 + _k3),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4)),
                                        (d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        (d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)) ==
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(1 + _k3 >= 0),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + 1 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4)))),
                               rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        1 + _n3,
                                        _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _n3,
                                        _n4)))),
                                        Or(Not(_x3!5 >= 0),
                                        Not(_x2!4 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= -1),
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        2 + _k3,
                                        _k4) ==
                                        d2array7(B,
                                        _x2!4,
                                        _x3!5,
                                        1 + _k3,
                                        _k4))) ==
                                       Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _n3],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:05:18
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(A, _x2, _x3, _k4)==d2array(A, _x2, _x3)),(d2array10(A, _x2, _x3, _k4 + 1)==d2array(A, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array10(A,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        d2array(A, _x2, _x3),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _k4 + 1) ==
                                        d2array(A, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!265 >= 0),
                                        Not(_x2!264 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                        d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!265 >= 0),
                                       Not(_x2!264 >= 0),
                                       Not(_k4 >= 0),
                                       d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                       d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!265 >= 0),
                                    Not(_x2!264 >= 0),
                                    Not(_k4 >= 0),
                                    d2array10(A,
                                        _x2!264,
                                        _x3!265,
                                        1 + _k4) ==
                                    d2array7(A,
                                        _x2!264,
                                        _x3!265,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!265 >= 0),
                            Not(_x2!264 >= 0),
                            Not(_k4 >= 0),
                            d2array10(A,
                                      _x2!264,
                                      _x3!265,
                                      1 + _k4) ==
                            d2array7(A,
                                     _x2!264,
                                     _x3!265,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(A,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(A,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3)))

***********************
2017-05-15 00:05:23
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d2array10(C, _n2, _n1, _k4)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)),(d2array10(C, _n2, _n1, _k4 + 1)==d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4)),
                            d2array7(C,
                                     _n2!268,
                                     _n1!269,
                                     _N3(_k4),
                                     _k4) +
                            -1*
                            d2array10(C,
                                      _n2!268,
                                      _n1!269,
                                      1 + _k4) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Or(Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(C,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(C,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                        quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(C,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
..., unit-resolution(unit-resolution(th-lemma(Or(d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) ==
                                        0,
                                        Not(d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) <=
                                        0),
                                        Not(d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array10(C,
                                        _n2!268,
                                        _n1!269,
                                        1 + _k4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n1,
                                        _n2],
                                        Implies(And(_n1 >= 0,
                                        _n2 >= 0),
                                        Implies(d2array10(C,
                                        _n2,
                                        _n1,
                                        _k4) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _k4 + 1) ==
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) -
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2)))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        rewrite(d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)),
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        (d2array10(C,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2))),
                                        Implies(d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2),
                                        d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) -
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2)) ==
                                        Implies(d2array10(C,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array5(A,
                                        Var(0),
                                        Var(1),
                                        _N2) +
..., unit-resolution(th-lemma(Or(Not(d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                -1*
                                d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                -1*
                                d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                0),
                            d2array5(A,
                                     _n2!268,
                                     _n1!269,
                                     _N2) +
                            -1*
                            d2array5(B,
                                     _n2!268,
                                     _n1!269,
                                     _N2) +
                            -1*
                            d2array7(C,
                                     _n2!268,
                                     _n1!269,
                                     _N3(_k4),
                                     _k4) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0))),
                                   rewrite(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                        Not(_k4 >= 0),
                                        Not(_n1!269 >= 0),
                                        Not(_n2!268 >= 0),
                                        d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                        0)),
                                   Or(Not(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        -1*
                                        d2array7(C,
                                        _n2,
                                        _n1,
                                        _N3(_n4),
                                        _n4) ==
                                        0))),
                                      Not(_k4 >= 0),
                                      Not(_n1!269 >= 0),
                                      Not(_n2!268 >= 0),
                                      d2array5(A,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                      -1*
                                      d2array5(B,
                                        _n2!268,
                                        _n1!269,
                                        _N2) +
                                      -1*
                                      d2array7(C,
                                        _n2!268,
                                        _n1!269,
                                        _N3(_k4),
                                        _k4) ==
                                      0)),
                                mp(mp(mp~(mp(mp(asserted(ForAll([_n4,
                                        _n1,
                                        _n2],
                                        Implies(And(_n4 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2)))

***********************
2017-05-15 00:05:33
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))

System try to prove 
ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _k4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array10(C, _x2, _x3, _k4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _k4) == d2array(B, _x2, _x3))))
_s.add(Not(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),Implies((d2array10(B, _x2, _x3, _k4)==d2array(B, _x2, _x3)),(d2array10(B, _x2, _x3, _k4 + 1)==d2array(B, _x2, _x3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2],
                                       Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        Implies(d2array10(B,
                                        _x2,
                                        _x3,
                                        _k4) ==
                                        d2array(B, _x2, _x3),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _k4 + 1) ==
                                        d2array(B, _x2, _x3)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k4 +
                                        1 ==
                                        1 + _k4),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4)),
                                        (d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        (d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4 + 1) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Or(Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        Not(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        1 + _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        Implies(d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _k4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                       Or(Not(_x3!273 >= 0),
                                        Not(_x2!272 >= 0),
                                        Not(_k4 >= 0),
                                        d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                        d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Or(Not(_x3!273 >= 0),
                                       Not(_x2!272 >= 0),
                                       Not(_k4 >= 0),
                                       d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                       d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                    Not(_x3!273 >= 0),
                                    Not(_x2!272 >= 0),
                                    Not(_k4 >= 0),
                                    d2array10(B,
                                        _x2!272,
                                        _x3!273,
                                        1 + _k4) ==
                                    d2array7(B,
                                        _x2!272,
                                        _x3!273,
                                        _N3(_k4),
                                        _k4))),
                         Or(Not(ForAll([_x3, _x2, _n4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        1 + _n4) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                            Not(_x3!273 >= 0),
                            Not(_x2!272 >= 0),
                            Not(_k4 >= 0),
                            d2array10(B,
                                      _x2!272,
                                      _x3!273,
                                      1 + _k4) ==
                            d2array7(B,
                                     _x2!272,
                                     _x3!273,
                                     _N3(_k4),
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        _n4 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _n4 + 1) ==
                                        d2array7(B,
                                        _x2,
                                        _x3,
                                        _N3(_n4),
                                        _n4)))),
                                   quant-intro(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0))),
                                        (d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        (d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        Var(0) + 1) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(1),
                                        Var(2),
                                        1 + Var(0)) ==
                                        d2array7(B,
                                        Var(1),
                                        Var(2),
                                        _N3(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(2) >=
                                        0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _N4) == d2array(B, _x2, _x3)))

***********************
2017-05-15 00:05:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))

System try to prove 
ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j5=Function('j5',IntSort(),IntSort())
j1=Int('j1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Const('_N2',IntSort())
m1=Int('m1')
C1=Const('C1',arraySort)
main=Int('main')
A=Const('A',arraySort)
C=Const('C',arraySort)
B=Const('B',arraySort)
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
j10=Function('j10',IntSort(),IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
m=Int('m')
_n4=Int('_n4')
n=Int('n')
B1=Const('B1',arraySort)
n1=Int('n1')
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array1=Function('d2array1',arraySort,IntSort(),IntSort(),IntSort())
d2array10=Function('d2array10',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array2=Function('d2array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d2array5=Function('d2array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d2array=Function('d2array',arraySort,IntSort(),IntSort(),IntSort())
d2array7=Function('d2array7',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(i1 == _N4)
_s.add(j1 == j10(_N4))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(A, _x2, _x3) == d2array10(A, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(B, _x2, _x3) == d2array10(B, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array1(C, _x2, _x3) == d2array10(C, _x2, _x3, _N4))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(A, _x2, _x3, _n1 + 1, _n2) == d2array2(A, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _n1 + 1, _n2) == d2array2(A, _n2, _n1, _n1, _n2) - d2array2(B, _n2, _n1, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n1,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_n1>=0,_n2>=0))),d2array2(B, _x2, _x3, _n1 + 1, _n2) == d2array2(B, _x2, _x3, _n1, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, 0, _n2) == d2array5(A, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(C, _x2, _x3, 0, _n2) == d2array5(C, _x2, _x3, _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, 0, _n2) == d2array5(B, _x2, _x3, _n2))))
_s.add(ForAll([_n2],Implies(_n2>=0,_N1(_n2) >= n)))
_s.add(ForAll([_n1,_n2],Implies(And(_n1 < _N1(_n2),And(_n1>=0,_n2>=0)),_f(_n1) < n)))
_s.add(ForAll([_n2],Implies(_n2>=0,Or(_N1(_n2)==0,_N1(_n2) - 1 < n))))
_s.add(ForAll([_n2],Implies(_n2>=0,j5(_n2 + 1) == _N1(_n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(j5(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, 0) == d2array(A, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(C, _x2, _x3, 0) == d2array(C, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, 0) == d2array(B, _x2, _x3))))
_s.add(_N2 >= m)
_s.add(ForAll([_n2],Implies(And(_n2 < _N2,_n2>=0),_f(_n2) < m)))
_s.add(Or(_N2==0,_N2 - 1 < m))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(A, _x2, _x3, _n3 + 1, _n4) == d2array7(A, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(C, _x2, _x3, _n3 + 1, _n4) == d2array7(C, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,_n3>=0))),d2array7(B, _x2, _x3, _n3 + 1, _n4) == d2array7(B, _x2, _x3, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, 0, _n4) == d2array10(A, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(C, _x2, _x3, 0, _n4) == d2array10(C, _x2, _x3, _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, 0, _n4) == d2array10(B, _x2, _x3, _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_n4],Implies(_n4>=0,j10(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(j10(0) == 0)
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, 0) == d2array5(A, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(C, _x2, _x3, 0) == d2array5(C, _x2, _x3, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, 0) == d2array5(B, _x2, _x3, _N2))))
_s.add(_N4 >= m)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < m)))
_s.add(Or(_N4==0,_N4 - 1 < m))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(A, _x2, _x3, _n2 + 1) == d2array2(A, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(C, _x2, _x3, _n2 + 1) == d2array2(C, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array5(B, _x2, _x3, _n2 + 1) == d2array2(B, _x2, _x3, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(A, _x2, _x3, _N1(_n2), _n2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array2(C, _n2, _n1, _N1(_n2), _n2) == d2array2(A, _n2, _n1, _N1(_n2), _n2) - d2array2(B, _n2, _n1, _N1(_n2), _n2))))
_s.add(ForAll([_x3,_x2,_n2],Implies(And(_x3>=0,And(_x2>=0,_n2>=0)),d2array2(B, _x2, _x3, _N1(_n2), _n2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(A, _x2, _x3, _N2) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array5(C, _n2, _n1, _N2) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array5(B, _x2, _x3, _N2) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(A, _x2, _x3, _n4 + 1) == d2array7(A, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(C, _x2, _x3, _n4 + 1) == d2array7(C, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array10(B, _x2, _x3, _n4 + 1) == d2array7(B, _x2, _x3, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(A, _x2, _x3, _N3(_n4), _n4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n4,_n1,_n2],Implies(And(_n4>=0,And(_n1>=0,_n2>=0)),d2array7(C, _n2, _n1, _N3(_n4), _n4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2,_n4],Implies(And(_x3>=0,And(_x2>=0,_n4>=0)),d2array7(B, _x2, _x3, _N3(_n4), _n4) == d2array(B, _x2, _x3))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(A, _x2, _x3, _N4) == d2array(A, _x2, _x3))))
_s.add(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),d2array10(C, _n2, _n1, _N4) == d2array5(A, _n2, _n1, _N2) - d2array5(B, _n2, _n1, _N2))))
_s.add(ForAll([_x3,_x2],Implies(And(_x3>=0,_x2>=0),d2array10(B, _x2, _x3, _N4) == d2array(B, _x2, _x3))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(B1 == B)
_s.add(m1 == m)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_n2],_N1(_n2)>=0))
_s.add(_N2>=0)
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(Not(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),(d2array10(C, _n4, _n3, _N4)==d2array10(A, _n4, _n3, _N4) - d2array10(B, _n4, _n3, _N4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/diff-2-n-u/diff-2-n-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/diff-2-n-u/diff-2-n-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d2array(B, _n4!5, _n3!4) ==
                                d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                            d2array(B, _n4!5, _n3!4) +
                            -1*
                            d2array5(B, _n4!5, _n3!4, _N2) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4)))),
                                      rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                      Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                   mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array5(B,
                                        Var(0),
                                        Var(1),
                                        _N2) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array5(B,
                                        _x2,
                                        _x3,
                                        _N2) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
..., unit-resolution(th-lemma(Or(Not(d2array(B, _n4!5, _n3!4) ==
                                d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4)),
                            d2array(B, _n4!5, _n3!4) +
                            -1*
                            d2array10(B, _n4!5, _n3!4, _N4) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(B,
                                        _n4!5,
                                        _n3!4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(B,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(B,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(B,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(B, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Or(Not(And(Var(1) >=
                                        0,
..., unit-resolution(th-lemma(Or(Not(d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                -1*
                                d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                0),
                            d2array10(C, _n4!5, _n3!4, _N4) +
                            d2array5(B, _n4!5, _n3!4, _N2) +
                            -1*
                            d2array5(A, _n4!5, _n3!4, _N2) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                                        (d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0) ==
                                        (d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0) ==
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)),
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
                                        _N2) ==
                                        0)) ==
                                        Or(Not(ForAll([_n1,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n2 >= 0),
                                        d2array10(C,
                                        _n2,
                                        _n1,
                                        _N4) +
                                        -1*
                                        d2array5(A,
                                        _n2,
                                        _n1,
                                        _N2) +
                                        d2array5(B,
                                        _n2,
                                        _n1,
                                        _N2) ==
                                        0))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array5(B,
                                        _n4!5,
                                        _n3!4,
..., unit-resolution(unit-resolution(th-lemma(Or(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        0,
                                        Not(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) <=
                                        0),
                                        Not(d2array10(B,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        -1*
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) +
                                        d2array10(C,
                                        _n4!5,
                                        _n3!4,
                                        _N4) >=
                                        0))),
                                not-or-elim(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array10(C,
                                        _n4,
                                        _n3,
                                        _N4) ==
                                        d2array10(A,
                                        _n4,
                                        _n3,
                                        _N4) -
                                        d2array10(B,
                                        _n4,
                                        _n3,
                                        _N4))))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(rewrite(d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)),
                                        (d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        (d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) -
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4)) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(C,
                                        Var(1),
                                        Var(0),
                                        _N4) ==
                                        d2array10(A,
                                        Var(1),
                                        Var(0),
                                        _N4) +
                                        -1*
                                        d2array10(B,
                                        Var(1),
                                        Var(0),
                                        _N4))),
                                        (ForAll([_n4, _n3],
                                        Implies(And(_n4 >= 0,
                                        _n3 >= 0),
                                        d2array10(C,
                                        _n4,
                                        _n3,
..., unit-resolution(th-lemma(Or(Not(d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                d2array5(A,
                                        _n4!5,
                                        _n3!4,
                                        _N2)),
                            d2array10(A, _n4!5, _n3!4, _N4) +
                            -1*
                            d2array5(A, _n4!5, _n3!4, _N2) >=
                            0)),
                trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Or(Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))),
                                        Or(Not(ForAll([_x3,
                                        _x2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        Not(_n3!4 >= 0),
                                        Not(_n4!5 >= 0),
                                        d2array10(A,
                                        _n4!5,
                                        _n3!4,
                                        _N4) ==
                                        d2array(A,
                                        _n4!5,
                                        _n3!4))),
                                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3, _x2],
                                        Implies(And(_x3 >= 0,
                                        _x2 >= 0),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))) ==
                                        (ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d2array10(A,
                                        Var(0),
                                        Var(1),
                                        _N4) ==
                                        d2array(A,
                                        Var(0),
                                        Var(1))))),
                                        ~(ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3))))),
                                        ForAll([_x3, _x2],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0)),
                                        d2array10(A,
                                        _x2,
                                        _x3,
                                        _N4) ==
                                        d2array(A, _x2, _x3)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Or(Not(Var(1) >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved
