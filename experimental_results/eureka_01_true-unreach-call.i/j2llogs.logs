
***********************
2017-04-23 23:57:39
***********************

Command--Translate 

Parameters--
 File Name--sv-benchmarks/loops/eureka_01_true-unreach-call.i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i4(_n1 + 1)=i4(_n1) + 1,i4(0)=i
 Closed Form Solution
_n1 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j9(_n2 + 1)=j9(_n2) + 1,j9(0)=j
 Closed Form Solution
_n2 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i12(_n3 + 1)=i12(_n3) + 1,i12(0)=i
 Closed Form Solution
_n3 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i23(_n5 + 1)=i23(_n5) + 1,i23(0)=i
 Closed Form Solution
_n5 + i

***********************
2017-04-23 23:57:42
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(Source, _x2, 0) ==
                           d1array(Source, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(Source, Var(0), 0) ==
                               d1array(Source, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(Source, Var(0), 0) ==
                          d1array(Source, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Source, _x2, 0) ==
                               d1array(Source, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(Source, _x2, 0) ==
                          d1array(Source, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(Source, _x2, 0) ==
             d1array(Source, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Source, _x2, 0) ==
                               d1array(Source, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(Source,
                                        Var(0),
                                        0) ==
                                       d1array(Source,
                                        Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(Source,
                                        _x2,
                                        0) ==
                                       d1array(Source, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(Source, _x2, 0) ==
                                   d1array(Source, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(Source, _x2, 0) ==
                              d1array(Source, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(Source, _x2, 0) ==
                 d1array(Source, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Source, _x2, _k1 + 1)==d1array(Source, _x2)),(d1array4(Source, _x2, _k1 + 2)==d1array(Source, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Source, _x2, _k1 + 1)==d1array(Source, _x2)),(d1array4(Source, _x2, _k1 + 2)==d1array(Source, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Source, _x2, _k1 + 1)==d1array(Source, _x2)),(d1array4(Source, _x2, _k1 + 2)==d1array(Source, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Source, _x2, _k1 + 1)==d1array(Source, _x2)),(d1array4(Source, _x2, _k1 + 2)==d1array(Source, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(Source,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Source, _x2),
                                        d1array4(Source,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Source, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array4(Source,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Implies(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        rewrite(Implies(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Source,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array4(Source,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Source,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array4(Source,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Source,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Source, _x2),
                                        d1array4(Source,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Source, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(Source,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(Source, _x2)),
                                        d1array4(Source,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(Source, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Source,
                                        _x2,
                                        _k1 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Source,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array4(Source,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array4(Source,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array4(Source,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array4(Source,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array4(Source, _x2!2, 2 + _k1) ==
                            d1array4(Source, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array4(Source,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array4(Source,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(Source,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(Source,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(Source,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2)))

***********************
2017-04-23 23:57:44
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array4(distance, 0, 1) == If((0+0)==0,0,899)']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array4(distance, 0, 1) == If((0+0)==0,0,899)

System try to prove 
d1array4(distance, 0, 1) == If((0+0)==0,0,899)

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(d1array4(distance, 0, 1) == If((0+0)==0,0,899)))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll(_n1,
                            Or(Not(_n1 >= 0),
                               If(_n1 == 0,
                                  d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                  0,
                                  d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                  899)))),
                 Or(Not(0 >= 0),
                    If(0 == 0,
                       d1array4(distance, 0, 1 + 0) == 0,
                       d1array4(distance, 0, 1 + 0) == 899)))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 ==
                                        0) ==
                                        True),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        d1array4(distance,
                                        0,
                                        1)),
                                        (d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        0) ==
                                        (d1array4(distance,
                                        0,
                                        1) ==
                                        0)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        d1array4(distance,
                                        0,
                                        1)),
                                        (d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        899) ==
                                        (d1array4(distance,
                                        0,
                                        1) ==
                                        899)),
                                        If(0 == 0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        899) ==
                                        If(True,
                                        d1array4(distance,
                                        0,
                                        1) ==
                                        0,
                                        d1array4(distance,
                                        0,
                                        1) ==
                                        899)),
                                        rewrite(If(True,
                                        d1array4(distance,
                                        0,
                                        1) ==
                                        0,
                                        d1array4(distance,
                                        0,
                                        1) ==
                                        899) ==
                                        (d1array4(distance,
                                        0,
                                        1) ==
                                        0)),
                                        If(0 == 0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        899) ==
                                        (d1array4(distance,
                                        0,
                                        1) ==
                                        0)),
                                        Or(Not(0 >= 0),
                                        If(0 == 0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        0,
                                        d1array4(distance,
                                        0,
                                        1 + 0) ==
                                        899)) ==
                                        Or(False,
                                        d1array4(distance,
                                        0,
                                        1) ==
                                        0)),
                            rewrite(Or(False,
                                       d1array4(distance,
                                        0,
                                        1) ==
                                       0) ==
                                    (d1array4(distance,
                                        0,
                                        1) ==
                                     0)),
                            Or(Not(0 >= 0),
                               If(0 == 0,
                                  d1array4(distance,
                                        0,
                                        1 + 0) ==
                                  0,
                                  d1array4(distance,
                                        0,
                                        1 + 0) ==
                                  899)) ==
                            (d1array4(distance, 0, 1) == 0)),
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                         Or(Not(0 >= 0),
                            If(0 == 0,
                               d1array4(distance, 0, 1 + 0) ==
                               0,
                               d1array4(distance, 0, 1 + 0) ==
                               899))) ==
                      Or(Not(ForAll(_n1,
                                    Or(Not(_n1 >= 0),
                                       If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                         d1array4(distance, 0, 1) == 0)),
         rewrite(Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  If(_n1 == 0,
                                     d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                     0,
                                     d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                     899)))),
                    d1array4(distance, 0, 1) == 0) ==
                 Or(Not(ForAll(_n1,
                               Or(Not(_n1 >= 0),
                                  If(_n1 == 0,
                                     d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                     0,
                                     d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                     899)))),
                    d1array4(distance, 0, 1) == 0)),
         Or(Not(ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          If(_n1 == 0,
                             d1array4(distance,
                                      _n1,
                                      1 + _n1) ==
                             0,
                             d1array4(distance,
..., mp(mp(mp~(mp(asserted(ForAll(_n1,
                             Implies(_n1 >= 0,
                                     d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                     If(_n1 == 0, 0, 899)))),
             quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        (d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        Implies(Var(0) >= 0,
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Implies(Var(0) >= 0,
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                               rewrite(Implies(Var(0) >= 0,
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                       Or(Not(Var(0) >= 0),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                               Implies(Var(0) >= 0,
                                       d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                       If(Var(0) == 0,
                                        0,
                                        899)) ==
                               Or(Not(Var(0) >= 0),
                                  d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                  If(Var(0) == 0, 0, 899))),
                         (ForAll(_n1,
                                 Implies(_n1 >= 0,
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899)))) ==
                         (ForAll(_n1,
                                 Or(Not(_n1 >= 0),
                                    d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                    If(_n1 == 0, 0, 899))))),
             ForAll(_n1,
                    Or(Not(_n1 >= 0),
                       d1array4(distance, _n1, 1 + _n1) ==
                       If(_n1 == 0, 0, 899)))),
          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                            d1array4(distance,
                                     Var(0),
                                     1 + Var(0)) ==
                            If(Var(0) == 0, 0, 899)),
                         Or(Not(Var(0) >= 0),
                            d1array4(distance,
                                     Var(0),
                                     1 + Var(0)) ==
                            If(Var(0) == 0, 0, 899)))),
                  ~(ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              d1array4(distance,
                                       _n1,
                                       1 + _n1) ==
                              If(_n1 == 0, 0, 899))),
                    ForAll(_n1,
                           Or(Not(_n1 >= 0),
                              d1array4(distance,
                                       _n1,
                                       1 + _n1) ==
                              If(_n1 == 0, 0, 899))))),
          ForAll(_n1,
                 Or(Not(_n1 >= 0),
                    d1array4(distance, _n1, 1 + _n1) ==
                    If(_n1 == 0, 0, 899)))),
      quant-intro(monotonicity(rewrite((d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                       If(Var(0) == 0,
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        0,
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        899)),
                               Or(Not(Var(0) >= 0),
                                  d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                  If(Var(0) == 0, 0, 899)) ==
                               Or(Not(Var(0) >= 0),
                                  If(Var(0) == 0,
                                     d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                     0,
                                     d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                     899))),
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             d1array4(distance,
                                      _n1,
                                      1 + _n1) ==
                             If(_n1 == 0, 0, 899)))) ==
                  (ForAll(_n1,
                          Or(Not(_n1 >= 0),
                             If(_n1 == 0,
                                d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                0,
                                d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                899))))),
      ForAll(_n1,
             Or(Not(_n1 >= 0),
                If(_n1 == 0,
                   d1array4(distance, _n1, 1 + _n1) == 0,
                   d1array4(distance, _n1, 1 + _n1) == 899)))),
   quant-intro(refl(Or(Not(Var(0) >= 0),
                       If(Var(0) == 0,
                          d1array4(distance,
                                   Var(0),
                                   1 + Var(0)) ==
                          0,
                          d1array4(distance,
                                   Var(0),
                                   1 + Var(0)) ==
                          899)) ==
                    Or(Not(Var(0) >= 0),
                       If(Var(0) == 0,
                          d1array4(distance,
                                   Var(0),
                                   1 + Var(0)) ==
                          0,
                          d1array4(distance,
                                   Var(0),
                                   1 + Var(0)) ==
                          899))),
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          If(_n1 == 0,
                             d1array4(distance,
                                      _n1,
                                      1 + _n1) ==
                             0,
                             d1array4(distance,
                                      _n1,
                                      1 + _n1) ==
                             899)))) ==
               (ForAll(_n1,
                       Or(Not(_n1 >= 0),
                          If(_n1 == 0,
                             d1array4(distance,
                                      _n1,
                                      1 + _n1) ==
                             0,
                             d1array4(distance,
..., mp(asserted(Not(d1array4(distance, 0, 1) == If(True, 0, 899))),
   monotonicity(monotonicity(rewrite(If(True, 0, 899) == 0),
                             (d1array4(distance, 0, 1) ==
                              If(True, 0, 899)) ==
                             (d1array4(distance, 0, 1) == 0)),
                Not(d1array4(distance, 0, 1) ==
                    If(True, 0, 899)) ==
                Not(d1array4(distance, 0, 1) == 0)),
   Not(d1array4(distance, 0, 1) == 0)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:45
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array4(distance, _k1, _k1 + 1)==If(_k1==0,0,899)),(d1array4(distance, _k1 + 1, _k1 + 2)==If(_k1 + 1==0,0,899)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(distance, _k1, _k1 + 1)==If(_k1==0,0,899)),(d1array4(distance, _k1 + 1, _k1 + 2)==If(_k1 + 1==0,0,899)))

System try to prove 
Implies((d1array4(distance, _k1, _k1 + 1)==If(_k1==0,0,899)),(d1array4(distance, _k1 + 1, _k1 + 2)==If(_k1 + 1==0,0,899)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(Implies((d1array4(distance, _k1, _k1 + 1)==If(_k1==0,0,899)),(d1array4(distance, _k1 + 1, _k1 + 2)==If(_k1 + 1==0,0,899)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp(asserted(Not(Implies(d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                    If(_k1 == 0, 0, 899),
                                    d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                    If(_k1 + 1 == 0, 0, 899)))),
               monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                        d1array4(distance,
                                        _k1,
                                        1 + _k1)),
                                        (d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                        If(_k1 == 0, 0, 899)) ==
                                        (d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                        If(_k1 == 0, 0, 899))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1)),
                                        monotonicity(trans(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        (_k1 + 1 == 0) ==
                                        (1 + _k1 == 0)),
                                        rewrite((1 + _k1 ==
                                        0) ==
                                        (_k1 == -1)),
                                        (_k1 + 1 == 0) ==
                                        (_k1 == -1)),
                                        If(_k1 + 1 == 0,
                                        0,
                                        899) ==
                                        If(_k1 == -1,
                                        0,
                                        899)),
                                        (d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        If(_k1 + 1 == 0,
                                        0,
                                        899)) ==
                                        (d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        If(_k1 == -1,
                                        0,
                                        899))),
                                        Implies(d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                        If(_k1 == 0, 0, 899),
                                        d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        If(_k1 + 1 == 0,
                                        0,
                                        899)) ==
                                        Implies(d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                        If(_k1 == 0, 0, 899),
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        If(_k1 == -1,
                                        0,
                                        899))),
                                  rewrite(Implies(d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                        If(_k1 == 0, 0, 899),
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        If(_k1 == -1,
                                        0,
                                        899)) ==
                                        Or(Not(d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                        If(_k1 == 0, 0, 899)),
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        If(_k1 == -1,
                                        0,
                                        899))),
                                  Implies(d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                        If(_k1 == 0, 0, 899),
                                        d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        If(_k1 + 1 == 0,
                                        0,
                                        899)) ==
                                  Or(Not(d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                        If(_k1 == 0, 0, 899)),
                                     d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                     If(_k1 == -1, 0, 899))),
                            Not(Implies(d1array4(distance,
                                        _k1,
                                        _k1 + 1) ==
                                        If(_k1 == 0, 0, 899),
                                        d1array4(distance,
                                        _k1 + 1,
                                        _k1 + 2) ==
                                        If(_k1 + 1 == 0,
                                        0,
                                        899))) ==
                            Not(Or(Not(d1array4(distance,
                                        _k1,
                                        1 + _k1) ==
                                       If(_k1 == 0, 0, 899)),
                                   d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                   If(_k1 == -1, 0, 899)))),
               Not(Or(Not(d1array4(distance, _k1, 1 + _k1) ==
                          If(_k1 == 0, 0, 899)),
                      d1array4(distance, 1 + _k1, 2 + _k1) ==
                      If(_k1 == -1, 0, 899)))),
            Not(d1array4(distance, 1 + _k1, 2 + _k1) ==
                If(_k1 == -1, 0, 899))), trans(unit-resolution(unit-resolution(def-axiom(Or(Not(If(_k1 ==
                                        -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                                        _k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                                      unit-resolution(th-lemma(Or(Not(_k1 ==
                                        -1),
                                        _k1 <= -1)),
                                        unit-resolution(th-lemma(Or(Not(_k1 <=
                                        -1),
                                        Not(_k1 >= 0))),
                                        asserted(_k1 >= 0),
                                        Not(_k1 <= -1)),
                                        Not(_k1 == -1)),
                                      Or(Not(If(_k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                      unit-resolution(mp(quant-inst(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                                        Or(Not(1 + _k1 >= 0),
                                        If(1 + _k1 == 0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        899)))),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(rewrite((1 +
                                        _k1 ==
                                        0) ==
                                        (_k1 == -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1)),
                                        (d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        0) ==
                                        (d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1)),
                                        (d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        899) ==
                                        (d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                                        If(1 + _k1 == 0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        899) ==
                                        If(_k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)),
                                        Or(Not(1 + _k1 >= 0),
                                        If(1 + _k1 == 0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        899)) ==
                                        Or(Not(_k1 >= -1),
                                        If(_k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899))),
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                                        Or(Not(1 + _k1 >= 0),
                                        If(1 + _k1 == 0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        1 + 1 + _k1) ==
                                        899))) ==
                                        Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                                        Or(Not(_k1 >= -1),
                                        If(_k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        0,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
                                        899)))),
                                        rewrite(Or(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        0,
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        899)))),
                                        Or(Not(_k1 >= -1),
                                        If(_k1 == -1,
                                        d1array4(distance,
                                        1 + _k1,
                                        2 + _k1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array4(distance, _k1, _k1 + 1)==If(_k1==0,0,899)),(d1array4(distance, _k1 + 1, _k1 + 2)==If(_k1 + 1==0,0,899)))

System try to prove 
Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(Implies(ForAll([_n1],Implies(And(And(_n1>=0,_n1<_L1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))),ForAll([_n1],Implies(And(And(And(And(_n1>=0,_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899)))))),
                                  monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((Var(0) <
                                        _L1) ==
                                        Not(_L1 <= Var(0))),
                                        And(Var(0) >= 0,
                                        Var(0) < _L1) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(0) >= 0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        (d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        If(_n1 == 0, 0, 899))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        trans(trans(monotonicity(rewrite(... +
                                        ... ==
                                        ... + ...),
                                        (Var(0) < ... + ...) ==
                                        (Var(0) < ... + ...)),
                                        rewrite((Var(0) <
                                        ... + ...) ==
                                        Not(... <= ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(... + ... <=
                                        Var(0))),
                                        monotonicity(rewrite((... +
                                        ... <=
                                        Var(0)) ==
                                        (_L1 <= ... + ...)),
                                        Not(... + ... <=
                                        Var(0)) ==
                                        Not(_L1 <= ... + ...)),
                                        (Var(0) < _L1 + 1) ==
                                        Not(_L1 <=
                                        -1 + Var(0))),
                                        And(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        Var(0) < _L1 + 1) ==
..., mp(unit-resolution(def-axiom(Or(_n1!2 == 0,
                                If(_n1!2 == 0, 0, 899) ==
                                899)),
                   lemma(unit-resolution(not-or-elim(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899))),
                                        ForAll(_n1,
                                        Implies(And(And(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899)))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(rewrite((... <
                                        ...) ==
                                        Not(...)),
                                        And(... >= ...,
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(Var(0) >= 0,
                                        Var(0) < _L1),
                                        _L1 > 0) ==
                                        And(Var(0) >= 0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0))),
                                        (d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        (d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        rewrite(Implies(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0)),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        Implies(And(And(Var(0) >=
                                        0,
                                        Var(0) < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        Var(0),
                                        Var(0) + 1) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(And(Var(0) >=
                                        0,
                                        Not(_L1 <= Var(0)),
                                        Not(_L1 <= 0))),
                                        d1array4(distance,
                                        Var(0),
                                        1 + Var(0)) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        (ForAll(_n1,
                                        Implies(And(And(_n1 >=
                                        0,
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d1array4(distance,
                                        _n1,
                                        _n1 + 1) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                        (ForAll(_n1,
                                        Or(Not(And(_n1 >= 0,
                                        Not(_L1 <= _n1),
                                        Not(_L1 <= 0))),
                                        d1array4(distance,
                                        _n1,
                                        1 + _n1) ==
                                        If(_n1 == 0, 0, 899))))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(...,
                                        ...,
                                        ...),
                                        rewrite(...),
                                        ... == ...),
                                        trans(trans(...,
                                        ...,
                                        ...),
                                        monotonicity(...,
                                        ...),
                                        (...) == ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(And(..., ...),
                                        ... < ...) ==
                                        And(... >= ...,
                                        Not(...),
                                        Not(...),
                                        Not(...))),
                                        rewrite((_L1 > 0) ==
                                        Not(... <= ...)),
                                        And(And(And(...,
                                        ...),
                                        ... < ...),
                                        _L1 > 0) ==
                                        And(And(... >= ...,
                                        Not(...),
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        Not(...),
                                        Not(...),
                                        Not(...)),
                                        Not(... <= ...)) ==
                                        And(Var(0) >= 0,
                                        Not(... <= ...),
                                        Not(... <= ...),
                                        Not(... <= ...))),
                                        And(And(And(And(...,
                                        ...),
                                        ... > ...),
                                        Var(0) < ... + ...),
                                        _L1 > 0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899)))

***********************
2017-04-23 23:57:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(Weight, _x2, 0) ==
                           d1array(Weight, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(Weight, Var(0), 0) ==
                               d1array(Weight, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(Weight, Var(0), 0) ==
                          d1array(Weight, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Weight, _x2, 0) ==
                               d1array(Weight, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(Weight, _x2, 0) ==
                          d1array(Weight, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(Weight, _x2, 0) ==
             d1array(Weight, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Weight, _x2, 0) ==
                               d1array(Weight, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(Weight,
                                        Var(0),
                                        0) ==
                                       d1array(Weight,
                                        Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(Weight,
                                        _x2,
                                        0) ==
                                       d1array(Weight, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(Weight, _x2, 0) ==
                                   d1array(Weight, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(Weight, _x2, 0) ==
                              d1array(Weight, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(Weight, _x2, 0) ==
                 d1array(Weight, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:51
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Weight, _x2, _k1 + 1)==d1array(Weight, _x2)),(d1array4(Weight, _x2, _k1 + 2)==d1array(Weight, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Weight, _x2, _k1 + 1)==d1array(Weight, _x2)),(d1array4(Weight, _x2, _k1 + 2)==d1array(Weight, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Weight, _x2, _k1 + 1)==d1array(Weight, _x2)),(d1array4(Weight, _x2, _k1 + 2)==d1array(Weight, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Weight, _x2, _k1 + 1)==d1array(Weight, _x2)),(d1array4(Weight, _x2, _k1 + 2)==d1array(Weight, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(Weight,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Weight, _x2),
                                        d1array4(Weight,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Weight, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array4(Weight,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Implies(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        rewrite(Implies(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Weight,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array4(Weight,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Weight,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array4(Weight,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Weight,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Weight, _x2),
                                        d1array4(Weight,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Weight, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(Weight,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(Weight, _x2)),
                                        d1array4(Weight,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Weight,
                                        _x2,
                                        _k1 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array4(Weight,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array4(Weight,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array4(Weight,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array4(Weight, _x2!2, 2 + _k1) ==
                            d1array4(Weight, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array4(Weight,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array4(Weight,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(Weight,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(Weight,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(Weight,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2)))

***********************
2017-04-23 23:57:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll(_x2,
                   Implies(_x2 >= 0,
                           d1array4(Dest, _x2, 0) ==
                           d1array(Dest, _x2)))),
   quant-intro(rewrite(Implies(Var(0) >= 0,
                               d1array4(Dest, Var(0), 0) ==
                               d1array(Dest, Var(0))) ==
                       Or(Not(Var(0) >= 0),
                          d1array4(Dest, Var(0), 0) ==
                          d1array(Dest, Var(0)))),
               (ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Dest, _x2, 0) ==
                               d1array(Dest, _x2)))) ==
               (ForAll(_x2,
                       Or(Not(_x2 >= 0),
                          d1array4(Dest, _x2, 0) ==
                          d1array(Dest, _x2))))),
   ForAll(_x2,
          Or(Not(_x2 >= 0),
             d1array4(Dest, _x2, 0) == d1array(Dest, _x2)))), mp(asserted(Not(ForAll(_x2,
                       Implies(_x2 >= 0,
                               d1array4(Dest, _x2, 0) ==
                               d1array(Dest, _x2))))),
   monotonicity(quant-intro(rewrite(Implies(Var(0) >= 0,
                                        d1array4(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                    Or(Not(Var(0) >= 0),
                                       d1array4(Dest,
                                        Var(0),
                                        0) ==
                                       d1array(Dest, Var(0)))),
                            (ForAll(_x2,
                                    Implies(_x2 >= 0,
                                        d1array4(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2)))) ==
                            (ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array4(Dest,
                                        _x2,
                                        0) ==
                                       d1array(Dest, _x2))))),
                Not(ForAll(_x2,
                           Implies(_x2 >= 0,
                                   d1array4(Dest, _x2, 0) ==
                                   d1array(Dest, _x2)))) ==
                Not(ForAll(_x2,
                           Or(Not(_x2 >= 0),
                              d1array4(Dest, _x2, 0) ==
                              d1array(Dest, _x2))))),
   Not(ForAll(_x2,
              Or(Not(_x2 >= 0),
                 d1array4(Dest, _x2, 0) ==
                 d1array(Dest, _x2))))), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:53
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Dest, _x2, _k1 + 1)==d1array(Dest, _x2)),(d1array4(Dest, _x2, _k1 + 2)==d1array(Dest, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Dest, _x2, _k1 + 1)==d1array(Dest, _x2)),(d1array4(Dest, _x2, _k1 + 2)==d1array(Dest, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Dest, _x2, _k1 + 1)==d1array(Dest, _x2)),(d1array4(Dest, _x2, _k1 + 2)==d1array(Dest, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array4(Dest, _x2, _k1 + 1)==d1array(Dest, _x2)),(d1array4(Dest, _x2, _k1 + 2)==d1array(Dest, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array4(Dest,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Dest, _x2),
                                        d1array4(Dest,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Dest, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array4(Dest,
                                        Var(0),
                                        1 + _k1)),
                                        (d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        2 ==
                                        2 + _k1),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1)),
                                        (d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Implies(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        rewrite(Implies(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array4(Dest,
                                        Var(0),
                                        _k1 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array4(Dest,
                                        Var(0),
                                        _k1 + 2) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array4(Dest,
                                        Var(0),
                                        1 + _k1) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array4(Dest,
                                        Var(0),
                                        2 + _k1) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Dest,
                                        _x2,
                                        _k1 + 1) ==
                                        d1array(Dest, _x2),
                                        d1array4(Dest,
                                        _x2,
                                        _k1 + 2) ==
                                        d1array(Dest, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array4(Dest,
                                        _x2,
                                        1 + _k1) ==
                                        d1array(Dest, _x2)),
                                        d1array4(Dest,
                                        _x2,
                                        2 + _k1) ==
                                        d1array(Dest, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array4(Dest,
                                        _x2,
                                        _k1 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        2 + _k1)),
                                        (d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1)) ==
                                        (d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(1 + _k1 >= 0),
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))) ==
                                       Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k1 >= -1),
                                        d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))),
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(1 + _k1 >= 0),
                                     d1array4(Dest,
                                        _x2!2,
                                        1 + 1 + _k1) ==
                                     d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))) ==
                               Or(Not(ForAll([_x2, _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                  Not(_x2!2 >= 0),
                                  Not(_k1 >= -1),
                                  d1array4(Dest,
                                        _x2!2,
                                        2 + _k1) ==
                                  d1array4(Dest,
                                        _x2!2,
                                        1 + _k1))),
                         Or(Not(ForAll([_x2, _n1],
                                       Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        1 + _n1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                            Not(_x2!2 >= 0),
                            Not(_k1 >= -1),
                            d1array4(Dest, _x2!2, 2 + _k1) ==
                            d1array4(Dest, _x2!2, 1 + _k1))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n1],
                                        Implies(And(_x2 >= 0,
                                        _n1 >= 0),
                                        d1array4(Dest,
                                        _x2,
                                        _n1 + 1) ==
                                        d1array4(Dest,
                                        _x2,
                                        _n1)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array4(Dest,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array4(Dest,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array4(Dest,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2)))

***********************
2017-04-23 23:57:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array(Source, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array(Source, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array(Source, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array(Source, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array12(Source, _x2, 0) ==
                                 d1array(Source, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Source, _x2, 0) ==
                                   d1array(Source, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array12(Source, _x2!2, 0) ==
                            d1array(Source, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array12(Source, _x2!2, 0) ==
                       d1array(Source, _x2!2)))),
            Not(d1array12(Source, _x2!2, 0) ==
                d1array(Source, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array12(Source,
                                        _x2!2,
                                        0) ==
                                        d1array4(Source,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array12(Source,
                                        _x2!2,
                                        0) ==
                                       d1array4(Source,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array12(Source,
                                        _x2!2,
                                        0) ==
                                    d1array4(Source,
                                        _x2!2,
                                        _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array12(Source, _x2!2, 0) ==
                            d1array4(Source, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array12(Source,
                                        _x2,
                                        0) ==
                                       d1array4(Source,
                                        _x2,
                                        _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array4(Source,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array4(Source,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Source, _x2, 0) ==
                                   d1array4(Source,
                                        _x2,
                                        _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:57:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d1array12(distance, _n1, 0) == If(_n1==0,0,899)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d1array12(distance, _n1, 0) == If(_n1==0,0,899)))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d1array12(distance, _n1, 0) == If(_n1==0,0,899)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d1array12(distance, _n1, 0) == If(_n1==0,0,899)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                       Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                                Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                   Not(ForAll(_n1,
                              Or(Not(_n1 >= 0),
                                 d1array12(distance, _n1, 0) ==
                                 If(_n1 == 0, 0, 899))))),
                sk(~(Not(ForAll(_n1,
                                Or(Not(_n1 >= 0),
                                   d1array12(distance,
                                        _n1,
                                        0) ==
                                   If(_n1 == 0, 0, 899)))),
                     Not(Or(Not(_n1!2 >= 0),
                            d1array12(distance, _n1!2, 0) ==
                            If(_n1!2 == 0, 0, 899))))),
                Not(Or(Not(_n1!2 >= 0),
                       d1array12(distance, _n1!2, 0) ==
                       If(_n1!2 == 0, 0, 899)))),
            Not(d1array12(distance, _n1!2, 0) ==
                If(_n1!2 == 0, 0, 899))), mp(unit-resolution(def-axiom(Or(_n1!2 == 0,
                                If(_n1!2 == 0, 0, 899) ==
                                899)),
                   lemma(unit-resolution(not-or-elim(mp~(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        If(Var(0) == 0,
                                        0,
                                        899)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        If(Var(0) == 0,
                                        0,
                                        899))),
                                        (ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                        (ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                                        Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899)))) ==
                                        Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                                        Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899))))),
                                        sk(~(Not(ForAll(_n1,
                                        Or(Not(_n1 >= 0),
                                        d1array12(distance,
                                        _n1,
                                        0) ==
                                        If(_n1 == 0, 0, 899)))),
                                        Not(Or(Not(_n1!2 >=
                                        0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        If(_n1!2 == 0,
                                        0,
                                        899))))),
                                        Not(Or(Not(_n1!2 >=
                                        0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        If(_n1!2 == 0,
                                        0,
                                        899)))),
                                        Not(d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        If(_n1!2 == 0,
                                        0,
                                        899))),
                                        mp(unit-resolution(def-axiom(Or(Not(_n1!2 ==
                                        0),
                                        If(_n1!2 == 0,
                                        0,
                                        899) ==
                                        0)),
                                        hypothesis(_n1!2 ==
                                        0),
                                        If(_n1!2 == 0,
                                        0,
                                        899) ==
                                        0),
                                        symm(trans(monotonicity(trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))),
                                        Or(Not(_n1!2 >= 0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        d1array4(distance,
                                        _n1!2,
                                        _N1)))),
                                        rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))),
                                        Or(Not(_n1!2 >= 0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        d1array4(distance,
                                        _n1!2,
                                        _N1))) ==
                                        Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))),
                                        Not(_n1!2 >= 0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        d1array4(distance,
                                        _n1!2,
                                        _N1))),
                                        Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))),
                                        Not(_n1!2 >= 0),
                                        d1array12(distance,
                                        _n1!2,
                                        0) ==
                                        d1array4(distance,
                                        _n1!2,
                                        _N1))),
                                        mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))),
                                        quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        d1array4(distance,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(distance,
                                        Var(0),
                                        0) ==
                                        d1array4(distance,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
                                        _N1))))),
                                        ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(distance,
                                        _x2,
                                        0) ==
                                        d1array4(distance,
                                        _x2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:02
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array(Weight, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array(Weight, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array(Weight, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array(Weight, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array12(Weight, _x2, 0) ==
                                 d1array(Weight, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Weight, _x2, 0) ==
                                   d1array(Weight, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array12(Weight, _x2!2, 0) ==
                            d1array(Weight, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array12(Weight, _x2!2, 0) ==
                       d1array(Weight, _x2!2)))),
            Not(d1array12(Weight, _x2!2, 0) ==
                d1array(Weight, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array12(Weight,
                                        _x2!2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array12(Weight,
                                        _x2!2,
                                        0) ==
                                       d1array4(Weight,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array12(Weight,
                                        _x2!2,
                                        0) ==
                                    d1array4(Weight,
                                        _x2!2,
                                        _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array12(Weight, _x2!2, 0) ==
                            d1array4(Weight, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array12(Weight,
                                        _x2,
                                        0) ==
                                       d1array4(Weight,
                                        _x2,
                                        _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array4(Weight,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array4(Weight,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Weight, _x2, 0) ==
                                   d1array4(Weight,
                                        _x2,
                                        _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Weight,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:05
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array(Dest, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array(Dest, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array(Dest, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(j1 == j12(_N3))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(nodecount1 == 5)
_s.add(ForAll([_x2,_x1],Implies(_x2>=0,d1array1(_x1, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(_x1, _x2, _N5),d1array12(_x1, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(y1 == y21(_N4))
_s.add(x1 == x21(_N4))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array(Dest, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array12(Dest, _x2, 0) ==
                                 d1array(Dest, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Dest, _x2, 0) ==
                                   d1array(Dest, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array12(Dest, _x2!2, 0) ==
                            d1array(Dest, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array12(Dest, _x2!2, 0) ==
                       d1array(Dest, _x2!2)))),
            Not(d1array12(Dest, _x2!2, 0) ==
                d1array(Dest, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array12(Dest,
                                        _x2!2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2!2,
                                        _N1)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array12(Dest,
                                        _x2!2,
                                        0) ==
                                       d1array4(Dest,
                                        _x2!2,
                                        _N1))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                                    Not(_x2!2 >= 0),
                                    d1array12(Dest,
                                        _x2!2,
                                        0) ==
                                    d1array4(Dest,
                                        _x2!2,
                                        _N1))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                            Not(_x2!2 >= 0),
                            d1array12(Dest, _x2!2, 0) ==
                            d1array4(Dest, _x2!2, _N1))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1)),
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array12(Dest,
                                        _x2,
                                        0) ==
                                       d1array4(Dest,
                                        _x2,
                                        _N1)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array4(Dest,
                                        Var(0),
                                        _N1))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array4(Dest,
                                        _x2,
                                        _N1))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array12(Dest, _x2, 0) ==
                                   d1array4(Dest, _x2, _N1)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Dest,
                                        _x2,
                                        0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:08
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array9(Source, _x2, 0, _k3) == d1array(Source, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array9(Source, _x2, 0, _k3) == d1array(Source, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array9(Source, _x2, 0, _k3) == d1array(Source, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array9(Source, _x2, 0, _k3) == d1array(Source, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array9(Source,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array9(Source,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                 d1array(Source, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                   d1array(Source, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array9(Source, _x2!2, 0, _k3) ==
                            d1array(Source, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array9(Source, _x2!2, 0, _k3) ==
                       d1array(Source, _x2!2)))),
            Not(d1array9(Source, _x2!2, 0, _k3) ==
                d1array(Source, _x2!2))), mp(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array12(Source,
                                        _x2!2,
                                        _k3) ==
                                       d1array(Source,
                                        _x2!2)))),
                      rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))),
                                 Or(Not(_x2!2 >= 0),
                                    d1array12(Source,
                                        _x2!2,
                                        _k3) ==
                                    d1array(Source, _x2!2))) ==
                              Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))),
                                 Not(_x2!2 >= 0),
                                 d1array12(Source,
                                        _x2!2,
                                        _k3) ==
                                 d1array(Source, _x2!2))),
                      Or(Not(ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array12(Source,
                                        _x2,
                                        _k3) ==
                                       d1array(Source, _x2)))),
                         Not(_x2!2 >= 0),
                         d1array12(Source, _x2!2, _k3) ==
                         d1array(Source, _x2!2))),
                   mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))),
                             quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array12(Source,
                                        _x2,
                                        _k3) ==
                                       d1array(Source, _x2)))),
                          nnf-pos(refl(~(Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))))),
                                  ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2))),
                                    ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                          ForAll(_x2,
                                 Or(Not(_x2 >= 0),
                                    d1array12(Source,
                                        _x2,
                                        _k3) ==
                                    d1array(Source, _x2)))),
                      quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                       Or(Not(Var(0) >= 0),
                                        d1array12(Source,
                                        Var(0),
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                  (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                  (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array12(Source,
                                        _x2,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                      ForAll(_x2,
                             Or(Not(_x2 >= 0),
                                d1array12(Source, _x2, _k3) ==
                                d1array(Source, _x2)))),
                   not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                                      monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array9(Source,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array9(Source,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                                        Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2)))) ==
                                        Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                                      Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Source, _x2))))),
                                   sk(~(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Source, _x2, _k2 + 1, _k3)==d1array(Source, _x2)),(d1array9(Source, _x2, _k2 + 2, _k3)==d1array(Source, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Source, _x2, _k2 + 1, _k3)==d1array(Source, _x2)),(d1array9(Source, _x2, _k2 + 2, _k3)==d1array(Source, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Source, _x2, _k2 + 1, _k3)==d1array(Source, _x2)),(d1array9(Source, _x2, _k2 + 2, _k3)==d1array(Source, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Source, _x2, _k2 + 1, _k3)==d1array(Source, _x2)),(d1array9(Source, _x2, _k2 + 2, _k3)==d1array(Source, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array9(Source,
                                        _x2,
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source, _x2),
                                        d1array9(Source,
                                        _x2,
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Implies(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        rewrite(Implies(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array9(Source,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Source,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array9(Source,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Source,
                                        Var(0),
                                        1 + _k2,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        (d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                       Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Source,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Source,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                               Or(Not(ForAll([_x2, _n3, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Source,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Source,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(_k3 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array9(Source,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2)))

***********************
2017-04-23 23:58:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d1array9(distance, d1array9(Dest, 0, 0, _k3), 1, _k3) == If(d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3) > d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d1array9(distance, d1array9(Dest, 0, 0, _k3), 1, _k3) == If(d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3) > d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3))

System try to prove 
d1array9(distance, d1array9(Dest, 0, 0, _k3), 1, _k3) == If(d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3) > d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(d1array9(distance, d1array9(Dest, 0, 0, _k3), 1, _k3) == If(d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3) > d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(Weight, 0, 0, _k3) + d1array9(distance, d1array9(Source, 0, 0, _k3), 0, _k3),d1array9(distance, d1array9(Dest, 0, 0, _k3), 0, _k3))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(d1array9(distance,
                                     d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                     1,
                                     _k3) ==
                            d1array9(Weight, 0, 0, _k3) +
                            d1array9(distance,
                                     d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                     0,
                                     _k3),
                            Not(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                -1*
                                (d1array9(Weight, 0, 0, _k3) +
                                 d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3)) <=
                                0),
                            Not(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                -1*
                                (d1array9(Weight, 0, 0, _k3) +
                                 d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3)) >=
                                0))),
                lemma(th-lemma(hypothesis(Not(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        (d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3)) >=
                                        0)),
                               unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) ==
                                        0),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) >=
                                        0)),
                                        unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
..., unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                -1*
                                d1array9(Weight, 0, 0, _k3) +
                                -1*
                                d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) ==
                                0),
                            d1array9(distance,
                                     d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                     1,
                                     _k3) +
                            -1*d1array9(Weight, 0, 0, _k3) +
                            -1*
                            d1array9(distance,
                                     d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                     0,
                                     _k3) <=
                            0)),
                unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        1,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        0,
                                        0,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        0,
                                        0,
                                        _k3),
                                        0,
                                        _k3) ==
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n3,
                                        _n2],
                                        Or(Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        If(d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _n3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        1 + _n2,
                                        _n3) ==
                                        0)))),
                                        Or(Not(_k3 >= 0),
                                        Not(0 >= 0),
                                        If(d1array9(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        _k3),
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:20
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2 + 1, _k3)==If(d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3) > d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3))),(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 2, _k3)==If(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3) > d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2 + 1, _k3)==If(d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3) > d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3))),(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 2, _k3)==If(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3) > d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3))))

System try to prove 
Implies((d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2 + 1, _k3)==If(d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3) > d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3))),(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 2, _k3)==If(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3) > d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(Implies((d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2 + 1, _k3)==If(d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3) > d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3))),(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 2, _k3)==If(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3) > d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(d1array9(Weight,
                                     1 + _k2,
                                     1 + _k2,
                                     _k3) +
                            d1array9(distance,
                                     d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                     1 + _k2,
                                     _k3) ==
                            d1array9(distance,
                                     d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                     2 + _k2,
                                     _k3),
                            Not(d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                -1*
                                d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) <=
                                0),
                            Not(d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                -1*
                                d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) >=
                                0))),
                lemma(th-lemma(hypothesis(Not(d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) >=
                                        0)),
                               unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) ==
                                        0),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) <=
                                        0)),
                                        unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
..., unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                -1*
                                d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                -1*
                                d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) ==
                                0),
                            d1array9(distance,
                                     d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                     2 + _k2,
                                     _k3) +
                            -1*
                            d1array9(Weight,
                                     1 + _k2,
                                     1 + _k2,
                                     _k3) +
                            -1*
                            d1array9(distance,
                                     d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                     1 + _k2,
                                     _k3) >=
                            0)),
                unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        2 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        1 + _k2,
                                        1 + _k2,
                                        _k3),
                                        1 + _k2,
                                        _k3) ==
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_n3,
                                        _n2],
                                        Or(Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        If(d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _n3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _n2,
                                        _n3) +
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _n3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        1 + _n2,
                                        _n3) ==
                                        0)))),
                                        Or(Not(_k3 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:31
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_k3,_n2],Implies(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))),ForAll([_k3,_n2],Implies(And(And(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2 + 1, _k3)==If(d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3) > d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(Weight, _k2, _k2, _k3) + d1array9(distance, d1array9(Source, _k2, _k2, _k3), _k2, _k3),d1array9(distance, d1array9(Dest, _k2, _k2, _k3), _k2, _k3))),(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 2, _k3)==If(d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3) > d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(Weight, _k2 + 1, _k2 + 1, _k3) + d1array9(distance, d1array9(Source, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3),d1array9(distance, d1array9(Dest, _k2 + 1, _k2 + 1, _k3), _k2 + 1, _k3))))

System try to prove 
Implies(ForAll([_k3,_n2],Implies(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))),ForAll([_k3,_n2],Implies(And(And(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(Implies(ForAll([_k3,_n2],Implies(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))),ForAll([_k3,_n2],Implies(And(And(And(And(And(_k3>=0,_n2>=0),_n2<_L2),_L2>0),_n2<_L2+1),_L2>0),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2 + 1, _k3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3) > d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(Weight, _n2, _n2, _k3) + d1array9(distance, d1array9(Source, _n2, _n2, _k3), _n2, _k3),d1array9(distance, d1array9(Dest, _n2, _n2, _k3), _n2, _k3)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(d1array9(distance,
                                     d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                     _n2!4,
                                     _k3!5) +
                            d1array9(Weight,
                                     _n2!4,
                                     _n2!4,
                                     _k3!5) ==
                            d1array9(distance,
                                     d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                     1 + _n2!4,
                                     _k3!5),
                            Not(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                -1*
                                d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) <=
                                0),
                            Not(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                -1*
                                d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) >=
                                0))),
                lemma(th-lemma(hypothesis(Not(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) >=
                                        0)),
                               unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        0),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) >=
                                        0)),
                                        unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) >=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) >=
                                        0,
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
..., unit-resolution(th-lemma(Or(Not(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                -1*
                                d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                0),
                            d1array9(distance,
                                     d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                     _n2!4,
                                     _k3!5) +
                            d1array9(Weight,
                                     _n2!4,
                                     _n2!4,
                                     _k3!5) +
                            -1*
                            d1array9(distance,
                                     d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                     1 + _n2!4,
                                     _k3!5) <=
                            0)),
                unit-resolution(unit-resolution(def-axiom(Or(Not(If(d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) >=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        0)),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) >=
                                        0,
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        _n2!4,
                                        _k3!5) +
                                        d1array9(Weight,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2!4,
                                        _n2!4,
                                        _k3!5),
                                        1 + _n2!4,
                                        _k3!5) ==
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_k3,
                                        _n2],
                                        Or(Not(_k3 >= 0),
                                        Not(_n2 >= 0),
                                        _L2 + -1*_n2 <= 0,
                                        _L2 <= 0,
                                        If(d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _k3),
                                        _n2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _k3),
                                        _n2,
                                        _k3) +
                                        -1*
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _k3) <=
                                        0,
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _k3),
                                        1 + _n2,
                                        _k3) ==
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _k3),
                                        _n2,
                                        _k3),
                                        d1array9(distance,
                                        d1array9(Source,
                                        _n2,
                                        _n2,
                                        _k3),
                                        _n2,
                                        _k3) +
                                        d1array9(Weight,
                                        _n2,
                                        _n2,
                                        _k3) +
                                        -1*
                                        d1array9(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _k3),
                                        1 + _n2,
                                        _k3) ==
                                        0)))),
                                        Or(Not(_k3!5 >= 0),
                                        Not(_n2!4 >= 0),
                                        _L2 + -1*_n2!4 <= 0,
                                        _L2 <= 0,
                                        If(d1array9(distance,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))

***********************
2017-04-23 23:58:41
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array9(Weight, _x2, 0, _k3) == d1array(Weight, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array9(Weight, _x2, 0, _k3) == d1array(Weight, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array9(Weight, _x2, 0, _k3) == d1array(Weight, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array9(Weight, _x2, 0, _k3) == d1array(Weight, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Weight, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array9(Weight,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array9(Weight,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Weight, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Weight, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Weight, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                 d1array(Weight, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array9(Weight,
                                        _x2,
                                        0,
                                        _k3) ==
                                   d1array(Weight, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array9(Weight, _x2!2, 0, _k3) ==
                            d1array(Weight, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array9(Weight, _x2!2, 0, _k3) ==
                       d1array(Weight, _x2!2)))),
            Not(d1array9(Weight, _x2!2, 0, _k3) ==
                d1array(Weight, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        d1array9(Weight,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                        d1array12(Weight,
                                        _x2!2,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                                    Or(Not(_x2!2 >= 0),
                                       Not(_k3 >= 0),
                                       d1array9(Weight,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                       d1array12(Weight,
                                        _x2!2,
                                        _k3))) ==
                                 Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                                    Not(_x2!2 >= 0),
                                    Not(_k3 >= 0),
                                    d1array9(Weight,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                    d1array12(Weight,
                                        _x2!2,
                                        _k3))),
                         Or(Not(ForAll([_x2, _n3],
                                       Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                            Not(_x2!2 >= 0),
                            Not(_k3 >= 0),
                            d1array9(Weight, _x2!2, 0, _k3) ==
                            d1array12(Weight, _x2!2, _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array9(Weight,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Weight,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0)))),
                                        (ForAll([_x2, _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))) ==
                                        (ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3))))),
                                   ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Weight,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Weight,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0))))),
                                        ~(ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3))),
                                        ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3))))),
                                ForAll([_x2, _n3],
                                       Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Weight,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Weight,
                                        _x2,
                                        _n3)))),
                            quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:43
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Weight, _x2, _k2 + 1, _k3)==d1array(Weight, _x2)),(d1array9(Weight, _x2, _k2 + 2, _k3)==d1array(Weight, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Weight, _x2, _k2 + 1, _k3)==d1array(Weight, _x2)),(d1array9(Weight, _x2, _k2 + 2, _k3)==d1array(Weight, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Weight, _x2, _k2 + 1, _k3)==d1array(Weight, _x2)),(d1array9(Weight, _x2, _k2 + 2, _k3)==d1array(Weight, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Weight, _x2, _k2 + 1, _k3)==d1array(Weight, _x2)),(d1array9(Weight, _x2, _k2 + 2, _k3)==d1array(Weight, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array9(Weight,
                                        _x2,
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight, _x2),
                                        d1array9(Weight,
                                        _x2,
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Implies(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        rewrite(Implies(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array9(Weight,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Weight,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array9(Weight,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Weight,
                                        Var(0),
                                        1 + _k2,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        (d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                       Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Weight,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Weight,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                               Or(Not(ForAll([_x2, _n3, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Weight,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(_k3 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array9(Weight,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2)))

***********************
2017-04-23 23:58:45
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array9(Dest, _x2, 0, _k3) == d1array(Dest, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array9(Dest, _x2, 0, _k3) == d1array(Dest, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array9(Dest, _x2, 0, _k3) == d1array(Dest, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array9(Dest, _x2, 0, _k3) == d1array(Dest, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Dest, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array9(Dest,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array9(Dest,
                                        Var(0),
                                        0,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Dest, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Dest, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Dest, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                        d1array(Dest, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array9(Dest, _x2, 0, _k3) ==
                                 d1array(Dest, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array9(Dest,
                                        _x2,
                                        0,
                                        _k3) ==
                                   d1array(Dest, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array9(Dest, _x2!2, 0, _k3) ==
                            d1array(Dest, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array9(Dest, _x2!2, 0, _k3) ==
                       d1array(Dest, _x2!2)))),
            Not(d1array9(Dest, _x2!2, 0, _k3) ==
                d1array(Dest, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        d1array9(Dest,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                        d1array12(Dest,
                                        _x2!2,
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                                    Or(Not(_x2!2 >= 0),
                                       Not(_k3 >= 0),
                                       d1array9(Dest,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                       d1array12(Dest,
                                        _x2!2,
                                        _k3))) ==
                                 Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                                    Not(_x2!2 >= 0),
                                    Not(_k3 >= 0),
                                    d1array9(Dest,
                                        _x2!2,
                                        0,
                                        _k3) ==
                                    d1array12(Dest,
                                        _x2!2,
                                        _k3))),
                         Or(Not(ForAll([_x2, _n3],
                                       Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                            Not(_x2!2 >= 0),
                            Not(_k3 >= 0),
                            d1array9(Dest, _x2!2, 0, _k3) ==
                            d1array12(Dest, _x2!2, _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                                   quant-intro(rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array9(Dest,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Dest,
                                        Var(1),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Dest,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Dest,
                                        Var(1),
                                        Var(0)))),
                                        (ForAll([_x2, _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))) ==
                                        (ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3))))),
                                   ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                                nnf-pos(refl(~(Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Dest,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Dest,
                                        Var(1),
                                        Var(0))),
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array9(Dest,
                                        Var(1),
                                        0,
                                        Var(0)) ==
                                        d1array12(Dest,
                                        Var(1),
                                        Var(0))))),
                                        ~(ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3))),
                                        ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3))))),
                                ForAll([_x2, _n3],
                                       Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array9(Dest,
                                        _x2,
                                        0,
                                        _n3) ==
                                        d1array12(Dest,
                                        _x2,
                                        _n3)))),
                            quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(1) >=
                                        0,
                                        Var(0) >= 0) ==
                                        Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0))))),
                                        rewrite(Not(Not(Or(Not(Var(1) >=
                                        0),
                                        Not(Var(0) >= 0)))) ==
                                        Or(Not(Var(1) >= 0),
                                        Not(Var(0) >= 0))),
                                        Not(And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-23 23:58:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Dest, _x2, _k2 + 1, _k3)==d1array(Dest, _x2)),(d1array9(Dest, _x2, _k2 + 2, _k3)==d1array(Dest, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Dest, _x2, _k2 + 1, _k3)==d1array(Dest, _x2)),(d1array9(Dest, _x2, _k2 + 2, _k3)==d1array(Dest, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Dest, _x2, _k2 + 1, _k3)==d1array(Dest, _x2)),(d1array9(Dest, _x2, _k2 + 2, _k3)==d1array(Dest, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(_k3>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array9(Dest, _x2, _k2 + 1, _k3)==d1array(Dest, _x2)),(d1array9(Dest, _x2, _k2 + 2, _k3)==d1array(Dest, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array9(Dest,
                                        _x2,
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest, _x2),
                                        d1array9(Dest,
                                        _x2,
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k2 +
                                        1 ==
                                        1 + _k2),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3)),
                                        (d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k2 +
                                        2 ==
                                        2 + _k2),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Implies(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        rewrite(Implies(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array9(Dest,
                                        Var(0),
                                        2 + _k2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array9(Dest,
                                        Var(0),
                                        _k2 + 1,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array9(Dest,
                                        Var(0),
                                        _k2 + 2,
                                        _k3) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array9(Dest,
                                        Var(0),
                                        1 + _k2,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                       Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k2 >=
                                        0) ==
                                        (_k2 >= -1)),
                                        Not(1 + _k2 >= 0) ==
                                        Not(_k2 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k2 ==
                                        2 + _k2),
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3)),
                                        (d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        (d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)) ==
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 + _k2 >= 0),
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                        Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3)))),
                               rewrite(Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Or(Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))) ==
                                       Or(Not(ForAll([_x2,
                                        _n3,
                                        _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                        Not(_x2!2 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k2 >= -1),
                                        d1array9(Dest,
                                        _x2!2,
                                        2 + _k2,
                                        _k3) ==
                                        d1array9(Dest,
                                        _x2!2,
                                        1 + _k2,
                                        _k3))),
                               Or(Not(ForAll([_x2, _n3, _n2],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        d1array9(Dest,
                                        _x2,
                                        1 + _n2,
                                        _n3) ==
                                        d1array9(Dest,
                                        _x2,
                                        _n2,
                                        _n3)))),
                                  Or(Not(_x2!2 >= 0),
                                     Not(_k3 >= 0),
                                     Not(1 + _k2 >= 0),
                                     d1array9(Dest,
                                        _x2!2,
                                        1 + 1 + _k2,
                                        _k3) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2)))

***********************
2017-04-23 23:58:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Dest, _x2, _k3)==d1array(Dest, _x2)),(d1array12(Dest, _x2, _k3 + 1)==d1array(Dest, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Dest, _x2, _k3)==d1array(Dest, _x2)),(d1array12(Dest, _x2, _k3 + 1)==d1array(Dest, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Dest, _x2, _k3)==d1array(Dest, _x2)),(d1array12(Dest, _x2, _k3 + 1)==d1array(Dest, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Dest, _x2, _k3)==d1array(Dest, _x2)),(d1array12(Dest, _x2, _k3 + 1)==d1array(Dest, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)))),
                              trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)) ==
                                        Or(False,
                                        False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        rewrite(Or(False,
                                        False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                    rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2)))

***********************
2017-04-23 23:59:40
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Source, _x2, _k3)==d1array(Source, _x2)),(d1array12(Source, _x2, _k3 + 1)==d1array(Source, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Source, _x2, _k3)==d1array(Source, _x2)),(d1array12(Source, _x2, _k3 + 1)==d1array(Source, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Source, _x2, _k3)==d1array(Source, _x2)),(d1array12(Source, _x2, _k3 + 1)==d1array(Source, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Source, _x2, _k3)==d1array(Source, _x2)),(d1array12(Source, _x2, _k3 + 1)==d1array(Source, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)))),
                              trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)) ==
                                        Or(False,
                                        False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        rewrite(Or(False,
                                        False,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)) ==
                                        (d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(0 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899)),
                                    rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        0,
                                        _k3) ==
                                        899) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2)))

***********************
2017-04-23 23:59:58
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Weight, _x2, _k3)==d1array(Weight, _x2)),(d1array12(Weight, _x2, _k3 + 1)==d1array(Weight, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Weight, _x2, _k3)==d1array(Weight, _x2)),(d1array12(Weight, _x2, _k3 + 1)==d1array(Weight, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Weight, _x2, _k3)==d1array(Weight, _x2)),(d1array12(Weight, _x2, _k3 + 1)==d1array(Weight, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array12(Weight, _x2, _k3)==d1array(Weight, _x2)),(d1array12(Weight, _x2, _k3 + 1)==d1array(Weight, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array12(Weight,
                                        _x2,
                                        _k3) ==
                                        d1array(Weight, _x2),
                                        d1array12(Weight,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(Weight, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k3 +
                                        1 ==
                                        1 + _k3),
                                        d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3)),
                                        (d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        rewrite(Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array12(Weight,
                                        Var(0),
                                        _k3 + 1) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array12(Weight,
                                        Var(0),
                                        _k3) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array12(Weight,
                                        Var(0),
                                        1 + _k3) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array12(Weight,
                                        _x2,
                                        _k3) ==
                                        d1array(Weight, _x2),
                                        d1array12(Weight,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(Weight, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array12(Weight,
                                        _x2,
                                        _k3) ==
                                        d1array(Weight, _x2)),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _k3) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array12(Weight,
                                        _x2,
                                        _k3) ==
                                        d1array(Weight, _x2),
                                        d1array12(Weight,
                                        _x2,
                                        _k3 + 1) ==
                                        d1array(Weight, _x2))))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array12(Weight,
                                        _x2,
                                        _k3) ==
                                        d1array(Weight, _x2)),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _k3) ==
                                        d1array(Weight, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 Not(d1array12(Weight,
                                        _x2,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
                                       Or(Not(_x2!522 >= 0),
                                        Not(_k3 >= 0),
                                        d1array12(Weight,
                                        _x2!522,
                                        1 + _k3) ==
                                        d1array9(Weight,
                                        _x2!522,
                                        _N2(_k3),
                                        _k3)))),
                         rewrite(Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
                                    Or(Not(_x2!522 >= 0),
                                       Not(_k3 >= 0),
                                       d1array12(Weight,
                                        _x2!522,
                                        1 + _k3) ==
                                       d1array9(Weight,
                                        _x2!522,
                                        _N2(_k3),
                                        _k3))) ==
                                 Or(Not(ForAll([_x2, _n3],
                                        Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
                                    Not(_x2!522 >= 0),
                                    Not(_k3 >= 0),
                                    d1array12(Weight,
                                        _x2!522,
                                        1 + _k3) ==
                                    d1array9(Weight,
                                        _x2!522,
                                        _N2(_k3),
                                        _k3))),
                         Or(Not(ForAll([_x2, _n3],
                                       Or(Not(_x2 >= 0),
                                        Not(_n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
                            Not(_x2!522 >= 0),
                            Not(_k3 >= 0),
                            d1array12(Weight,
                                      _x2!522,
                                      1 + _k3) ==
                            d1array9(Weight,
                                     _x2!522,
                                     _N2(_k3),
                                     _k3))),
                      mp(mp(mp~(mp(asserted(ForAll([_x2,
                                        _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        _n3 + 1) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(0) +
                                        1 ==
                                        1 + Var(0)),
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array12(Weight,
                                        Var(1),
                                        1 + Var(0))),
                                        (d1array12(Weight,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0))) ==
                                        (d1array12(Weight,
                                        Var(1),
                                        1 + Var(0)) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0))) ==
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(1),
                                        1 + Var(0)) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0)))),
                                        rewrite(Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(1),
                                        1 + Var(0)) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array12(Weight,
                                        Var(1),
                                        1 + Var(0)) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0)))),
                                        Implies(And(Var(1) >=
                                        0,
                                        Var(0) >= 0),
                                        d1array12(Weight,
                                        Var(1),
                                        Var(0) + 1) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0))) ==
                                        Or(Not(And(Var(1) >=
                                        0,
                                        Var(0) >= 0)),
                                        d1array12(Weight,
                                        Var(1),
                                        1 + Var(0)) ==
                                        d1array9(Weight,
                                        Var(1),
                                        _N2(Var(0)),
                                        Var(0)))),
                                        (ForAll([_x2, _n3],
                                        Implies(And(_x2 >= 0,
                                        _n3 >= 0),
                                        d1array12(Weight,
                                        _x2,
                                        _n3 + 1) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))) ==
                                        (ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3))))),
                                   ForAll([_x2, _n3],
                                        Or(Not(And(_x2 >= 0,
                                        _n3 >= 0)),
                                        d1array12(Weight,
                                        _x2,
                                        1 + _n3) ==
                                        d1array9(Weight,
                                        _x2,
                                        _N2(_n3),
                                        _n3)))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2)))

***********************
2017-04-24 00:00:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d1array12(distance, d1array9(Dest, _n2, _n2, _k3 - 1), _k3)==If(_n1==0,0,899)),(d1array12(distance, d1array9(Dest, _n2, _n2, _k3), _k3 + 1)==If(_n1==0,0,899)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d1array12(distance, d1array9(Dest, _n2, _n2, _k3 - 1), _k3)==If(_n1==0,0,899)),(d1array12(distance, d1array9(Dest, _n2, _n2, _k3), _k3 + 1)==If(_n1==0,0,899)))))

System try to prove 
ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d1array12(distance, d1array9(Dest, _n2, _n2, _k3 - 1), _k3)==If(_n1==0,0,899)),(d1array12(distance, d1array9(Dest, _n2, _n2, _k3), _k3 + 1)==If(_n1==0,0,899)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _k3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _k3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _k3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array12(distance, _x2, _k3) == If(_n1==0,0,899))))
_s.add(Not(ForAll([_n1,_n2],Implies(And(_n1>=0,_n2>=0),Implies((d1array12(distance, d1array9(Dest, _n2, _n2, _k3 - 1), _k3)==If(_n1==0,0,899)),(d1array12(distance, d1array9(Dest, _n2, _n2, _k3), _k3 + 1)==If(_n1==0,0,899)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(1 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)))),
                              trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)) ==
                                        Or(False,
                                        False,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        rewrite(Or(False,
                                        False,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899) ==
                                        (d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)) ==
                                        (d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        Or(Not(1 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899))) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899)),
                                    rewrite(Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
                                        d1array12(distance,
                                        1,
                                        _k3) ==
                                        899) ==
                                        Or(Not(ForAll([_x2,
                                        _n1],
                                        Or(Not(_x2 >= 0),
                                        Not(_n1 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        0,
                                        d1array12(distance,
                                        _x2,
                                        _k3) ==
                                        899)))),
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899)))

***********************
2017-04-24 00:01:54
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array(Source, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array(Source, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array(Source, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array(Source, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array23(Source, _x2, 0) ==
                                 d1array(Source, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Source, _x2, 0) ==
                                   d1array(Source, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array23(Source, _x2!2, 0) ==
                            d1array(Source, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array23(Source, _x2!2, 0) ==
                       d1array(Source, _x2!2)))),
            Not(d1array23(Source, _x2!2, 0) ==
                d1array(Source, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        0) ==
                                        d1array12(Source,
                                        _x2!2,
                                        _N3)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array23(Source,
                                        _x2!2,
                                        0) ==
                                       d1array12(Source,
                                        _x2!2,
                                        _N3))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                                    Not(_x2!2 >= 0),
                                    d1array23(Source,
                                        _x2!2,
                                        0) ==
                                    d1array12(Source,
                                        _x2!2,
                                        _N3))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                            Not(_x2!2 >= 0),
                            d1array23(Source, _x2!2, 0) ==
                            d1array12(Source, _x2!2, _N3))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3)),
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array23(Source,
                                        _x2,
                                        0) ==
                                       d1array12(Source,
                                        _x2,
                                        _N3)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array12(Source,
                                        Var(0),
                                        _N3))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array12(Source,
                                        _x2,
                                        _N3))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Source, _x2, 0) ==
                                   d1array12(Source,
                                        _x2,
                                        _N3)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
                                        _x2,
                                        0) ==
                                        d1array(Source, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Source,
                                        Var(0),
                                        0) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Source,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-24 00:01:55
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Source, _x2, _k5 + 1)==d1array(Source, _x2)),(d1array23(Source, _x2, _k5 + 2)==d1array(Source, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Source, _x2, _k5 + 1)==d1array(Source, _x2)),(d1array23(Source, _x2, _k5 + 2)==d1array(Source, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Source, _x2, _k5 + 1)==d1array(Source, _x2)),(d1array23(Source, _x2, _k5 + 2)==d1array(Source, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Source, _x2, _k5 + 1)==d1array(Source, _x2)),(d1array23(Source, _x2, _k5 + 2)==d1array(Source, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array23(Source,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Source, _x2),
                                        d1array23(Source,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Source, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array23(Source,
                                        Var(0),
                                        1 + _k5)),
                                        (d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5)),
                                        (d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        (d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Implies(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        rewrite(Implies(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Source,
                                        Var(0))) ==
                                        Or(Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Source,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Source,
                                        Var(0)),
                                        d1array23(Source,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Source,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Source,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Source,
                                        Var(0))),
                                        d1array23(Source,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Source,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Source,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Source, _x2),
                                        d1array23(Source,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Source, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array23(Source,
                                        _x2,
                                        1 + _k5) ==
                                        d1array(Source, _x2)),
                                        d1array23(Source,
                                        _x2,
                                        2 + _k5) ==
                                        d1array(Source, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Source,
                                        _x2,
                                        _k5 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                       Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        2 + _k5)),
                                        (d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5)) ==
                                        (d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5)) ==
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5))) ==
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5)))),
                               rewrite(Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5))) ==
                                       Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                        Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Source,
                                        _x2!2,
                                        1 + _k5))),
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                  Or(Not(1 + _k5 >= 0),
                                     Not(_x2!2 >= 0),
                                     d1array23(Source,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                     d1array23(Source,
                                        _x2!2,
                                        1 + _k5))) ==
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                  Not(_k5 >= -1),
                                  Not(_x2!2 >= 0),
                                  d1array23(Source,
                                        _x2!2,
                                        2 + _k5) ==
                                  d1array23(Source,
                                        _x2!2,
                                        1 + _k5))),
                         Or(Not(ForAll([_n5, _x2],
                                       Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                            Not(_k5 >= -1),
                            Not(_x2!2 >= 0),
                            d1array23(Source,
                                      _x2!2,
                                      2 + _k5) ==
                            d1array23(Source,
                                      _x2!2,
                                      1 + _k5))),
                      mp(mp(mp~(mp(asserted(ForAll([_n5,
                                        _x2],
                                        Implies(And(_n5 >= 0,
                                        _x2 >= 0),
                                        d1array23(Source,
                                        _x2,
                                        _n5 + 1) ==
                                        d1array23(Source,
                                        _x2,
                                        _n5)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d1array23(Source,
                                        Var(0),
                                        Var(1) + 1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2)))

***********************
2017-04-24 00:01:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), 0) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), 0) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))

System try to prove 
ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), 0) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), 0) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        899)))),
                                        Or(Not(1 >= 0),
                                        Not(_n3!269 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)))),
                              trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(_n3!269 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)) ==
                                        Or(False,
                                        Not(_n3!269 >= 0),
                                        False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)),
                                        rewrite(Or(False,
                                        Not(_n3!269 >= 0),
                                        False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899) ==
                                        Or(Not(_n3!269 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(_n3!269 >= 0),
                                        Not(1 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
                                        1,
                                        _n3!269),
                                        _N3) ==
                                        899)) ==
                                        Or(Not(_n3!269 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        1,
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-24 00:02:02
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Implies((d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 1)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))),(d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 2)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Implies((d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 1)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))),(d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 2)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))))))

System try to prove 
ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Implies((d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 1)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))),(d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 2)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),Implies((d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 1)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))),(d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _k5 + 2)==If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3))))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        899)))),
                                        Or(Not(1 >= 0),
                                        Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)))),
                              trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)) ==
                                        Or(False,
                                        Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        rewrite(Or(False,
                                        Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899) ==
                                        Or(Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)) ==
                                        Or(Not(_n3!263 >= 0),
                                        Not(_n2!262 >= 0),
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2!262,
                                        _n2!262,
                                        _n3!263),
                                        _N3) ==
                                        899)),
                                        Or(Not(ForAll([_n1,
                                        _n3,
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3))))

***********************
2017-04-24 00:02:07
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array(Weight, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array(Weight, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array(Weight, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array(Weight, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array23(Weight, _x2, 0) ==
                                 d1array(Weight, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Weight, _x2, 0) ==
                                   d1array(Weight, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array23(Weight, _x2!2, 0) ==
                            d1array(Weight, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array23(Weight, _x2!2, 0) ==
                       d1array(Weight, _x2!2)))),
            Not(d1array23(Weight, _x2!2, 0) ==
                d1array(Weight, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2!2,
                                        _N3)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array23(Weight,
                                        _x2!2,
                                        0) ==
                                       d1array12(Weight,
                                        _x2!2,
                                        _N3))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                                    Not(_x2!2 >= 0),
                                    d1array23(Weight,
                                        _x2!2,
                                        0) ==
                                    d1array12(Weight,
                                        _x2!2,
                                        _N3))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                            Not(_x2!2 >= 0),
                            d1array23(Weight, _x2!2, 0) ==
                            d1array12(Weight, _x2!2, _N3))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3)),
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array23(Weight,
                                        _x2,
                                        0) ==
                                       d1array12(Weight,
                                        _x2,
                                        _N3)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array12(Weight,
                                        Var(0),
                                        _N3))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array12(Weight,
                                        _x2,
                                        _N3))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Weight, _x2, 0) ==
                                   d1array12(Weight,
                                        _x2,
                                        _N3)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
                                        _x2,
                                        0) ==
                                        d1array(Weight, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Weight,
                                        Var(0),
                                        0) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Weight,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-24 00:02:08
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Weight, _x2, _k5 + 1)==d1array(Weight, _x2)),(d1array23(Weight, _x2, _k5 + 2)==d1array(Weight, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Weight, _x2, _k5 + 1)==d1array(Weight, _x2)),(d1array23(Weight, _x2, _k5 + 2)==d1array(Weight, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Weight, _x2, _k5 + 1)==d1array(Weight, _x2)),(d1array23(Weight, _x2, _k5 + 2)==d1array(Weight, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Weight, _x2, _k5 + 1)==d1array(Weight, _x2)),(d1array23(Weight, _x2, _k5 + 2)==d1array(Weight, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array23(Weight,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Weight, _x2),
                                        d1array23(Weight,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Weight, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array23(Weight,
                                        Var(0),
                                        1 + _k5)),
                                        (d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5)),
                                        (d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        (d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Implies(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        rewrite(Implies(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Weight,
                                        Var(0))) ==
                                        Or(Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Weight,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Weight,
                                        Var(0)),
                                        d1array23(Weight,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Weight,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Weight,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Weight,
                                        Var(0))),
                                        d1array23(Weight,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Weight,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Weight,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Weight, _x2),
                                        d1array23(Weight,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Weight, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array23(Weight,
                                        _x2,
                                        1 + _k5) ==
                                        d1array(Weight, _x2)),
                                        d1array23(Weight,
                                        _x2,
                                        2 + _k5) ==
                                        d1array(Weight, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Weight,
                                        _x2,
                                        _k5 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                       Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        2 + _k5)),
                                        (d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5)) ==
                                        (d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5)) ==
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))) ==
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5)))),
                               rewrite(Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))) ==
                                       Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                        Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))),
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                  Or(Not(1 + _k5 >= 0),
                                     Not(_x2!2 >= 0),
                                     d1array23(Weight,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                     d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))) ==
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                  Not(_k5 >= -1),
                                  Not(_x2!2 >= 0),
                                  d1array23(Weight,
                                        _x2!2,
                                        2 + _k5) ==
                                  d1array23(Weight,
                                        _x2!2,
                                        1 + _k5))),
                         Or(Not(ForAll([_n5, _x2],
                                       Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                            Not(_k5 >= -1),
                            Not(_x2!2 >= 0),
                            d1array23(Weight,
                                      _x2!2,
                                      2 + _k5) ==
                            d1array23(Weight,
                                      _x2!2,
                                      1 + _k5))),
                      mp(mp(mp~(mp(asserted(ForAll([_n5,
                                        _x2],
                                        Implies(And(_n5 >= 0,
                                        _x2 >= 0),
                                        d1array23(Weight,
                                        _x2,
                                        _n5 + 1) ==
                                        d1array23(Weight,
                                        _x2,
                                        _n5)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d1array23(Weight,
                                        Var(0),
                                        Var(1) + 1) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, _N5) == d1array(Weight, _x2)))

***********************
2017-04-24 00:02:09
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array(Dest, _x2)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array(Dest, _x2)))

System try to prove 
ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array(Dest, _x2)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, _N5) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array(Dest, _x2)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                   monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2)))) ==
                                Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                   Not(ForAll(_x2,
                              Or(Not(_x2 >= 0),
                                 d1array23(Dest, _x2, 0) ==
                                 d1array(Dest, _x2))))),
                sk(~(Not(ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Dest, _x2, 0) ==
                                   d1array(Dest, _x2)))),
                     Not(Or(Not(_x2!2 >= 0),
                            d1array23(Dest, _x2!2, 0) ==
                            d1array(Dest, _x2!2))))),
                Not(Or(Not(_x2!2 >= 0),
                       d1array23(Dest, _x2!2, 0) ==
                       d1array(Dest, _x2!2)))),
            Not(d1array23(Dest, _x2!2, 0) ==
                d1array(Dest, _x2!2))), trans(unit-resolution(mp(quant-inst(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                                       Or(Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2!2,
                                        _N3)))),
                         rewrite(Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                                    Or(Not(_x2!2 >= 0),
                                       d1array23(Dest,
                                        _x2!2,
                                        0) ==
                                       d1array12(Dest,
                                        _x2!2,
                                        _N3))) ==
                                 Or(Not(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                                    Not(_x2!2 >= 0),
                                    d1array23(Dest,
                                        _x2!2,
                                        0) ==
                                    d1array12(Dest,
                                        _x2!2,
                                        _N3))),
                         Or(Not(ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                            Not(_x2!2 >= 0),
                            d1array23(Dest, _x2!2, 0) ==
                            d1array12(Dest, _x2!2, _N3))),
                      mp(mp~(mp(asserted(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                                quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3))))),
                                ForAll(_x2,
                                       Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))),
                             nnf-pos(refl(~(Or(Not(Var(0) >=
                                        0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3)),
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3)))),
                                     ~(ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3))),
                                       ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3))))),
                             ForAll(_x2,
                                    Or(Not(_x2 >= 0),
                                       d1array23(Dest,
                                        _x2,
                                        0) ==
                                       d1array12(Dest,
                                        _x2,
                                        _N3)))),
                         quant-intro(refl(Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3)) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array12(Dest,
                                        Var(0),
                                        _N3))),
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3)))) ==
                                     (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array12(Dest,
                                        _x2,
                                        _N3))))),
                         ForAll(_x2,
                                Or(Not(_x2 >= 0),
                                   d1array23(Dest, _x2, 0) ==
                                   d1array12(Dest, _x2, _N3)))),
                      not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
                                        d1array(Dest, _x2))))),
                                        monotonicity(quant-intro(rewrite(Implies(Var(0) >=
                                        0,
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(Var(0) >= 0),
                                        d1array23(Dest,
                                        Var(0),
                                        0) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        d1array23(Dest,
                                        _x2,
                                        0) ==
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-04-24 00:02:10
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Dest, _x2, _k5 + 1)==d1array(Dest, _x2)),(d1array23(Dest, _x2, _k5 + 2)==d1array(Dest, _x2)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Dest, _x2, _k5 + 1)==d1array(Dest, _x2)),(d1array23(Dest, _x2, _k5 + 2)==d1array(Dest, _x2)))))

System try to prove 
ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Dest, _x2, _k5 + 1)==d1array(Dest, _x2)),(d1array23(Dest, _x2, _k5 + 2)==d1array(Dest, _x2)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, _N5) == d1array(Weight, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_x2],Implies(_x2>=0,Implies((d1array23(Dest, _x2, _k5 + 1)==d1array(Dest, _x2)),(d1array23(Dest, _x2, _k5 + 2)==d1array(Dest, _x2)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll(_x2,
                                       Implies(_x2 >= 0,
                                        Implies(d1array23(Dest,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Dest, _x2),
                                        d1array23(Dest,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Dest, _x2)))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array23(Dest,
                                        Var(0),
                                        1 + _k5)),
                                        (d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        monotonicity(monotonicity(rewrite(_k5 +
                                        2 ==
                                        2 + _k5),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5)),
                                        (d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        (d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Implies(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        rewrite(Implies(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Dest,
                                        Var(0))) ==
                                        Or(Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Implies(Var(0) >= 0,
                                        Or(Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0))))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        Or(Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        Implies(Var(0) >= 0,
                                        Implies(d1array23(Dest,
                                        Var(0),
                                        _k5 + 1) ==
                                        d1array(Dest,
                                        Var(0)),
                                        d1array23(Dest,
                                        Var(0),
                                        _k5 + 2) ==
                                        d1array(Dest,
                                        Var(0)))) ==
                                        Or(Not(Var(0) >= 0),
                                        Not(d1array23(Dest,
                                        Var(0),
                                        1 + _k5) ==
                                        d1array(Dest,
                                        Var(0))),
                                        d1array23(Dest,
                                        Var(0),
                                        2 + _k5) ==
                                        d1array(Dest,
                                        Var(0)))),
                                        (ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Dest,
                                        _x2,
                                        _k5 + 1) ==
                                        d1array(Dest, _x2),
                                        d1array23(Dest,
                                        _x2,
                                        _k5 + 2) ==
                                        d1array(Dest, _x2))))) ==
                                        (ForAll(_x2,
                                        Or(Not(_x2 >= 0),
                                        Not(d1array23(Dest,
                                        _x2,
                                        1 + _k5) ==
                                        d1array(Dest, _x2)),
                                        d1array23(Dest,
                                        _x2,
                                        2 + _k5) ==
                                        d1array(Dest, _x2))))),
                                Not(ForAll(_x2,
                                        Implies(_x2 >= 0,
                                        Implies(d1array23(Dest,
                                        _x2,
                                        _k5 + 1) ==
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                       Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5)))),
                         trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        2 + _k5)),
                                        (d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5)) ==
                                        (d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5)) ==
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))),
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                        Or(Not(1 + _k5 >= 0),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))) ==
                                        Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5)))),
                               rewrite(Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                        Or(Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))) ==
                                       Or(Not(ForAll([_n5,
                                        _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                        Not(_k5 >= -1),
                                        Not(_x2!2 >= 0),
                                        d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                        d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))),
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                  Or(Not(1 + _k5 >= 0),
                                     Not(_x2!2 >= 0),
                                     d1array23(Dest,
                                        _x2!2,
                                        1 + 1 + _k5) ==
                                     d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))) ==
                               Or(Not(ForAll([_n5, _x2],
                                        Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                  Not(_k5 >= -1),
                                  Not(_x2!2 >= 0),
                                  d1array23(Dest,
                                        _x2!2,
                                        2 + _k5) ==
                                  d1array23(Dest,
                                        _x2!2,
                                        1 + _k5))),
                         Or(Not(ForAll([_n5, _x2],
                                       Or(Not(_n5 >= 0),
                                        Not(_x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        1 + _n5) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                            Not(_k5 >= -1),
                            Not(_x2!2 >= 0),
                            d1array23(Dest, _x2!2, 2 + _k5) ==
                            d1array23(Dest, _x2!2, 1 + _k5))),
                      mp(mp(mp~(mp(asserted(ForAll([_n5,
                                        _x2],
                                        Implies(And(_n5 >= 0,
                                        _x2 >= 0),
                                        d1array23(Dest,
                                        _x2,
                                        _n5 + 1) ==
                                        d1array23(Dest,
                                        _x2,
                                        _n5)))),
                                   quant-intro(trans(monotonicity(monotonicity(monotonicity(rewrite(Var(1) +
                                        1 ==
                                        1 + Var(1)),
                                        d1array23(Dest,
                                        Var(0),
                                        Var(1) + 1) ==
                                        d1array23(Dest,
                                        Var(0),
                                        1 + Var(1))),
                                        (d1array23(Dest,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, _N5) == d1array(Dest, _x2)))

***********************
2017-04-24 00:02:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n5],Implies(_n5>=0,d1array23(distance, _n5, _N5) >= 0))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5],Implies(_n5>=0,d1array23(distance, _n5, _N5) >= 0))

System try to prove 
ForAll([_n5],Implies(_n5>=0,d1array23(distance, _n5, _N5) >= 0))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j=Int('j')
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
j12=Function('j12',IntSort(),IntSort())
RET21=Function('RET21',IntSort(),IntSort())
j1=Int('j1')
y9=Function('y9',IntSort(),IntSort(),IntSort())
Source=Const('Source',arraySort)
Weight1=Const('Weight1',arraySort)
y1=Int('y1')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
nodecount1=Int('nodecount1')
i21=Function('i21',IntSort(),IntSort())
Dest1=Const('Dest1',arraySort)
_N2=Function('_N2',IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
Source1=Const('Source1',arraySort)
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
y21=Function('y21',IntSort(),IntSort())
main=Int('main')
x21=Function('x21',IntSort(),IntSort())
distance1=Const('distance1',arraySort)
i1=Int('i1')
_N3=Const('_N3',IntSort())
break_1_flag21=Function('break_1_flag21',IntSort(),IntSort())
_N4=Const('_N4',IntSort())
_N5=Const('_N5',IntSort())
source1=Int('source1')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_N1=Const('_N1',IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
x1=Int('x1')
INFINITY1=Int('INFINITY1')
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
edgecount1=Int('edgecount1')
distance=Const('distance',arraySort)
Weight=Const('Weight',arraySort)
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n4=Int('_n4')
_n5=Int('_n5')
Dest=Const('Dest',arraySort)
break_1_flag1=Int('break_1_flag1')
x9=Function('x9',IntSort(),IntSort(),IntSort())
y=Int('y')
x=Int('x')
x12=Function('x12',IntSort(),IntSort())
y12=Function('y12',IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_L1=Int('_L1')
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k2=Int('_k2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_L2=Int('_L2')
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
_k3=Int('_k3')
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
d1array1=Function('d1array1',arraySort,IntSort(),IntSort())
d1array12=Function('d1array12',arraySort,IntSort(),IntSort(),IntSort())
d1array23=Function('d1array23',arraySort,IntSort(),IntSort(),IntSort())
d1array4=Function('d1array4',arraySort,IntSort(),IntSort(),IntSort())
d1array=Function('d1array',arraySort,IntSort(),IntSort())
d1array9=Function('d1array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Weight, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Weight, _x2, _N5),d1array12(Weight, _x2, _N3)))))
_s.add(INFINITY1 == 899)
_s.add(edgecount1 == 20)
_s.add(i1 == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),_N5,i21(_N4)))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Source, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Source, _x2, _N5),d1array12(Source, _x2, _N3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(distance, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(distance, _x2, _N5),d1array12(distance, _x2, _N3)))))
_s.add(j1 == j12(_N3))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array1(Dest, _x2) == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),d1array23(Dest, _x2, _N5),d1array12(Dest, _x2, _N3)))))
_s.add(main == If(d1array12(distance, x21(_N4), _N3) <= d1array12(Weight, i21(_N4), _N3) + d1array12(distance, y21(_N4), _N3),0,RET21(_N4)))
_s.add(y1 == y21(_N4))
_s.add(source1 == 0)
_s.add(break_1_flag1 == break_1_flag21(_N4))
_s.add(nodecount1 == 5)
_s.add(x1 == x21(_N4))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Source, _x2, _n1 + 1) == d1array4(Source, _x2, _n1))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _n1 + 1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Weight, _x2, _n1 + 1) == d1array4(Weight, _x2, _n1))))
_s.add(ForAll([_x2,_n1],Implies(And(_x2>=0,_n1>=0),d1array4(Dest, _x2, _n1 + 1) == d1array4(Dest, _x2, _n1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, 0) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(distance, _x2, 0) == d1array(distance, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, 0) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, 0) == d1array(Dest, _x2))))
_s.add(_N1 >= 5)
_s.add(ForAll([_n1],Implies(And(_n1 < _N1,_n1>=0),_f(_n1) < 5)))
_s.add(Or(_N1==0,_N1 - 1 < 5))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),y9(_n2 + 1, _n3) == d1array9(Source, _n2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),x9(_n2 + 1, _n3) == d1array9(Dest, _n2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Source, _x2, _n2 + 1, _n3) == d1array9(Source, _x2, _n2, _n3))))
_s.add(ForAll([_n3,_n2],Implies(And(_n3>=0,_n2>=0),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2 + 1, _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3) > d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(Weight, _n2, _n2, _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _n2, _n3),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _n2, _n3)))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Weight, _x2, _n2 + 1, _n3) == d1array9(Weight, _x2, _n2, _n3))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(Dest, _x2, _n2 + 1, _n3) == d1array9(Dest, _x2, _n2, _n3))))
_s.add(ForAll([_n3],y9(0, _n3) == y12(_n3)))
_s.add(ForAll([_n3],x9(0, _n3) == x12(_n3)))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, 0, _n3) == d1array12(Source, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(distance, _x2, 0, _n3) == d1array12(distance, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, 0, _n3) == d1array12(Weight, _x2, _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, 0, _n3) == d1array12(Dest, _x2, _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,_N2(_n3) >= 20)))
_s.add(ForAll([_n3,_n2],Implies(And(_n2 < _N2(_n3),And(_n3>=0,_n2>=0)),_f(_n2) < 20)))
_s.add(ForAll([_n3],Implies(_n3>=0,Or(_N2(_n3)==0,_N2(_n3) - 1 < 20))))
_s.add(ForAll([_n3],Implies(_n3>=0,x12(_n3 + 1) == x9(_N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,y12(_n3 + 1) == y9(_N2(_n3), _n3))))
_s.add(ForAll([_n3],Implies(_n3>=0,j12(_n3 + 1) == _N2(_n3))))
_s.add(x12(0) == x)
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, 0) == d1array4(Source, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(distance, _x2, 0) == d1array4(distance, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, 0) == d1array4(Weight, _x2, _N1))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, 0) == d1array4(Dest, _x2, _N1))))
_s.add(y12(0) == y)
_s.add(j12(0) == j)
_s.add(_N3 >= 5)
_s.add(ForAll([_n3],Implies(And(_n3 < _N3,_n3>=0),_f(_n3) < 5)))
_s.add(Or(_N3==0,_N3 - 1 < 5))
_s.add(ForAll([_n4],Implies(_n4>=0,i21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,x21(_n4 + 1) == d1array12(Dest, i21(_n4), _N3))))
_s.add(ForAll([_n4],Implies(_n4>=0,RET21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) > d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),0,RET21(_n4)))))
_s.add(ForAll([_n4],Implies(_n4>=0,break_1_flag21(_n4 + 1) == If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3)>(d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3)+d1array12(Weight,If(d1array12(distance, d1array12(Dest, i21(_n4), _N3), _N3) <= d1array12(Weight, i21(_n4), _N3) + d1array12(distance, d1array12(Source, i21(_n4), _N3), _N3),i21(_n4) + 1,i21(_n4)),_N3)),1,0))))
_s.add(ForAll([_n4],Implies(_n4>=0,y21(_n4 + 1) == d1array12(Source, i21(_n4), _N3))))
_s.add(i21(0) == 0)
_s.add(x21(0) == x12(_N3))
_s.add(RET21(0) == 0)
_s.add(break_1_flag21(0) == 0)
_s.add(y21(0) == y12(_N3))
_s.add(Or(i21(_N4) >= 20,(break_1_flag21(_N4)!=0)))
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),And(i21(_f(_n4)) < 20,(break_1_flag21(_f(_n4))==0)))))
_s.add(Or(_N4==0,And(i21((_N4-1)) < 20,(break_1_flag21((_N4-1))==0))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Source, _x2, _n5 + 1) == d1array23(Source, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(distance, _x2, _n5 + 1) == d1array23(distance, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Weight, _x2, _n5 + 1) == d1array23(Weight, _x2, _n5))))
_s.add(ForAll([_n5,_x2],Implies(And(_n5>=0,_x2>=0),d1array23(Dest, _x2, _n5 + 1) == d1array23(Dest, _x2, _n5))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, 0) == d1array12(Source, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(distance, _x2, 0) == d1array12(distance, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, 0) == d1array12(Weight, _x2, _N3))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, 0) == d1array12(Dest, _x2, _N3))))
_s.add(_N5 >= 5)
_s.add(ForAll([_n5],Implies(And(_n5 < _N5,_n5>=0),_f(_n5) < 5)))
_s.add(Or(_N5==0,_N5 - 1 < 5))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Source, _x2, _N1) == d1array(Source, _x2))))
_s.add(ForAll([_n1],Implies(_n1>=0,d1array4(distance, _n1, _N1) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Weight, _x2, _N1) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array4(Dest, _x2, _N1) == d1array(Dest, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Source, _x2, _n3 + 1) == d1array9(Source, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(distance, _x2, _n3 + 1) == d1array9(distance, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Weight, _x2, _n3 + 1) == d1array9(Weight, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array12(Dest, _x2, _n3 + 1) == d1array9(Dest, _x2, _N2(_n3), _n3))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Source, _x2, _N2(_n3), _n3) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Weight, _x2, _N2(_n3), _n3) == d1array(Weight, _x2))))
_s.add(ForAll([_x2,_n3],Implies(And(_x2>=0,_n3>=0),d1array9(Dest, _x2, _N2(_n3), _n3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Dest, _x2, _N3) == d1array(Dest, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Source, _x2, _N3) == d1array(Source, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array12(Weight, _x2, _N3) == d1array(Weight, _x2))))
_s.add(ForAll([_n1,_n3,_n2],Implies(And(_n1>=0,And(_n3>=0,_n2>=0)),d1array12(distance, d1array9(Dest, _n2, _n2, _n3), _N3) == If(_n1==0,0,899))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Source, _x2, _N5) == d1array(Source, _x2))))
_s.add(ForAll([_x2,_n3,_n2],Implies(And(_x2>=0,And(_n3>=0,_n2>=0)),d1array23(distance, d1array9(Dest, _n2, _n2, _n3), _N5) == If(d1array9(distance, d1array9(Dest, _n2, _n2, _n3), _N2(_n3), _n3) > d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(Weight, _n2, _N2(_n3), _n3) + d1array9(distance, d1array9(Source, _n2, _n2, _n3), _N2(_n3), _n3),d1array9(distance, _x2, _N2(_n3), _n3)))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Weight, _x2, _N5) == d1array(Weight, _x2))))
_s.add(ForAll([_x2],Implies(_x2>=0,d1array23(Dest, _x2, _N5) == d1array(Dest, _x2))))
_s.add(Dest1 == Dest)
_s.add(distance1 == distance)
_s.add(Weight1 == Weight)
_s.add(Source1 == Source)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k5>=0)
_s.add(Not(ForAll([_n5],Implies(_n5>=0,d1array23(distance, _n5, _N5) >= 0))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">sv-benchmarks/loops/eureka_01_true-unreach-call.i</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'sv-benchmarks/loops/eureka_01_true-unreach-call.i']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[trans(trans(symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        If(_n1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        _n2,
                                        _n2,
                                        _n3),
                                        _N3) ==
                                        899)))),
                                        Or(Not(1 >= 0),
                                        Not(6 >= 0),
                                        Not(0 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)))),
                                    trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((6 >=
                                        0) ==
                                        True),
                                        Not(6 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(6 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 ==
                                        0) ==
                                        False),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899) ==
                                        If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)),
                                        rewrite(If(False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(6 >= 0),
                                        Not(0 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)) ==
                                        Or(False,
                                        False,
                                        False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)),
                                        rewrite(Or(False,
                                        False,
                                        False,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899) ==
                                        (d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        899)),
                                        Or(Not(1 >= 0),
                                        Not(6 >= 0),
                                        Not(0 >= 0),
                                        If(1 == 0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
                                        6),
                                        _N3) ==
                                        0,
                                        d1array12(distance,
                                        d1array9(Dest,
                                        0,
                                        0,
..., rewrite((899 == 0) == False), False]

Result 
Successfully Proved


Result --Successfully Proved
