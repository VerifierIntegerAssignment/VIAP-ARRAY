
***********************
2017-05-20 00:29:24
***********************

Command--Translate 

Parameters--
 File Name--multi/init-non-constant-4-u/init-non-constant-4-u.c

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l2(_n1 + 1)=l2(_n1) + 1,l2(0)=l
 Closed Form Solution
_n1 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k5(_n2 + 1)=k5(_n2) + 1,k5(0)=k
 Closed Form Solution
_n2 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j9(_n3 + 1)=j9(_n3) + 1,j9(0)=j
 Closed Form Solution
_n3 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i14(_n4 + 1)=i14(_n4) + 1,i14(0)=i
 Closed Form Solution
_n4 + i

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=l

Closed form solution return by sympy 
l + n

Original Axoims 
l16(_n5 + 1)=l16(_n5) + 1,l16(0)=l
 Closed Form Solution
_n5 + l

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=k

Closed form solution return by sympy 
k + n

Original Axoims 
k19(_n6 + 1)=k19(_n6) + 1,k19(0)=k
 Closed Form Solution
_n6 + k

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=j

Closed form solution return by sympy 
j + n

Original Axoims 
j23(_n7 + 1)=j23(_n7) + 1,j23(0)=j
 Closed Form Solution
_n7 + j

Equation Pass to sympy
T(n+1)-(T(n) + 1)=0------Base Case--T(0)=i

Closed form solution return by sympy 
i + n

Original Axoims 
i28(_n8 + 1)=i28(_n8) + 1,i28(0)=i
 Closed Form Solution
_n8 + i

***********************
2017-05-20 00:29:31
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(asserted(ForAll([_x3, _x2, _x5, _x4],
                   Implies(And(_x3 >= 0,
                               And(_x2 >= 0,
                                   And(_x5 >= 0, _x4 >= 0))),
                           d4array14(A,
                                     _x2,
                                     _x3,
                                     _x4,
                                     _x5,
                                     0) ==
                           d4array(A, _x2, _x3, _x4, _x5)))),
   quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     rewrite(Implies(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                             Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                     Implies(And(Var(3) >= 0,
                                 And(Var(2) >= 0,
                                     And(Var(1) >= 0,
                                        Var(0) >= 0))),
                             d4array14(A,
                                       Var(2),
                                       Var(3),
                                       Var(0),
                                       Var(1),
                                       0) ==
                             d4array(A,
                                     Var(2),
                                     Var(3),
                                     Var(0),
                                     Var(1))) ==
                     Or(Not(And(Var(3) >= 0,
                                Var(2) >= 0,
                                Var(1) >= 0,
                                Var(0) >= 0)),
                        d4array14(A,
                                  Var(2),
                                  Var(3),
                                  Var(0),
                                  Var(1),
                                  0) ==
                        d4array(A,
                                Var(2),
                                Var(3),
                                Var(0),
                                Var(1)))),
               (ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5)))) ==
               (ForAll([_x3, _x2, _x5, _x4],
                       Or(Not(And(_x3 >= 0,
                                  _x2 >= 0,
                                  _x5 >= 0,
                                  _x4 >= 0)),
                          d4array14(A,
                                    _x2,
                                    _x3,
                                    _x4,
                                    _x5,
                                    0) ==
                          d4array(A, _x2, _x3, _x4, _x5))))),
   ForAll([_x3, _x2, _x5, _x4],
          Or(Not(And(_x3 >= 0, _x2 >= 0, _x5 >= 0, _x4 >= 0)),
             d4array14(A, _x2, _x3, _x4, _x5, 0) ==
             d4array(A, _x2, _x3, _x4, _x5)))), mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                       Implies(And(_x3 >= 0,
                                   And(_x2 >= 0,
                                       And(_x5 >= 0,
                                        _x4 >= 0))),
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                               d4array(A,
                                       _x2,
                                       _x3,
                                       _x4,
                                       _x5))))),
   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                  Or(Not(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                     d4array14(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0) ==
                                     d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                            (ForAll([_x3, _x2, _x5, _x4],
                                    Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                       d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                       d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Implies(And(_x3 >= 0,
                                       And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                   d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                   d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                Not(ForAll([_x3, _x2, _x5, _x4],
                           Or(Not(And(_x3 >= 0,
                                      _x2 >= 0,
                                      _x5 >= 0,
                                      _x4 >= 0)),
                              d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:29:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, 0, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array9(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                                Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array9(A,
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                        d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                       d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k4) ==
                                    d4array14(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_k4 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k4) ==
                            d4array14(A,
                                      _x2!10,
                                      _x3!11,
                                      _x4!8,
                                      _x5!9,
                                      _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n4,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n4 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0)))),
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n4) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n4)))),
                                   quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:29:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

System try to prove 
ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k3=Int('_k3')
_k4=Int('_k4')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, 0, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[not-or-elim(mp~(mp(asserted(Not(ForAll([_x3, _x2, _x5, _x4],
                                       Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
                   monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1))) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array5(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1),
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        Var(2),
                                        Var(3),
                                        Var(0),
                                        Var(1)))),
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5)))) ==
                                        (ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(And(_x3 >= 0,
                                        _x2 >= 0,
                                        _x5 >= 0,
                                        _x4 >= 0)),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5))))),
..., trans(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                       Or(Not(_x3!11 >= 0),
                                        Not(_x2!10 >= 0),
                                        Not(_x5!9 >= 0),
                                        Not(_x4!8 >= 0),
                                        Not(_k4 >= 0),
                                        Not(_k3 >= 0),
                                        d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                        d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4)))),
                         rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Or(Not(_x3!11 >= 0),
                                       Not(_x2!10 >= 0),
                                       Not(_x5!9 >= 0),
                                       Not(_x4!8 >= 0),
                                       Not(_k4 >= 0),
                                       Not(_k3 >= 0),
                                       d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                       d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))) ==
                                 Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                                    Not(_x3!11 >= 0),
                                    Not(_x2!10 >= 0),
                                    Not(_x5!9 >= 0),
                                    Not(_x4!8 >= 0),
                                    Not(_k4 >= 0),
                                    Not(_k3 >= 0),
                                    d4array5(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        0,
                                        _k3,
                                        _k4) ==
                                    d4array9(A,
                                        _x2!10,
                                        _x3!11,
                                        _x4!8,
                                        _x5!9,
                                        _k3,
                                        _k4))),
                         Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                       Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n3 >= 0),
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0,
                                        _n3,
                                        _n4) ==
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n3,
                                        _n4)))),
                            Not(_x3!11 >= 0),
                            Not(_x2!10 >= 0),
                            Not(_x5!9 >= 0),
                            Not(_x4!8 >= 0),
                            Not(_k4 >= 0),
                            Not(_k3 >= 0),
                            d4array5(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     0,
                                     _k3,
                                     _k4) ==
                            d4array9(A,
                                     _x2!10,
                                     _x3!11,
                                     _x4!8,
                                     _x5!9,
                                     _k3,
                                     _k4))),
                      mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n3],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:29:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == C + _k2 + _k3 + _k4']
 Strategy--Automatically Deriving Addition Axoimes

Query --

d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == C + _k2 + _k3 + _k4

System try to prove 
d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == C + _k2 + _k3 + _k4

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) == C + _k2 + _k3 + _k4))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4 >= 0),
                    Not(0 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    C +
                    _k2 +
                    _k4 +
                    0 +
                    _k3 +
                    -1*
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             1 + 0,
                             _k2,
                             _k3,
                             _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        0 ==
                                        1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        C +
                                        _k2 +
                                        _k4 +
                                        0 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        0 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        rewrite(C +
                                        _k2 +
                                        _k4 +
                                        0 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        C +
                                        _k2 +
                                        _k4 +
                                        0 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (C +
                                        _k2 +
                                        _k4 +
                                        0 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1 + 0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        -1*
                                        d4array2(A,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), mp(mp(asserted(Not(d4array2(A,
                            _k4,
                            _k3,
                            _k2,
                            0,
                            1,
                            _k2,
                            _k3,
                            _k4) ==
                   C + _k2 + _k3 + _k4)),
      monotonicity(monotonicity(trans(monotonicity(rewrite(C +
                                        _k2 +
                                        _k3 ==
                                        C + _k2 + _k3),
                                        C + _k2 + _k3 + _k4 ==
                                        C + _k2 + _k3 + _k4),
                                      rewrite(C +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C + _k2 + _k3 + _k4),
                                      C + _k2 + _k3 + _k4 ==
                                      C + _k2 + _k3 + _k4),
                                (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 C + _k2 + _k3 + _k4) ==
                                (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        0,
                                        1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                 C + _k2 + _k3 + _k4)),
                   Not(d4array2(A,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                1,
                                _k2,
                                _k3,
                                _k4) ==
                       C + _k2 + _k3 + _k4) ==
                   Not(d4array2(A,
                                _k4,
                                _k3,
                                _k2,
                                0,
                                1,
                                _k2,
                                _k3,
                                _k4) ==
                       C + _k2 + _k3 + _k4)),
      Not(d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) ==
          C + _k2 + _k3 + _k4)),
   monotonicity(rewrite((d4array2(A,
                                  _k4,
                                  _k3,
                                  _k2,
                                  0,
                                  1,
                                  _k2,
                                  _k3,
                                  _k4) ==
                         C + _k2 + _k3 + _k4) ==
                        (C +
                         _k2 +
                         _k3 +
                         _k4 +
                         -1*
                         d4array2(A,
                                  _k4,
                                  _k3,
                                  _k2,
                                  0,
                                  1,
                                  _k2,
                                  _k3,
                                  _k4) ==
                         0)),
                Not(d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             1,
                             _k2,
                             _k3,
                             _k4) ==
                    C + _k2 + _k3 + _k4) ==
                Not(C +
                    _k2 +
                    _k3 +
                    _k4 +
                    -1*
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             0,
                             1,
                             _k2,
                             _k3,
                             _k4) ==
                    0)),
   Not(C +
       _k2 +
       _k3 +
       _k4 +
       -1*d4array2(A, _k4, _k3, _k2, 0, 1, _k2, _k3, _k4) ==
       0)), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:30:00
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4 + 1))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4 + 1))

System try to prove 
Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4 + 1))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4 + 1))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4 >= 0),
                    Not(1 + _k1 >= 0),
                    Not(_k3 >= 0),
                    Not(_k2 >= 0),
                    C +
                    _k2 +
                    _k4 +
                    1 +
                    _k1 +
                    _k3 +
                    -1*
                    d4array2(A,
                             _k4,
                             _k3,
                             _k2,
                             1 + _k1,
                             1 + 1 + _k1,
                             _k2,
                             _k3,
                             _k4) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k1 >=
                                        0) ==
                                        (_k1 >= -1)),
                                        Not(1 + _k1 >= 0) ==
                                        Not(_k1 >= -1)),
                                   trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k1 ==
                                        2 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        C +
                                        _k2 +
                                        _k4 +
                                        1 +
                                        _k1 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        1 +
                                        _k1 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        rewrite(C +
                                        _k2 +
                                        _k4 +
                                        1 +
                                        _k1 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        1 +
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        C +
                                        _k2 +
                                        _k4 +
                                        1 +
                                        _k1 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        1 +
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (C +
                                        _k2 +
                                        _k4 +
                                        1 +
                                        _k1 +
                                        _k3 +
                                        -1*
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        1 + 1 + _k1,
                                        _k2,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., asserted(_k2 >= 0), asserted(_k3 >= 0), asserted(_k4 >= 0), mp(not-or-elim(mp(asserted(Not(Implies(d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       C +
                                       _k1 +
                                       _k2 +
                                       _k3 +
                                       _k4,
                                       d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                       C +
                                       _k1 +
                                       _k2 +
                                       _k3 +
                                       _k4 +
                                       1))),
                  monotonicity(trans(monotonicity(monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        _k1 +
                                        _k2 ==
                                        C + _k1 + _k2),
                                        C + _k1 + _k2 + _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        rewrite(C +
                                        _k1 +
                                        _k2 +
                                        _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        C + _k1 + _k2 + _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        rewrite(C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        _k1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4) ==
                                        (d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1,
                                        1 + _k1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        monotonicity(monotonicity(rewrite(_k1 +
                                        1 ==
                                        1 + _k1),
                                        rewrite(_k1 + 2 ==
                                        2 + _k1),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _k1 + 1,
                                        _k1 + 2,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        1 + _k1,
                                        2 + _k1,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        _k1 +
                                        _k2 ==
                                        C + _k1 + _k2),
                                        C + _k1 + _k2 + _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        rewrite(C +
                                        _k1 +
                                        _k2 +
                                        _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        C + _k1 + _k2 + _k3 ==
                                        C + _k1 + _k2 + _k3),
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        rewrite(C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4),
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        1 ==
                                        C +
                                        _k1 +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        1),
                                        rewrite(C +
..., unit-resolution(th-lemma(Or(_k1 >= -1, Not(_k1 >= 0))),
                asserted(_k1 >= 0),
                _k1 >= -1), False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:30:03
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

Implies((d4array2(A, _k4, _k3, _k2, _k1, _k1 + 1, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4),(d4array2(A, _k4, _k3, _k2, _k1 + 1, _k1 + 2, _k2, _k3, _k4)==C + _k1 + _k2 + _k3 + _k4 + 1))

System try to prove 
Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(Not(Implies(ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)),ForAll([_k4,_n1,_k3,_k2],Implies(And(And(And(And(And(_k4>=0,And(_n1>=0,And(_k3>=0,_k2>=0))),_n1<_L1),_L1>0),_n1<_L1+1),_L1>0),d4array2(A, _k4, _k3, _k2, _n1, _n1 + 1, _k2, _k3, _k4) == C + _n1 + _k2 + _k3 + _k4)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                               0))),
                 Or(Not(_k4!11 >= 0),
                    Not(_n1!10 >= 0),
                    Not(_k3!9 >= 0),
                    Not(_k2!8 >= 0),
                    C +
                    _k2!8 +
                    _k4!11 +
                    _n1!10 +
                    _k3!9 +
                    -1*
                    d4array2(A,
                             _k4!11,
                             _k3!9,
                             _k2!8,
                             _n1!10,
                             1 + _n1!10,
                             _k2!8,
                             _k3!9,
                             _k4!11) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _k2!8 +
                                        _k4!11 +
                                        _n1!10 +
                                        _k3!9 +
                                        -1*
                                        d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11) ==
                                        C +
                                        _k2!8 +
                                        _k3!9 +
                                        _n1!10 +
                                        _k4!11 +
                                        -1*
                                        d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11)),
                                        (C +
                                        _k2!8 +
                                        _k4!11 +
                                        _n1!10 +
                                        _k3!9 +
                                        -1*
                                        d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11) ==
                                        0) ==
                                        (C +
                                        _k2!8 +
                                        _k3!9 +
                                        _n1!10 +
                                        _k4!11 +
                                        -1*
                                        d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11) ==
                                        0)),
                                   Or(Not(_k4!11 >= 0),
                                      Not(_n1!10 >= 0),
                                      Not(_k3!9 >= 0),
                                      Not(_k2!8 >= 0),
                                      C +
                                      _k2!8 +
                                      _k4!11 +
                                      _n1!10 +
                                      _k3!9 +
                                      -1*
                                      d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11) ==
                                      0) ==
                                   Or(Not(_k4!11 >= 0),
                                      Not(_n1!10 >= 0),
                                      Not(_k3!9 >= 0),
                                      Not(_k2!8 >= 0),
                                      C +
                                      _k2!8 +
                                      _k3!9 +
                                      _n1!10 +
                                      _k4!11 +
                                      -1*
                                      d4array2(A,
                                        _k4!11,
                                        _k3!9,
                                        _k2!8,
                                        _n1!10,
                                        1 + _n1!10,
                                        _k2!8,
                                        _k3!9,
                                        _k4!11) ==
                                      0)),
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
                                       Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       C +
                                       _n2 +
                                       _n4 +
                                       _n1 +
                                       _n3 +
                                       -1*
                                       d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        1 + _n1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                       0))),
                         Or(Not(_k4!11 >= 0),
                            Not(_n1!10 >= 0),
                            Not(_k3!9 >= 0),
                            Not(_k2!8 >= 0),
                            C +
                            _k2!8 +
                            _k4!11 +
                            _n1!10 +
                            _k3!9 +
                            -1*
                            d4array2(A,
                                     _k4!11,
                                     _k3!9,
                                     _k2!8,
                                     _n1!10,
                                     1 + _n1!10,
                                     _k2!8,
                                     _k3!9,
                                     _k4!11) ==
                            0)) ==
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
                                       Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       C +
                                       _n2 +
                                       _n4 +
                                       _n1 +
                                       _n3 +
                                       -1*
                                       d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array2(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _n1 + 1,
                                        _n2,
                                        _n3,
                                        _n4) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., and-elim(not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        And(..., ...)),
                                        Var(2) < _L1) ==
                                        And(And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
..., and-elim(not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        And(..., ...)),
                                        Var(2) < _L1) ==
                                        And(And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
..., and-elim(not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        And(..., ...)),
                                        Var(2) < _L1) ==
                                        And(And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
..., and-elim(not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4))))),
                                        monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... ==
                                        ...),
                                        And(..., ...) ==
                                        And(..., ...)),
                                        rewrite(And(...,
                                        ...) ==
                                        And(...,
                                        ...,
                                        ...,
                                        ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(... <= ...)),
                                        And(And(... >= ...,
                                        And(..., ...)),
                                        Var(2) < _L1) ==
                                        And(And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...))),
                                        rewrite(And(And(... >=
                                        ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...),
                                        Not(... <= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(... <= ...))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
..., not-or-elim(mp(mp~(mp(not-or-elim(mp(asserted(Not(Implies(ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4)),
                                        ForAll([_k4,
                                        _n1,
                                        _k3,
                                        _k2],
                                        Implies(And(And(And(And(And(_k4 >=
                                        0,
                                        And(_n1 >= 0,
                                        And(_k3 >= 0,
                                        _k2 >= 0))),
                                        _n1 < _L1),
                                        _L1 > 0),
                                        _n1 < _L1 + 1),
                                        _L1 > 0),
                                        d4array2(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _n1 + 1,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _n1 +
                                        _k2 +
                                        _k3 +
                                        _k4))))),
                                     monotonicity(trans(monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(...,
                                        ...) ==
                                        And(..., ..., ...)),
                                        And(... >= ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        And(..., ..., ...))),
                                        rewrite(And(... >=
                                        ...,
                                        And(..., ..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        rewrite((Var(2) <
                                        _L1) ==
                                        Not(_L1 <= Var(2))),
                                        And(And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))),
                                        Var(2) < _L1) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2)))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        Not(_L1 <= Var(2))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        And(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)))),
                                        rewrite((_L1 > 0) ==
                                        Not(_L1 <= 0)),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0))),
                                        rewrite(And(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2))),
                                        Not(_L1 <= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        And(And(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        Var(2) < _L1),
                                        _L1 > 0) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0,
                                        Not(_L1 <= Var(2)),
                                        Not(_L1 <= 0))),
                                        monotonicity(monotonicity(rewrite(Var(2) +
                                        1 ==
                                        1 + Var(2)),
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        Var(2) + 1,
                                        Var(0),
                                        Var(1),
                                        Var(3)) ==
                                        d4array2(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + Var(2),
                                        Var(0),
                                        Var(1),
                                        Var(3))),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:30:12
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==d4array(A, _k4, _k3, _k2 - 1, _n1)),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:32:30
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == C + _k3 + _k4 + _n1))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == C + _k3 + _k4 + _n1))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == C + _k3 + _k4 + _n1))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array5(A, _k4, _k3, 0, _n1, 1, _k3, _k4) == C + _k3 + _k4 + _n1))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(1 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    0 +
                    1 +
                    0 +
                    -1*
                    d4array5(A, 0, 0, 0, 0, _k2, _k3, _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        1 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (C +
                                        0 +
                                        0 +
                                        1 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0)),
                                        rewrite((1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        -1)),
                                        (C +
                                        0 +
                                        0 +
                                        1 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                -1),
                            C +
                            -1*
                            d4array5(A,
                                     0,
                                     0,
                                     0,
                                     0,
                                     _k2,
                                     _k3,
                                     _k4) <=
                            -1)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) <=
                                        -1),
                                        Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) >=
                                        0))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0),
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        -1*
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:32:39
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array5(A, _x2, _x3, _x4, _x5, _k2, _k3, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array5(A, _k4, _k3, _k2 - 1, _n1, _k2, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array5(A, _k4, _k3, _k2, _n1, _k2 + 1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(1 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    1 +
                    0 +
                    0 +
                    -1*
                    d4array5(A, 0, 0, 0, 0, _k2, _k3, _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0)),
                                        rewrite((1 +
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        -1)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                -1),
                            C +
                            -1*
                            d4array5(A,
                                     0,
                                     0,
                                     0,
                                     0,
                                     _k2,
                                     _k3,
                                     _k4) <=
                            -1)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) <=
                                        -1),
                                        Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) >=
                                        0))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0),
                                        C +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array5(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k2,
                                        _k3,
                                        _k4) ==
                                        C +
                                        -1*
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:33:22
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==d4array(A, _k4, _k3 - 1, _k2, _n1)),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:35:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == C + _k2 + _k4 + _n1))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == C + _k2 + _k4 + _n1))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == C + _k2 + _k4 + _n1))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array9(A, _k4, 0, _k2, _n1, 1, _k4) == C + _k2 + _k4 + _n1))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(C +
                                _k2 +
                                _k4 +
                                _n1!2950 +
                                -1*
                                d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                0),
                            C +
                            _k2 +
                            _k4 +
                            _n1!2950 +
                            -1*
                            d4array5(A,
                                     _k4,
                                     0,
                                     _k2,
                                     _n1!2950,
                                     _N2(0, _k4),
                                     0,
                                     _k4) >=
                            0)),
                lemma(th-lemma(unit-resolution(unit-resolution(th-lemma(Or(C +
                                        _k2 +
                                        _k4 +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        1,
                                        _k4) +
                                        _n1!2950 ==
                                        0,
                                        Not(C +
                                        _k2 +
                                        _k4 +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        1,
                                        _k4) +
                                        _n1!2950 <=
                                        0),
                                        Not(C +
                                        _k2 +
                                        _k4 +
                                        -1*
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        1,
                                        _k4) +
                                        _n1!2950 >=
                                        0))),
                                        not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1,
                                        1,
                                        _k4) ==
                                        C + _k2 + _k4 + _n1)))),
                                        monotonicity(quant-intro(trans(monotonicity(monotonicity(trans(monotonicity(rewrite(C +
                                        _k2 +
                                        _k4 ==
                                        C + _k2 + _k4),
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)),
                                        rewrite(C +
                                        _k2 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)),
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)),
                                        (d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)) ==
                                        (d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0))),
                                        Implies(Var(0) >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)) ==
                                        Implies(Var(0) >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0))),
                                        rewrite(Implies(Var(0) >=
                                        0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0))),
                                        Implies(Var(0) >= 0,
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0)) ==
                                        Or(Not(Var(0) >= 0),
                                        d4array9(A,
                                        _k4,
                                        0,
                                        _k2,
                                        Var(0),
                                        1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        Var(0))),
..., lemma(unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array5(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N2(_n3, _n4),
                                        _n3,
                                        _n4) ==
                                        0))),
                                       Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
                                        Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0))),
                         trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4)),
                                        (C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0)),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
                                        Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
                                        False,
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0)),
                                        rewrite(Or(Not(_k4 >=
                                        0),
                                        Not(_n1!2950 >= 0),
                                        False,
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0)),
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
                                        Not(0 >= 0),
                                        Not(_k2 >= 0),
                                        C +
                                        _k2 +
                                        _k4 +
                                        _n1!2950 +
                                        0 +
                                        -1*
                                        d4array5(A,
                                        _k4,
                                        0,
                                        _k2,
                                        _n1!2950,
                                        _N2(0, _k4),
                                        0,
                                        _k4) ==
                                        0) ==
                                        Or(Not(_k4 >= 0),
                                        Not(_n1!2950 >= 0),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:36:01
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==C + _k2 + _k3 + _k4 + _n1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==C + _k2 + _k3 + _k4 + _n1))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==C + _k2 + _k3 + _k4 + _n1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array9(A, _x2, _x3, _x4, _x5, _k3, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array9(A, _k4, _k3 - 1, _k2, _n1, _k3, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array9(A, _k4, _k3, _k2, _n1, _k3 + 1, _k4)==C + _k2 + _k3 + _k4 + _n1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(0 >= 0),
                    Not(_n1!2614 >= 0),
                    Not(0 >= 0),
                    Not(17321 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    17321 +
                    0 +
                    0 +
                    -1*
                    d4array9(A, 0, 0, 0, _n1!2614, _k3, _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((17321 >=
                                        0) ==
                                        True),
                                        Not(17321 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(17321 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        17321 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        17321 +
                                        C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4)),
                                        (C +
                                        0 +
                                        17321 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (17321 +
                                        C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        0)),
                                        rewrite((17321 +
                                        C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        -17321)),
                                        (C +
                                        0 +
                                        17321 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        -17321)),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2614 >= 0),
                                        Not(0 >= 0),
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
..., not-or-elim(mp~(mp(mp(asserted(Not(ForAll(_n1,
                                        Implies(_n1 >= 0,
                                        Implies(d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        _n1,
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        _n1 -
                                        1,
                                        d4array9(A,
                                        _k4,
                                        _k3,
                                        _k2,
                                        _n1,
                                        _k3 + 1,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        _n1))))),
                      monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(monotonicity(monotonicity(trans(rewrite(_k3 -
                                        1 ==
                                        _k3 + -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        _k3 + -1*1 ==
                                        _k3 + -1),
                                        rewrite(_k3 + -1 ==
                                        -1 + _k3),
                                        _k3 + -1*1 ==
                                        -1 + _k3),
                                        _k3 - 1 == -1 + _k3),
                                        d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        d4array9(A,
                                        _k4,
                                        -1 + _k3,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4)),
                                        trans(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C + _k2 + _k3 + _k4 ==
                                        C + _k2 + _k3 + _k4),
                                        rewrite(C +
                                        _k2 +
                                        _k3 +
                                        _k4 ==
                                        C + _k2 + _k3 + _k4),
                                        C + _k2 + _k3 + _k4 ==
                                        C + _k2 + _k3 + _k4),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        rewrite(C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1 ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1),
                                        rewrite(C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1 ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1*1),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1 ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1*1),
                                        trans(monotonicity(rewrite(-1*
                                        1 ==
                                        -1),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1*1 ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1),
                                        rewrite(C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1 ==
                                        -1 +
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) +
                                        -1*1 ==
                                        -1 +
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1 ==
                                        -1 +
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0)),
                                        (d4array9(A,
                                        _k4,
                                        _k3 - 1,
                                        _k2,
                                        Var(0),
                                        _k3,
                                        _k4) ==
                                        C +
                                        _k2 +
                                        _k3 +
                                        _k4 +
                                        Var(0) -
                                        1) ==
                                        (d4array9(A,
                                        _k4,
                                        -1 + _k3,
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                -17321),
                            C +
                            -1*
                            d4array9(A,
                                     0,
                                     0,
                                     0,
                                     _n1!2614,
                                     _k3,
                                     _k4) >=
                            -17321)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) >=
                                        -17321),
                                        Not(C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) <=
                                        -17322))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        -17322),
                                        C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) <=
                                        -17322)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array9(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(_n1!2614 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(17322 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        17322 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((17322 >=
                                        0) ==
                                        True),
                                        Not(17322 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(17322 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        17322 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4) ==
                                        17322 +
                                        C +
                                        -1*
                                        d4array9(A,
                                        0,
                                        0,
                                        0,
                                        _n1!2614,
                                        _k3,
                                        _k4)),
                                        (C +
                                        0 +
                                        0 +
                                        17322 +
                                        0 +
                                        -1*
                                        d4array9(A,
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:37:25
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==d4array(A, _k4 - 1, _k3, _k2, _n1)),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==d4array(A, _k4, _k3, _k2, _n1)))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

Result 
Failed To Prove


Result --Failed to Prove

***********************
2017-05-20 00:39:37
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == C + _k2 + _k3 + _n1))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == C + _k2 + _k3 + _n1))

System try to prove 
ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == C + _k2 + _k3 + _n1))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,d4array14(A, 0, _k3, _k2, _n1, 1) == C + _k2 + _k3 + _n1))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(1 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    1 +
                    0 +
                    0 +
                    -1*d4array14(A, 0, 0, 0, 0, _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0)),
                                        rewrite((1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        -1)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        -1)),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(1 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                -1),
                            C +
                            -1*d4array14(A, 0, 0, 0, 0, _k4) <=
                            -1)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) <=
                                        -1),
                                        Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) >=
                                        0))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0),
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4)),
                                        (C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:39:49
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==C + _k2 + _k3 + _k4 + _n1))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==C + _k2 + _k3 + _k4 + _n1))))

System try to prove 
ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==C + _k2 + _k3 + _k4 + _n1))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array14(A, _x2, _x3, _x4, _x5, _k4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n1],Implies(_n1>=0,Implies((d4array14(A, _k4 - 1, _k3, _k2, _n1, _k4)==C + _k2 + _k3 + _k4 + _n1 - 1),(d4array14(A, _k4, _k3, _k2, _n1, _k4 + 1)==C + _k2 + _k3 + _k4 + _n1))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                               0))),
                 Or(Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(1 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    1 +
                    0 +
                    0 +
                    -1*d4array14(A, 0, 0, 0, 0, _k4) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0)),
                                        rewrite((1 +
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        -1)),
                                        (C +
                                        0 +
                                        1 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        -1)),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(1 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                -1),
                            C +
                            -1*d4array14(A, 0, 0, 0, 0, _k4) <=
                            -1)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) <=
                                        -1),
                                        Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) >=
                                        0))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0),
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) >=
                                        0)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k4) ==
                                        0))),
                                        Or(Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4)),
                                        (C +
                                        0 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
                                        0,
                                        0,
                                        _k4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        0,
                                        0,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:40:00
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == C + _n1 + _n2 + _n3 + _n4))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == C + _n1 + _n2 + _n3 + _n4))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == C + _n1 + _n2 + _n3 + _n4))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, 0) == C + _n1 + _n2 + _n3 + _n4))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0)),
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            -1*
                            d4array28(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      0) <=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        _x4 >= 0))),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        0) ==
                                        d4array14(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N4)))),
                                        quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
..., unit-resolution(unit-resolution(th-lemma(Or(C +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11 +
                                        -1*
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) ==
                                        0,
                                        Not(C +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11 +
                                        -1*
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) <=
                                        0),
                                        Not(C +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11 +
                                        -1*
                                        d4array28(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        0) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4)))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                _n2!8 +
                                _n3!9 +
                                _n1!10 +
                                _n4!11 ==
                                0),
                            C +
                            -1*
                            d4array14(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      _N4) +
                            _n2!8 +
                            _n3!9 +
                            _n1!10 +
                            _n4!11 <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n3 +
                                        _n1 +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) ==
                                        0))),
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        C +
                                        _n2!8 +
                                        _n4!11 +
                                        _n3!9 +
                                        _n1!10 +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _n2!8 +
                                        _n4!11 +
                                        _n3!9 +
                                        _n1!10 +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        C +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11),
                                        (C +
                                        _n2!8 +
                                        _n4!11 +
                                        _n3!9 +
                                        _n1!10 +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11 ==
                                        0)),
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        C +
                                        _n2!8 +
                                        _n4!11 +
                                        _n3!9 +
                                        _n1!10 +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0) ==
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        C +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) +
                                        _n2!8 +
                                        _n3!9 +
                                        _n1!10 +
                                        _n4!11 ==
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n3 +
                                        _n1 +
                                        -1*
                                        d4array14(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N4) ==
                                        0))),
                                        Or(Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n3!9 >= 0),
                                        Not(_n2!8 >= 0),
                                        C +
                                        _n2!8 +
                                        _n4!11 +
                                        _n3!9 +
                                        _n1!10 +
                                        -1*
                                        d4array14(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        _N4) ==
                                        0)) ==
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n3 +
                                        _n1 +
                                        -1*
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:40:16
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == C + _n1 + _n2 + _n3 + _n4))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == C + _n1 + _n2 + _n3 + _n4))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == C + _n1 + _n2 + _n3 + _n4))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(_k8>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array23(A, _n4, _n3, _n2, _n1, 0, _k8) == C + _n1 + _n2 + _n3 + _n4))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_x3,
                             _x2,
                             _x5,
                             _x4,
                             _n4,
                             _n1,
                             _n3,
                             _n2],
                            Or(Not(_x3 >= 0),
                               Not(_x2 >= 0),
                               Not(_x5 >= 0),
                               Not(_x4 >= 0),
                               Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n3 +
                               _n1 +
                               -1*
                               d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                               0))),
                 Or(Not(_n3!2095 >= 0),
                    Not(_n4!2097 >= 0),
                    Not(_n1!2096 >= 0),
                    Not(_n2!2094 >= 0),
                    Not(0 >= 0),
                    Not(0 >= 0),
                    Not(14606 >= 0),
                    Not(0 >= 0),
                    C +
                    0 +
                    0 +
                    14606 +
                    0 +
                    -1*
                    d4array28(A,
                              _n4!2097,
                              _n3!2095,
                              _n2!2094,
                              _n1!2096,
                              _k8) ==
                    0))),
   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((14606 >=
                                        0) ==
                                        True),
                                        Not(14606 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(14606 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        0 +
                                        0 +
                                        14606 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        14606 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8)),
                                        (C +
                                        0 +
                                        0 +
                                        14606 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        (14606 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0)),
                                        rewrite((14606 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        -14606)),
                                        (C +
                                        0 +
                                        0 +
                                        14606 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        -14606)),
                                        Or(Not(_n3!2095 >= 0),
                                        Not(_n4!2097 >= 0),
                                        Not(_n1!2096 >= 0),
                                        Not(_n2!2094 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(14606 >= 0),
                                        Not(0 >= 0),
                                        C +
                                        0 +
                                        0 +
                                        14606 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n3!2095 >= 0),
                                        Not(_n4!2097 >= 0),
                                        Not(_n1!2096 >= 0),
                                        Not(_n2!2094 >= 0),
                                        False,
                                        False,
                                        False,
                                        False,
                                        C +
                                        -1*
                                        d4array28(A,
..., mp(mp~(mp(mp(asserted(ForAll([_x3,
                              _x2,
                              _x5,
                              _x4,
                              _n4,
                              _n1,
                              _n3,
                              _n2],
                             Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_x5 >= 0,
                                        And(_x4 >= 0,
                                        And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))))))),
                                     d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                     C +
                                     _n1 +
                                     _n2 +
                                     _n3 +
                                     _n4))),
             quant-intro(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(And(... >=
                                        ...,
                                        And(..., ...)) ==
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)),
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        And(..., ...))) ==
                                        And(Var(3) >= 0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(... >= ...,
                                        ... >= ...,
                                        ... >= ...)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(... >= ...,
                                        ... >= ...)))) ==
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(4) >=
                                        0,
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))) ==
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(5) >=
                                        0,
                                        And(Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))) ==
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(6) >=
                                        0,
                                        And(Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)))))) ==
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        And(Var(5) >= 0,
                                        And(Var(4) >= 0,
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))))))) ==
                                        And(Var(7) >= 0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(7) >=
                                        0,
                                        And(Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(7) >= 0,
                                        Var(6) >= 0,
                                        Var(5) >= 0,
                                        Var(4) >= 0,
                                        Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        0,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        0,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                -14606),
                            C +
                            -1*
                            d4array28(A,
                                      _n4!2097,
                                      _n3!2095,
                                      _n2!2094,
                                      _n1!2096,
                                      _k8) <=
                            -14606)),
                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) <=
                                        -14606),
                                        Not(C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) >=
                                        -14605))),
                                unit-resolution(th-lemma(Or(Not(C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        -14605),
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) >=
                                        -14605)),
                                        unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n3 +
                                        _n1 +
                                        -1*
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!2095 >= 0),
                                        Not(_n4!2097 >= 0),
                                        Not(_n1!2096 >= 0),
                                        Not(_n2!2094 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(0 >= 0),
                                        Not(14605 >= 0),
                                        C +
                                        14605 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0))),
                                        trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((0 >=
                                        0) ==
                                        True),
                                        Not(0 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(0 >= 0) == False),
                                        trans(monotonicity(rewrite((14605 >=
                                        0) ==
                                        True),
                                        Not(14605 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(14605 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite(C +
                                        14605 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        14605 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8)),
                                        (C +
                                        14605 +
                                        0 +
                                        0 +
                                        0 +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        (14605 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0)),
                                        rewrite((14605 +
                                        C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        -1*
                                        d4array28(A,
                                        _n4!2097,
                                        _n3!2095,
                                        _n2!2094,
                                        _n1!2096,
                                        _k8) ==
                                        -14605)),
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:40:52
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k8=Int('_k8')
_k7=Int('_k7')
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x1,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(_x1, _x2, _x3, _x4, _x5) == d4array28(_x1, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(_k8>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array19(A, _n4, _n3, _n2, _n1, 0, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
Error

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:42:38
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array16(A, _n4, _n3, _n2, _n1, 0, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(C +
                                3*_k3 +
                                -1*
                                d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                -1),
                            C +
                            3*_k3 +
                            -1*
                            d4array28(A,
                                      _k3,
                                      _k3,
                                      _k3,
                                      _k3,
                                      _k8) <=
                            -1)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        C +
                                        _k3 +
                                        _k3 +
                                        1 +
                                        _k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1 >=
                                        0) ==
                                        True),
                                        Not(1 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1 >= 0) == False),
                                        trans(monotonicity(rewrite(C +
                                        _k3 +
                                        _k3 +
                                        1 +
                                        _k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        1 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8)),
                                        (C +
                                        _k3 +
                                        _k3 +
                                        1 +
                                        _k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (1 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0)),
                                        rewrite((1 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        -1)),
                                        (C +
                                        _k3 +
                                        _k3 +
                                        1 +
                                        _k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        -1)),
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(1 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        C +
                                        _k3 +
                                        _k3 +
                                        1 +
                                        _k3 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        False,
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        C +
                                        3*_k3 +
                                        -1*
..., unit-resolution(th-lemma(Or(Not(C +
                                3*_k5 +
                                -1*
                                d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                -23061),
                            C +
                            3*_k5 +
                            -1*
                            d4array19(A,
                                      _n4!831,
                                      _n3!829,
                                      _n2!828,
                                      _n1!830,
                                      _k6,
                                      _k7,
                                      _k8) <=
                            -23061)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!829 >= 0),
                                        Not(_n4!831 >= 0),
                                        Not(_n1!830 >= 0),
                                        Not(_n2!828 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(23061 >= 0),
                                        Not(_k5 >= 0),
                                        C +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        23061 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((23061 >=
                                        0) ==
                                        True),
                                        Not(23061 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(23061 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite(C +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        23061 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        23061 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (C +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        23061 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (23061 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0)),
                                        rewrite((23061 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k5 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        -23061)),
                                        (C +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        23061 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k5 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        -23061)),
                                        Or(Not(_n3!829 >= 0),
                                        Not(_n4!831 >= 0),
                                        Not(_n1!830 >= 0),
                                        Not(_n2!828 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(23061 >= 0),
..., unit-resolution(th-lemma(Or(Not(C +
                                3*_k3 +
                                -1*
                                d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                -21455),
                            C +
                            3*_k3 +
                            -1*
                            d4array19(A,
                                      _n4!831,
                                      _n3!829,
                                      _n2!828,
                                      _n1!830,
                                      _k6,
                                      _k7,
                                      _k8) >=
                            -21455)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                        Or(Not(_n3!829 >= 0),
                                        Not(_n4!831 >= 0),
                                        Not(_n1!830 >= 0),
                                        Not(_n2!828 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(21455 >= 0),
                                        Not(_k3 >= 0),
                                        C +
                                        _k3 +
                                        _k3 +
                                        _k3 +
                                        21455 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((21455 >=
                                        0) ==
                                        True),
                                        Not(21455 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(21455 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite(C +
                                        _k3 +
                                        _k3 +
                                        _k3 +
                                        21455 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        21455 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (C +
                                        _k3 +
                                        _k3 +
                                        _k3 +
                                        21455 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (21455 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0)),
                                        rewrite((21455 +
                                        C +
                                        3*_k3 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k3 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        -21455)),
                                        (C +
                                        _k3 +
                                        _k3 +
                                        _k3 +
                                        21455 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k3 +
                                        -1*
                                        d4array19(A,
                                        _n4!831,
                                        _n3!829,
                                        _n2!828,
                                        _n1!830,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        -21455)),
                                        Or(Not(_n3!829 >= 0),
                                        Not(_n4!831 >= 0),
                                        Not(_n1!830 >= 0),
                                        Not(_n2!828 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(21455 >= 0),
..., unit-resolution(th-lemma(Or(Not(C +
                                3*_k5 +
                                -1*
                                d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                -1605),
                            C +
                            3*_k5 +
                            -1*
                            d4array28(A,
                                      _k3,
                                      _k3,
                                      _k3,
                                      _k3,
                                      _k8) >=
                            -1605)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n4 +
                                        _n1 +
                                        _n3 +
                                        -1*
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _k8) ==
                                        0))),
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1605 >= 0),
                                        C +
                                        1605 +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(trans(monotonicity(trans(monotonicity(rewrite((1605 >=
                                        0) ==
                                        True),
                                        Not(1605 >= 0) ==
                                        Not(True)),
                                        rewrite(Not(True) ==
                                        False),
                                        Not(1605 >= 0) ==
                                        False),
                                        trans(monotonicity(rewrite(C +
                                        1605 +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        1605 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8)),
                                        (C +
                                        1605 +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (1605 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0)),
                                        rewrite((1605 +
                                        C +
                                        3*_k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        -1605)),
                                        (C +
                                        1605 +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        3*_k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        -1605)),
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(1605 >= 0),
                                        C +
                                        1605 +
                                        _k5 +
                                        _k5 +
                                        _k5 +
                                        -1*
                                        d4array28(A,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k3,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k3 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        Not(_k5 >= 0),
                                        False,
                                        C +
                                        3*_k5 +
..., False]

Result 
Successfully Proved


Result --Successfully Proved

***********************
2017-05-20 00:42:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array16(A, _n4, _n3, _n2, _n1, _k5 + 1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array16(A, _n4, _n3, _n2, _n1, _k5 + 2, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                            d4array16(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      1 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array16(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      2 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) <=
                            0)),
                mp(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n5 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n5,
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _n5,
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)))),
                                      trans(monotonicity(monotonicity(monotonicity(rewrite((1 +
                                        _k5 >=
                                        0) ==
                                        (_k5 >= -1)),
                                        Not(1 + _k5 >= 0) ==
                                        Not(_k5 >= -1)),
                                        monotonicity(monotonicity(rewrite(1 +
                                        1 +
                                        _k5 ==
                                        2 + _k5),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        (d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8))),
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(1 + _k5 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + 1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)) ==
                                        Or(Not(_n3!9 >= 0),
                                        Not(_n4!11 >= 0),
                                        Not(_n1!10 >= 0),
                                        Not(_n2!8 >= 0),
                                        Not(_k5 >= -1),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
..., unit-resolution(unit-resolution(th-lemma(Or(C +
                                        -1*
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        _n1!10 +
                                        _n4!11 +
                                        _n2!8 +
                                        _n3!9 ==
                                        0,
                                        Not(C +
                                        -1*
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        _n1!10 +
                                        _n4!11 +
                                        _n2!8 +
                                        _n3!9 <=
                                        0),
                                        Not(C +
                                        -1*
                                        d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        2 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                        _n1!10 +
                                        _n4!11 +
                                        _n2!8 +
                                        _n3!9 >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4,
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
..., unit-resolution(th-lemma(Or(Not(C +
                                -1*
                                d4array16(A,
                                        _n4!11,
                                        _n3!9,
                                        _n2!8,
                                        _n1!10,
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8) +
                                _n1!10 +
                                _n4!11 +
                                _n2!8 +
                                _n3!9 ==
                                0),
                            C +
                            -1*
                            d4array16(A,
                                      _n4!11,
                                      _n3!9,
                                      _n2!8,
                                      _n1!10,
                                      1 + _k5,
                                      _k6,
                                      _k7,
                                      _k8) +
                            _n1!10 +
                            _n4!11 +
                            _n2!8 +
                            _n3!9 <=
                            0)),
                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4,
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k5 + 2,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(monotonicity(rewrite(_k5 +
                                        1 ==
                                        1 + _k5),
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
                                        _k7,
                                        _k8)),
                                        trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k5 + 1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array16(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k5,
                                        _k6,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:42:57
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array19(A, _x2, _x3, _x4, _x5, _k6, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array19(A, _n4, _n3, _n2, _n1, _k6, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array19(A, _n4, _n3, _n2, _n1, _k6 + 1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)),
                            d4array19(A,
                                      _n4!539,
                                      _n3!537,
                                      _n2!536,
                                      _n1!538,
                                      1 + _k6,
                                      _k7,
                                      _k8) +
                            -1*
                            d4array16(A,
                                      _n4!539,
                                      _n3!537,
                                      _n2!536,
                                      _n1!538,
                                      _N5(_k6, _k7, _k8),
                                      _k6,
                                      _k7,
                                      _k8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!537 >= 0),
                                        Not(_n4!539 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!537 >= 0),
                                        Not(_n4!539 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n8 >= 0),
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n6,
                                        _n7,
                                        _n8) ==
                                        d4array16(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8)))),
                                        Not(_n3!537 >= 0),
                                        Not(_n4!539 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_k8 >= 0),
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) ==
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
..., unit-resolution(unit-resolution(th-lemma(Or(C +
                                        _n2!536 +
                                        -1*
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 ==
                                        0,
                                        Not(C +
                                        _n2!536 +
                                        -1*
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 <=
                                        0),
                                        Not(C +
                                        _n2!536 +
                                        -1*
                                        d4array19(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        1 + _k6,
                                        _k7,
                                        _k8) +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4,
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k6 + 1,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array19(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        monotonicity(monotonicity(rewrite(_k6 +
                                        1 ==
                                        1 + _k6),
                                        d4array19(A,
                                        Var(3),
..., unit-resolution(th-lemma(Or(Not(C +
                                _n2!536 +
                                _n3!537 +
                                _n1!538 +
                                _n4!539 +
                                -1*
                                d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                0),
                            C +
                            _n2!536 +
                            _n3!537 +
                            _n1!538 +
                            _n4!539 +
                            -1*
                            d4array16(A,
                                      _n4!539,
                                      _n3!537,
                                      _n2!536,
                                      _n1!538,
                                      _N5(_k6, _k7, _k8),
                                      _k6,
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n6,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n6 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        C +
                                        _n1 +
                                        _n3 +
                                        _n2 +
                                        _n4 +
                                        -1*
                                        d4array16(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N5(_n6, _n7, _n8),
                                        _n6,
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!539 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n3!537 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n1!538 +
                                        _n3!537 +
                                        _n2!536 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _n1!538 +
                                        _n3!537 +
                                        _n2!536 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n2!536 +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8)),
                                        (C +
                                        _n1!538 +
                                        _n3!537 +
                                        _n2!536 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        _n2!536 +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0)),
                                        Or(Not(_n4!539 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n3!537 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n1!538 +
                                        _n3!537 +
                                        _n2!536 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n4!539 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k6 >= 0),
                                        Not(_n1!538 >= 0),
                                        Not(_n3!537 >= 0),
                                        Not(_n2!536 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n2!536 +
                                        _n3!537 +
                                        _n1!538 +
                                        _n4!539 +
                                        -1*
                                        d4array16(A,
                                        _n4!539,
                                        _n3!537,
                                        _n2!536,
                                        _n1!538,
                                        _N5(_k6, _k7, _k8),
                                        _k6,
                                        _k7,
                                        _k8) ==
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n7,
                                        _n6,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:43:13
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==C + _n1 + _n2 + _n3 + _n4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==C + _n1 + _n2 + _n3 + _n4))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==C + _n1 + _n2 + _n3 + _n4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array23(A, _x2, _x3, _x4, _x5, _k7, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array23(A, _n4, _n3, _n2, _n1, _k7, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array23(A, _n4, _n3, _n2, _n1, _k7 + 1, _k8)==C + _n1 + _n2 + _n3 + _n4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) ==
                                d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)),
                            d4array23(A,
                                      _n4!565,
                                      _n3!563,
                                      _n2!562,
                                      _n1!564,
                                      1 + _k7,
                                      _k8) +
                            -1*
                            d4array19(A,
                                      _n4!565,
                                      _n3!563,
                                      _n2!562,
                                      _n1!564,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8) <=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!563 >= 0),
                                        Not(_n4!565 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)))),
                                   rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Or(Not(_n3!563 >= 0),
                                        Not(_n4!565 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8)))),
                                        Not(_n3!563 >= 0),
                                        Not(_n4!565 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_k8 >= 0),
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) ==
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8))),
                                   Or(Not(ForAll([_x3,
                                        _x2,
                                        _x5,
                                        _x4,
                                        _n7,
                                        _n8],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n8 >= 0),
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n7,
                                        _n8) ==
                                        d4array19(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
..., unit-resolution(unit-resolution(th-lemma(Or(C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        -1*
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) +
                                        _n4!565 ==
                                        0,
                                        Not(C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        -1*
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) +
                                        _n4!565 <=
                                        0),
                                        Not(C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        -1*
                                        d4array23(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        1 + _k7,
                                        _k8) +
                                        _n4!565 >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4,
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k7 + 1,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7,
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        monotonicity(monotonicity(rewrite(_k7 +
                                        1 ==
                                        1 + _k7),
                                        d4array23(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k7 + 1,
                                        _k8) ==
                                        d4array23(A,
                                        Var(3),
..., unit-resolution(th-lemma(Or(Not(C +
                                _n2!562 +
                                _n3!563 +
                                _n1!564 +
                                _n4!565 +
                                -1*
                                d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                0),
                            C +
                            _n2!562 +
                            _n3!563 +
                            _n1!564 +
                            _n4!565 +
                            -1*
                            d4array19(A,
                                      _n4!565,
                                      _n3!563,
                                      _n2!562,
                                      _n1!564,
                                      _N6(_k7, _k8),
                                      _k7,
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n7,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        C +
                                        _n1 +
                                        _n3 +
                                        _n2 +
                                        _n4 +
                                        -1*
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N6(_n7, _n8),
                                        _n7,
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!565 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n3!563 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n1!564 +
                                        _n3!563 +
                                        _n2!562 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _n1!564 +
                                        _n3!563 +
                                        _n2!562 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8)),
                                        (C +
                                        _n1!564 +
                                        _n3!563 +
                                        _n2!562 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        (C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0)),
                                        Or(Not(_n4!565 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n3!563 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n1!564 +
                                        _n3!563 +
                                        _n2!562 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n4!565 >= 0),
                                        Not(_k7 >= 0),
                                        Not(_n1!564 >= 0),
                                        Not(_n3!563 >= 0),
                                        Not(_n2!562 >= 0),
                                        Not(_k8 >= 0),
                                        C +
                                        _n2!562 +
                                        _n3!563 +
                                        _n1!564 +
                                        _n4!565 +
                                        -1*
                                        d4array19(A,
                                        _n4!565,
                                        _n3!563,
                                        _n2!562,
                                        _n1!564,
                                        _N6(_k7, _k8),
                                        _k7,
                                        _k8) ==
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n7,
                                        _n1,
                                        _n3,
                                        _n2,
                                        _n8],
                                        Or(Not(_n4 >= 0),
                                        Not(_n7 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        Not(_n8 >= 0),
                                        C +
                                        _n1 +
                                        _n3 +
                                        _n2 +
                                        _n4 +
                                        -1*
                                        d4array19(A,
                                        _n4,
                                        _n3,
                                        _n2,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:43:29
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==C + _n1 + _n2 + _n3 + _n4))))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==C + _n1 + _n2 + _n3 + _n4))))

System try to prove 
ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==C + _n1 + _n2 + _n3 + _n4))))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n1,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))))))),d4array28(A, _x2, _x3, _x4, _x5, _k8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(Not(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),Implies((d4array28(A, _n4, _n3, _n2, _n1, _k8)==C + _n1 + _n2 + _n3 + _n4),(d4array28(A, _n4, _n3, _n2, _n1, _k8 + 1)==C + _n1 + _n2 + _n3 + _n4))))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[unit-resolution(th-lemma(Or(Not(d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8)),
                            d4array23(A,
                                      _n4!587,
                                      _n3!585,
                                      _n2!584,
                                      _n1!586,
                                      _N7(_k8),
                                      _k8) +
                            -1*
                            d4array28(A,
                                      _n4!587,
                                      _n3!585,
                                      _n2!584,
                                      _n1!586,
                                      1 + _k8) >=
                            0)),
                symm(unit-resolution(mp(quant-inst(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Or(Not(_n3!585 >= 0),
                                        Not(_n4!587 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_n2!584 >= 0),
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8)))),
                                        rewrite(Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Or(Not(_n3!585 >= 0),
                                        Not(_n4!587 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_n2!584 >= 0),
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8))) ==
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Not(_n3!585 >= 0),
                                        Not(_n4!587 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_n2!584 >= 0),
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8))),
                                        Or(Not(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Or(Not(_x3 >= 0),
                                        Not(_x2 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_x5 >= 0),
                                        Not(_x4 >= 0),
                                        d4array28(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        1 + _n8) ==
                                        d4array23(A,
                                        _x2,
                                        _x3,
                                        _x4,
                                        _x5,
                                        _N7(_n8),
                                        _n8)))),
                                        Not(_n3!585 >= 0),
                                        Not(_n4!587 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_n2!584 >= 0),
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) ==
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8))),
                                     mp(mp(mp~(mp(asserted(ForAll([_x3,
                                        _x2,
                                        _n8,
                                        _x5,
                                        _x4],
                                        Implies(And(_x3 >= 0,
                                        And(_x2 >= 0,
                                        And(_n8 >= 0,
..., unit-resolution(unit-resolution(th-lemma(Or(C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) ==
                                        0,
                                        Not(C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) <=
                                        0),
                                        Not(C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array28(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        1 + _k8) >=
                                        0))),
                                not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n4,
                                        _n1,
                                        _n3,
                                        _n2],
                                        Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        Implies(d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4,
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _k8 + 1) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))))),
                                        monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        trans(monotonicity(monotonicity(trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        monotonicity(monotonicity(rewrite(_k8 +
                                        1 ==
                                        1 + _k8),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _k8 + 1) ==
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        1 + _k8)),
                                        trans(monotonicity(trans(monotonicity(rewrite(... +
                                        ... +
                                        ... ==
                                        ... + ... + ...),
..., unit-resolution(th-lemma(Or(Not(C +
                                _n2!584 +
                                _n4!587 +
                                _n3!585 +
                                _n1!586 +
                                -1*
                                d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                0),
                            C +
                            _n2!584 +
                            _n4!587 +
                            _n3!585 +
                            _n1!586 +
                            -1*
                            d4array23(A,
                                      _n4!587,
                                      _n3!585,
                                      _n2!584,
                                      _n1!586,
                                      _N7(_k8),
                                      _k8) >=
                            0)),
                unit-resolution(mp(quant-inst(Or(Not(ForAll([_n4,
                                        _n1,
                                        _n8,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n1 +
                                        _n3 +
                                        _n4 +
                                        -1*
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N7(_n8),
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!587 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!585 >= 0),
                                        Not(_n2!584 >= 0),
                                        C +
                                        _n2!584 +
                                        _n1!586 +
                                        _n3!585 +
                                        _n4!587 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        0))),
                                   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _n2!584 +
                                        _n1!586 +
                                        _n3!585 +
                                        _n4!587 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8)),
                                        (C +
                                        _n2!584 +
                                        _n1!586 +
                                        _n3!585 +
                                        _n4!587 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        0) ==
                                        (C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        0)),
                                        Or(Not(_n4!587 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!585 >= 0),
                                        Not(_n2!584 >= 0),
                                        C +
                                        _n2!584 +
                                        _n1!586 +
                                        _n3!585 +
                                        _n4!587 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        0) ==
                                        Or(Not(_n4!587 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!585 >= 0),
                                        Not(_n2!584 >= 0),
                                        C +
                                        _n2!584 +
                                        _n4!587 +
                                        _n3!585 +
                                        _n1!586 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
                                        _n3!585,
                                        _n2!584,
                                        _n1!586,
                                        _N7(_k8),
                                        _k8) ==
                                        0)),
                                        Or(Not(ForAll([_n4,
                                        _n1,
                                        _n8,
                                        _n3,
                                        _n2],
                                        Or(Not(_n4 >= 0),
                                        Not(_n1 >= 0),
                                        Not(_n8 >= 0),
                                        Not(_n3 >= 0),
                                        Not(_n2 >= 0),
                                        C +
                                        _n2 +
                                        _n1 +
                                        _n3 +
                                        _n4 +
                                        -1*
                                        d4array23(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N7(_n8),
                                        _n8) ==
                                        0))),
                                        Or(Not(_n4!587 >= 0),
                                        Not(_n1!586 >= 0),
                                        Not(_k8 >= 0),
                                        Not(_n3!585 >= 0),
                                        Not(_n2!584 >= 0),
                                        C +
                                        _n2!584 +
                                        _n1!586 +
                                        _n3!585 +
                                        _n4!587 +
                                        -1*
                                        d4array23(A,
                                        _n4!587,
..., False]

Result 
Successfully Proved


Result --Successfully Proved

Axiomes Added--ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, _N8) == C + _n1 + _n2 + _n3 + _n4))

***********************
2017-05-20 00:43:47
***********************

Command--Prove 

Parameters--

 Pre Condition--[]
 Post Condition--['ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==C + _n5 + _n6 + _n7 + _n8)))']
 Strategy--Automatically Deriving Addition Axoimes

Query --

ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==C + _n5 + _n6 + _n7 + _n8)))

System try to prove 
ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==C + _n5 + _n6 + _n7 + _n8)))

Query to z3 
from z3 import *
set_param(proof=True)
_p1=Int('_p1')
_p2=Int('_p2')
_n=Int('_n')
arraySort = DeclareSort('arraySort')
_f=Function('_f',IntSort(),IntSort())
j1=Int('j1')
_N7=Function('_N7',IntSort(),IntSort())
_x4=Int('_x4')
_x5=Int('_x5')
_n5=Int('_n5')
_x1=Const('_x1',arraySort)
_x2=Int('_x2')
_x3=Int('_x3')
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l19=Function('l19',IntSort(),IntSort(),IntSort(),IntSort())
k14=Function('k14',IntSort(),IntSort())
l14=Function('l14',IntSort(),IntSort())
j28=Function('j28',IntSort(),IntSort())
_N6=Function('_N6',IntSort(),IntSort(),IntSort())
A1=Const('A1',arraySort)
_N2=Function('_N2',IntSort(),IntSort(),IntSort())
k1=Int('k1')
C1=Int('C1')
main=Int('main')
A=Const('A',arraySort)
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
C=Int('C')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
i1=Int('i1')
_N3=Function('_N3',IntSort(),IntSort())
_N1=Function('_N1',IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_n8=Int('_n8')
_N4=Const('_N4',IntSort())
_N5=Function('_N5',IntSort(),IntSort(),IntSort(),IntSort())
l23=Function('l23',IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l28=Function('l28',IntSort(),IntSort())
j14=Function('j14',IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k9=Function('k9',IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
k28=Function('k28',IntSort(),IntSort())
_N8=Const('_N8',IntSort())
_n2=Int('_n2')
_n3=Int('_n3')
_n1=Int('_n1')
_n6=Int('_n6')
_n7=Int('_n7')
_n4=Int('_n4')
n=Int('n')
k23=Function('k23',IntSort(),IntSort(),IntSort())
l5=Function('l5',IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l1=Int('l1')
n1=Int('n1')
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
l9=Function('l9',IntSort(),IntSort(),IntSort())
main=Int('main')
__VERIFIER_assert=Function('__VERIFIER_assert',RealSort(),IntSort())
_k1=Int('_k1')
_L1=Int('_L1')
_k2=Int('_k2')
_k3=Int('_k3')
_k4=Int('_k4')
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_k5=Int('_k5')
_k8=Int('_k8')
_k6=Int('_k6')
_k7=Int('_k7')
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array1=Function('d4array1',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array28=Function('d4array28',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array2=Function('d4array2',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array5=Function('d4array5',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array9=Function('d4array9',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array14=Function('d4array14',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array=Function('d4array',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array16=Function('d4array16',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array19=Function('d4array19',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
d4array23=Function('d4array23',arraySort,IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort(),IntSort())
_s=Solver()
_s.add(ForAll([_n],Implies(_n>=0, _f(_n)==_n)))
_s.set("timeout",60000)
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(i1 == _N8)
_s.add(k1 == k28(_N8))
_s.add(j1 == j28(_N8))
_s.add(l1 == l28(_N8))
_s.add(main == 0)
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array1(A, _x2, _x3, _x4, _x5) == d4array28(A, _x2, _x3, _x4, _x5, _N8))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _n1 + 1, _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array2(A, _x2, _x3, _x4, _x5, 0, _n2, _n3, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),_N1(_n2, _n3, _n4) >= n)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n1 < _N1(_n2, _n3, _n4),And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0)))),_f(_n1) < n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),Or(_N1(_n2, _n3, _n4)==0,_N1(_n2, _n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n4>=0,And(_n3>=0,_n2>=0)),l5(_n2 + 1, _n3, _n4) == _N1(_n2, _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array5(A, _x2, _x3, _x4, _x5, 0, _n3, _n4) == d4array9(A, _x2, _x3, _x4, _x5, _n3, _n4))))
_s.add(ForAll([_n4,_n3],l5(0, _n3, _n4) == 0))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),_N2(_n3, _n4) >= n)))
_s.add(ForAll([_n4,_n3,_n2],Implies(And(_n2 < _N2(_n3, _n4),And(_n4>=0,And(_n3>=0,_n2>=0))),_f(_n2) < n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),Or(_N2(_n3, _n4)==0,_N2(_n3, _n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),k9(_n3 + 1, _n4) == _N2(_n3, _n4))))
_s.add(ForAll([_n4,_n3],Implies(And(_n4>=0,_n3>=0),l9(_n3 + 1, _n4) == l5(_N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array9(A, _x2, _x3, _x4, _x5, 0, _n4) == d4array14(A, _x2, _x3, _x4, _x5, _n4))))
_s.add(ForAll([_n4],k9(0, _n4) == 0))
_s.add(ForAll([_n4],l9(0, _n4) == 0))
_s.add(ForAll([_n4],Implies(_n4>=0,_N3(_n4) >= n)))
_s.add(ForAll([_n4,_n3],Implies(And(_n3 < _N3(_n4),And(_n4>=0,_n3>=0)),_f(_n3) < n)))
_s.add(ForAll([_n4],Implies(_n4>=0,Or(_N3(_n4)==0,_N3(_n4) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,k14(_n4 + 1) == k9(_N3(_n4), _n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,j14(_n4 + 1) == _N3(_n4))))
_s.add(ForAll([_n4],Implies(_n4>=0,l14(_n4 + 1) == l9(_N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array14(A, _x2, _x3, _x4, _x5, 0) == d4array(A, _x2, _x3, _x4, _x5))))
_s.add(k14(0) == 0)
_s.add(j14(0) == 0)
_s.add(l14(0) == 0)
_s.add(_N4 >= n)
_s.add(ForAll([_n4],Implies(And(_n4 < _N4,_n4>=0),_f(_n4) < n)))
_s.add(Or(_N4==0,_N4 - 1 < n))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n5,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))))))),d4array16(A, _x2, _x3, _x4, _x5, _n5 + 1, _n6, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _n5, _n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array16(A, _x2, _x3, _x4, _x5, 0, _n6, _n7, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),_N5(_n6, _n7, _n8) >= n)))
_s.add(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5 < _N5(_n6, _n7, _n8),And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))),_f(_n5) < n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),Or(_N5(_n6, _n7, _n8)==0,_N5(_n6, _n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n7>=0,And(_n6>=0,_n8>=0)),l19(_n6 + 1, _n7, _n8) == _N5(_n6, _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array19(A, _x2, _x3, _x4, _x5, 0, _n7, _n8) == d4array23(A, _x2, _x3, _x4, _x5, _n7, _n8))))
_s.add(ForAll([_n7,_n8],l19(0, _n7, _n8) == 0))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),_N6(_n7, _n8) >= n)))
_s.add(ForAll([_n7,_n6,_n8],Implies(And(_n6 < _N6(_n7, _n8),And(_n7>=0,And(_n6>=0,_n8>=0))),_f(_n6) < n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),Or(_N6(_n7, _n8)==0,_N6(_n7, _n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),k23(_n7 + 1, _n8) == _N6(_n7, _n8))))
_s.add(ForAll([_n7,_n8],Implies(And(_n7>=0,_n8>=0),l23(_n7 + 1, _n8) == l19(_N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array23(A, _x2, _x3, _x4, _x5, 0, _n8) == d4array28(A, _x2, _x3, _x4, _x5, _n8))))
_s.add(ForAll([_n8],k23(0, _n8) == 0))
_s.add(ForAll([_n8],l23(0, _n8) == 0))
_s.add(ForAll([_n8],Implies(_n8>=0,_N7(_n8) >= n)))
_s.add(ForAll([_n7,_n8],Implies(And(_n7 < _N7(_n8),And(_n7>=0,_n8>=0)),_f(_n7) < n)))
_s.add(ForAll([_n8],Implies(_n8>=0,Or(_N7(_n8)==0,_N7(_n8) - 1 < n))))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,k28(_n8 + 1) == k23(_N7(_n8), _n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,j28(_n8 + 1) == _N7(_n8))))
_s.add(ForAll([_n8],Implies(_n8>=0,l28(_n8 + 1) == l23(_N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,_x4>=0))),d4array28(A, _x2, _x3, _x4, _x5, 0) == d4array14(A, _x2, _x3, _x4, _x5, _N4))))
_s.add(k28(0) == 0)
_s.add(j28(0) == 0)
_s.add(l28(0) == 0)
_s.add(_N8 >= n)
_s.add(ForAll([_n8],Implies(And(_n8 < _N8,_n8>=0),_f(_n8) < n)))
_s.add(Or(_N8==0,_N8 - 1 < n))
_s.add(ForAll([_x3,_x2,_n4,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n4>=0,And(_x5>=0,_x4>=0)))),d4array14(A, _x2, _x3, _x4, _x5, _n4 + 1) == d4array9(A, _x2, _x3, _x4, _x5, _N3(_n4), _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,_n3>=0))))),d4array9(A, _x2, _x3, _x4, _x5, _n3 + 1, _n4) == d4array5(A, _x2, _x3, _x4, _x5, _N2(_n3, _n4), _n3, _n4))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n4,_n3,_n2],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n4>=0,And(_n3>=0,_n2>=0)))))),d4array5(A, _x2, _x3, _x4, _x5, _n2 + 1, _n3, _n4) == d4array2(A, _x2, _x3, _x4, _x5, _N1(_n2, _n3, _n4), _n2, _n3, _n4))))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array2(A, _n4, _n3, _n2, _n1, _N1(_n2, _n3, _n4), _n2, _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array5(A, _n4, _n3, _n2, _n1, _N2(_n3, _n4), _n3, _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array9(A, _n4, _n3, _n2, _n1, _N3(_n4), _n4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array14(A, _n4, _n3, _n2, _n1, _N4) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_x3,_x2,_n8,_x5,_x4],Implies(And(_x3>=0,And(_x2>=0,And(_n8>=0,And(_x5>=0,_x4>=0)))),d4array28(A, _x2, _x3, _x4, _x5, _n8 + 1) == d4array23(A, _x2, _x3, _x4, _x5, _N7(_n8), _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,_n8>=0))))),d4array23(A, _x2, _x3, _x4, _x5, _n7 + 1, _n8) == d4array19(A, _x2, _x3, _x4, _x5, _N6(_n7, _n8), _n7, _n8))))
_s.add(ForAll([_x3,_x2,_x5,_x4,_n7,_n6,_n8],Implies(And(_x3>=0,And(_x2>=0,And(_x5>=0,And(_x4>=0,And(_n7>=0,And(_n6>=0,_n8>=0)))))),d4array19(A, _x2, _x3, _x4, _x5, _n6 + 1, _n7, _n8) == d4array16(A, _x2, _x3, _x4, _x5, _N5(_n6, _n7, _n8), _n6, _n7, _n8))))
_s.add(ForAll([_n4,_n7,_n6,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n6>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0)))))),d4array16(A, _n4, _n3, _n2, _n1, _N5(_n6, _n7, _n8), _n6, _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n7,_n1,_n3,_n2,_n8],Implies(And(_n4>=0,And(_n7>=0,And(_n1>=0,And(_n3>=0,And(_n2>=0,_n8>=0))))),d4array19(A, _n4, _n3, _n2, _n1, _N6(_n7, _n8), _n7, _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n8,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n8>=0,And(_n3>=0,_n2>=0)))),d4array23(A, _n4, _n3, _n2, _n1, _N7(_n8), _n8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(ForAll([_n4,_n1,_n3,_n2],Implies(And(_n4>=0,And(_n1>=0,And(_n3>=0,_n2>=0))),d4array28(A, _n4, _n3, _n2, _n1, _N8) == C + _n1 + _n2 + _n3 + _n4)))
_s.add(A1 == A)
_s.add(C1 == C)
_s.add(n1 == n)
_s.add(_k1>=0)
_s.add(_k2>=0)
_s.add(_k3>=0)
_s.add(_k4>=0)
_s.add(_k5>=0)
_s.add(_k8>=0)
_s.add(_k6>=0)
_s.add(_k7>=0)
_s.add(ForAll([_n2 ,_n3 ,_n4],_N1(_n2, _n3, _n4)>=0))
_s.add(ForAll([_n3 ,_n4],_N2(_n3, _n4)>=0))
_s.add(ForAll([_n4],_N3(_n4)>=0))
_s.add(_N4>=0)
_s.add(ForAll([_n6 ,_n7 ,_n8],_N5(_n6, _n7, _n8)>=0))
_s.add(ForAll([_n7 ,_n8],_N6(_n7, _n8)>=0))
_s.add(ForAll([_n8],_N7(_n8)>=0))
_s.add(_N8>=0)
_s.add(Not(ForAll([_n5,_n7,_n6,_n8],Implies(And(_n5>=0,And(_n7>=0,And(_n6>=0,_n8>=0))),(d4array28(A, _n8, _n7, _n6, _n5, _N8)==C + _n5 + _n6 + _n7 + _n8)))))
if sat==_s.check():
	print "Counter Example"
	print _s.model()
	witnessXmlStr=['<?xml version="1.0" encoding="UTF-8" standalone="no"?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry"><default>false</default></key><key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation"><default>false</default></key><key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/><key attr.name="sourcecodelang" attr.type="string" for="graph" id="sourcecodelang"/><key attr.name="producer" attr.type="string" for="graph" id="producer"/><key attr.name="specification" attr.type="string" for="graph" id="specification"/><key attr.name="programFile" attr.type="string" for="graph" id="programfile"/><key attr.name="programHash" attr.type="string" for="graph" id="programhash"/><key attr.name="memoryModel" attr.type="string" for="graph" id="memorymodel"/><key attr.name="architecture" attr.type="string" for="graph" id="architecture"/><key attr.name="startline" attr.type="int" for="edge" id="startline"/><key attr.name="assumption" attr.type="string" for="edge" id="assumption"/><key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/><key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/><graph edgedefault="directed"><data key="witness-type">violation_witness</data><data key="sourcecodelang">C</data><data key="producer">CPAchecker 1.6.1-svn</data><data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data><data key="programfile">multi/init-non-constant-4-u/init-non-constant-4-u.c</data><data key="programhash">1776ed2413d170f227b69d8c79ba700d31db6f75</data><data key="memorymodel">precise</data><data key="architecture">32bit</data><node id="entry"><data key="entry">true</data></node><node id="error"><data key="violation">true</data></node><edge source="entry" target="error">', '<data key="assumption.scope">main</data><data key="assumption.resultfunction">__VERIFIER_nondet_int</data></edge></graph></graphml>', 'main', 'multi/init-non-constant-4-u/init-non-constant-4-u.c']
	middle=''
	for element in _s.model():
		if str(element)==witnessXmlStr[2]:
			middle+='<data key="assumption">'+'\\'+'result=='+str(_s.model()[element])+'</data>'
	file = open(witnessXmlStr[3]+'_witness.graphml', 'w')
	file.write(witnessXmlStr[0]+middle+witnessXmlStr[1])
	file.close()
elif unsat==_s.check():
	_s.check()
	try:
		if os.path.isfile('j2llogs.logs'):
			file = open('j2llogs.logs', 'a')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
		else:
			file = open('j2llogs.logs', 'w')
			file.write("\n**************\nProof Details\n**************\n"+str(_s.proof().children())+"\n")
			file.close()
	except Exception as e:
		file = open('j2llogs.logs', 'a')
		file.write("\n**************\nProof Details\n**************\n"+"Error"+"\n")
		file.close()
	print "Successfully Proved"
else:
	print "Failed To Prove"

**************
Proof Details
**************
[mp(quant-inst(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                            Or(Not(_n4 >= 0),
                               Not(_n1 >= 0),
                               Not(_n3 >= 0),
                               Not(_n2 >= 0),
                               C +
                               _n2 +
                               _n4 +
                               _n1 +
                               _n3 +
                               -1*
                               d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                               0))),
                 Or(Not(_n8!8 >= 0),
                    Not(_n5!11 >= 0),
                    Not(_n7!10 >= 0),
                    Not(_n6!9 >= 0),
                    C +
                    _n6!9 +
                    _n8!8 +
                    _n5!11 +
                    _n7!10 +
                    -1*
                    d4array28(A,
                              _n8!8,
                              _n7!10,
                              _n6!9,
                              _n5!11,
                              _N8) ==
                    0))),
   trans(monotonicity(monotonicity(monotonicity(rewrite(C +
                                        _n6!9 +
                                        _n8!8 +
                                        _n5!11 +
                                        _n7!10 +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        C +
                                        _n7!10 +
                                        _n5!11 +
                                        _n8!8 +
                                        _n6!9 +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8)),
                                        (C +
                                        _n6!9 +
                                        _n8!8 +
                                        _n5!11 +
                                        _n7!10 +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0) ==
                                        (C +
                                        _n7!10 +
                                        _n5!11 +
                                        _n8!8 +
                                        _n6!9 +
                                        -1*
                                        d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                        0)),
                                   Or(Not(_n8!8 >= 0),
                                      Not(_n5!11 >= 0),
                                      Not(_n7!10 >= 0),
                                      Not(_n6!9 >= 0),
                                      C +
                                      _n6!9 +
                                      _n8!8 +
                                      _n5!11 +
                                      _n7!10 +
                                      -1*
                                      d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                      0) ==
                                   Or(Not(_n8!8 >= 0),
                                      Not(_n5!11 >= 0),
                                      Not(_n7!10 >= 0),
                                      Not(_n6!9 >= 0),
                                      C +
                                      _n7!10 +
                                      _n5!11 +
                                      _n8!8 +
                                      _n6!9 +
                                      -1*
                                      d4array28(A,
                                        _n8!8,
                                        _n7!10,
                                        _n6!9,
                                        _n5!11,
                                        _N8) ==
                                      0)),
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
                                       Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       C +
                                       _n2 +
                                       _n4 +
                                       _n1 +
                                       _n3 +
                                       -1*
                                       d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                       0))),
                         Or(Not(_n8!8 >= 0),
                            Not(_n5!11 >= 0),
                            Not(_n7!10 >= 0),
                            Not(_n6!9 >= 0),
                            C +
                            _n6!9 +
                            _n8!8 +
                            _n5!11 +
                            _n7!10 +
                            -1*
                            d4array28(A,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N8) ==
                            0)) ==
                      Or(Not(ForAll([_n4, _n1, _n3, _n2],
                                    Or(Not(_n4 >= 0),
                                       Not(_n1 >= 0),
                                       Not(_n3 >= 0),
                                       Not(_n2 >= 0),
                                       C +
                                       _n2 +
                                       _n4 +
                                       _n1 +
                                       _n3 +
                                       -1*
                                       d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                       0))),
                         Or(Not(_n8!8 >= 0),
                            Not(_n5!11 >= 0),
                            Not(_n7!10 >= 0),
                            Not(_n6!9 >= 0),
                            C +
                            _n7!10 +
                            _n5!11 +
                            _n8!8 +
                            _n6!9 +
                            -1*
                            d4array28(A,
                                      _n8!8,
                                      _n7!10,
                                      _n6!9,
                                      _n5!11,
                                      _N8) ==
                            0))),
         rewrite(Or(Not(ForAll([_n4, _n1, _n3, _n2],
                               Or(Not(_n4 >= 0),
                                  Not(_n1 >= 0),
                                  Not(_n3 >= 0),
                                  Not(_n2 >= 0),
                                  C +
                                  _n2 +
                                  _n4 +
                                  _n1 +
                                  _n3 +
                                  -1*
..., mp(mp(mp~(mp(mp(asserted(ForAll([_n4, _n1, _n3, _n2],
                                Implies(And(_n4 >= 0,
                                        And(_n1 >= 0,
                                        And(_n3 >= 0,
                                        _n2 >= 0))),
                                        d4array28(A,
                                        _n4,
                                        _n3,
                                        _n2,
                                        _n1,
                                        _N8) ==
                                        C +
                                        _n1 +
                                        _n2 +
                                        _n3 +
                                        _n4))),
                quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(2) +
                                        Var(0) ==
                                        C + Var(2) + Var(0)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        rewrite(C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)),
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        (d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                  rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
                                        Var(2),
                                        _N8) ==
                                        C +
                                        Var(2) +
                                        Var(0) +
                                        Var(1) +
                                        Var(3))),
                                  Implies(And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(3),
                                        Var(1),
                                        Var(0),
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        C +
                                        _n5 +
                                        _n6 +
                                        _n7 +
                                        _n8)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(3) +
                                        Var(1) ==
                                        C + Var(3) + Var(1)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        C +
                                        _n5 +
                                        _n6 +
                                        _n7 +
                                        _n8)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(3) +
                                        Var(1) ==
                                        C + Var(3) + Var(1)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        C +
                                        _n5 +
                                        _n6 +
                                        _n7 +
                                        _n8)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(3) +
                                        Var(1) ==
                                        C + Var(3) + Var(1)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
..., and-elim(not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        C +
                                        _n5 +
                                        _n6 +
                                        _n7 +
                                        _n8)))),
                                  monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(3) +
                                        Var(1) ==
                                        C + Var(3) + Var(1)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
..., not-or-elim(mp(mp~(mp(mp(asserted(Not(ForAll([_n5,
                                        _n7,
                                        _n6,
                                        _n8],
                                        Implies(And(_n5 >= 0,
                                        And(_n7 >= 0,
                                        And(_n6 >= 0,
                                        _n8 >= 0))),
                                        d4array28(A,
                                        _n8,
                                        _n7,
                                        _n6,
                                        _n5,
                                        _N8) ==
                                        C +
                                        _n5 +
                                        _n6 +
                                        _n7 +
                                        _n8)))),
                         monotonicity(quant-intro(trans(monotonicity(trans(monotonicity(rewrite(And(Var(2) >=
                                        0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0))),
                                        rewrite(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        And(Var(3) >= 0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))) ==
                                        And(Var(3) >= 0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        monotonicity(trans(monotonicity(trans(monotonicity(rewrite(C +
                                        Var(3) +
                                        Var(1) ==
                                        C + Var(3) + Var(1)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        rewrite(C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)),
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        (d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        rewrite(Implies(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0)) ==
                                        Or(Not(And(Var(3) >=
                                        0,
                                        Var(2) >= 0,
                                        Var(1) >= 0,
                                        Var(0) >= 0)),
                                        d4array28(A,
                                        Var(0),
                                        Var(2),
                                        Var(1),
                                        Var(3),
                                        _N8) ==
                                        C +
                                        Var(3) +
                                        Var(1) +
                                        Var(2) +
                                        Var(0))),
                                        Implies(And(Var(3) >=
                                        0,
                                        And(Var(2) >= 0,
                                        And(Var(1) >= 0,
                                        Var(0) >= 0))),
..., False]

Result 
Successfully Proved


Result --Successfully Proved
